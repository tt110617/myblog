import{_ as e}from"./plugin-vue_export-helper.21dcd24c.js";import{o,c,a as n,b as p,d as t,e as s,r as l}from"./app.6a2d513d.js";const i={},u=t('<h1 id="\u7B2C\u4E00\u7AE0-\u6570\u636E\u7ED3\u6784" tabindex="-1"><a class="header-anchor" href="#\u7B2C\u4E00\u7AE0-\u6570\u636E\u7ED3\u6784" aria-hidden="true">#</a> \u7B2C\u4E00\u7AE0 \u6570\u636E\u7ED3\u6784</h1><h2 id="_1-\u94FE\u8868\u7B97\u6CD5" tabindex="-1"><a class="header-anchor" href="#_1-\u94FE\u8868\u7B97\u6CD5" aria-hidden="true">#</a> 1.\u94FE\u8868\u7B97\u6CD5</h2><h3 id="_1-1-\u53CC\u6307\u9488\u6280\u5DE7\u79D2\u6740\u4E03\u9053\u94FE\u8868\u9898\u76EE" tabindex="-1"><a class="header-anchor" href="#_1-1-\u53CC\u6307\u9488\u6280\u5DE7\u79D2\u6740\u4E03\u9053\u94FE\u8868\u9898\u76EE" aria-hidden="true">#</a> 1.1 \u53CC\u6307\u9488\u6280\u5DE7\u79D2\u6740\u4E03\u9053\u94FE\u8868\u9898\u76EE</h3>',3),k={id:"_21-\u5408\u5E76\u4E24\u4E2A\u6709\u5E8F\u94FE\u8868",tabindex:"-1"},r=n("a",{class:"header-anchor",href:"#_21-\u5408\u5E76\u4E24\u4E2A\u6709\u5E8F\u94FE\u8868","aria-hidden":"true"},"#",-1),d=s(),v={href:"https://leetcode.cn/problems/merge-two-sorted-lists/",target:"_blank",rel:"noopener noreferrer"},m=s("21. \u5408\u5E76\u4E24\u4E2A\u6709\u5E8F\u94FE\u8868"),b=t(`<p>\u5C06\u4E24\u4E2A\u5347\u5E8F\u94FE\u8868\u5408\u5E76\u4E3A\u4E00\u4E2A\u65B0\u7684 <strong>\u5347\u5E8F</strong> \u94FE\u8868\u5E76\u8FD4\u56DE\u3002\u65B0\u94FE\u8868\u662F\u901A\u8FC7\u62FC\u63A5\u7ED9\u5B9A\u7684\u4E24\u4E2A\u94FE\u8868\u7684\u6240\u6709\u8282\u70B9\u7EC4\u6210\u7684\u3002</p><p><strong>\u601D\u8DEF\uFF1A</strong></p><p>\u58F0\u660E\u4E00\u4E2A\u5E26\u865A\u62DF\u5934\u8282\u70B9\u65B0\u94FE\u8868\uFF0C\u540C\u65F6\u904D\u5386\u4E24\u4E2A\u94FE\u8868\uFF0C\u5C06\u8282\u70B9\u8F83\u5C0F\u7684\u503C\u63A5\u5230\u65B0\u94FE\u8868\u4E0A\u9762\uFF0C\u6700\u540E\u628A\u672A\u904D\u5386\u5B8C\u7684\u94FE\u8868\u63A5\u5230\u65B0\u94FE\u8868\u4E0A\u9762\u3002</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> list1<span class="token punctuation">,</span> <span class="token class-name">ListNode</span> list2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ListNode</span> dummy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ListNode</span> p <span class="token operator">=</span> dummy<span class="token punctuation">;</span>
        <span class="token class-name">ListNode</span> p1 <span class="token operator">=</span> list1<span class="token punctuation">;</span>
        <span class="token class-name">ListNode</span> p2 <span class="token operator">=</span> list2<span class="token punctuation">;</span>
        <span class="token comment">// \u540C\u65F6\u904D\u5386\u4E24\u4E2A\u94FE\u8868</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>p1 <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> p2 <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// \u6BD4\u8F83\u5927\u5C0F\uFF0C\u5C06\u8F83\u5C0F\u7684\u8282\u70B9\u63A5\u5230\u65B0\u94FE\u8868\u4E0A\u9762</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>p1<span class="token punctuation">.</span>val <span class="token operator">&lt;</span> p2<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                p<span class="token punctuation">.</span>next <span class="token operator">=</span> p1<span class="token punctuation">;</span>
                p1 <span class="token operator">=</span> p1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                p<span class="token punctuation">.</span>next <span class="token operator">=</span> p2<span class="token punctuation">;</span>
                p2 <span class="token operator">=</span> p2<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            p <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// \u5C06\u672A\u904D\u5386\u5B8C\u7684\u94FE\u8868\u63A5\u5230\u65B0\u94FE\u8868\u4E0A\u9762</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>p1 <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            p<span class="token punctuation">.</span>next <span class="token operator">=</span> p1<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>p2 <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            p<span class="token punctuation">.</span>next <span class="token operator">=</span> p2<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> dummy<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),h={id:"_86-\u5206\u9694\u94FE\u8868",tabindex:"-1"},w=n("a",{class:"header-anchor",href:"#_86-\u5206\u9694\u94FE\u8868","aria-hidden":"true"},"#",-1),y=s(),g={href:"https://leetcode.cn/problems/partition-list/",target:"_blank",rel:"noopener noreferrer"},f=s("86. \u5206\u9694\u94FE\u8868"),_=t(`<p>\u7ED9\u4F60\u4E00\u4E2A\u94FE\u8868\u7684\u5934\u8282\u70B9 head \u548C\u4E00\u4E2A\u7279\u5B9A\u503C x \uFF0C\u8BF7\u4F60\u5BF9\u94FE\u8868\u8FDB\u884C\u5206\u9694\uFF0C\u4F7F\u5F97\u6240\u6709 \u5C0F\u4E8E x \u7684\u8282\u70B9\u90FD\u51FA\u73B0\u5728 \u5927\u4E8E\u6216\u7B49\u4E8E x \u7684\u8282\u70B9\u4E4B\u524D\u3002</p><p>\u4F60\u5E94\u5F53 \u4FDD\u7559 \u4E24\u4E2A\u5206\u533A\u4E2D\u6BCF\u4E2A\u8282\u70B9\u7684\u521D\u59CB\u76F8\u5BF9\u4F4D\u7F6E\u3002</p><p><strong>\u601D\u8DEF\uFF1A</strong></p><p>\u58F0\u660E\u4E24\u4E2A\u5E26\u865A\u62DF\u5934\u8282\u70B9\u7684\u94FE\u8868\uFF0C\u904D\u5386\u9898\u76EE\u7ED9\u7684\u94FE\u8868\uFF0C\u5C06\u6BD4\u7279\u5B9A\u503C\u5C0F\u548C\u5927\u7684\u8282\u70B9\u63A5\u5230\u65B0\u94FE\u8868\u4E0A\u9762\uFF0C\u518D\u63A5\u4E0A\u4E24\u4E2A\u65B0\u94FE\u8868\u3002</p><p><strong>\u6CE8\u610F\uFF1A</strong></p><p>\u5B58\u653E\u5927\u8282\u70B9\u7684\u94FE\u8868\u9700\u8981\u65AD\u5F00\u539F\u94FE\u8868 <code>p2.next = null;</code></p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">partition</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ListNode</span> dummy1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ListNode</span> dummy2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ListNode</span> p1 <span class="token operator">=</span> dummy1<span class="token punctuation">;</span>
        <span class="token class-name">ListNode</span> p2 <span class="token operator">=</span> dummy2<span class="token punctuation">;</span>
        <span class="token class-name">ListNode</span> p <span class="token operator">=</span> head<span class="token punctuation">;</span>
        <span class="token comment">// \u904D\u5386\u94FE\u8868</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span>val <span class="token operator">&lt;</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                p1<span class="token punctuation">.</span>next <span class="token operator">=</span> p<span class="token punctuation">;</span>
                p1 <span class="token operator">=</span> p1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                p2<span class="token punctuation">.</span>next <span class="token operator">=</span> p<span class="token punctuation">;</span>
                p2 <span class="token operator">=</span> p2<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            p <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// \u65AD\u5F00\u539F\u94FE\u8868</span>
        p2<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        p1<span class="token punctuation">.</span>next <span class="token operator">=</span> dummy2<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        <span class="token keyword">return</span> dummy1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7),x={id:"_23-\u5408\u5E76k\u4E2A\u5347\u5E8F\u94FE\u8868",tabindex:"-1"},j=n("a",{class:"header-anchor",href:"#_23-\u5408\u5E76k\u4E2A\u5347\u5E8F\u94FE\u8868","aria-hidden":"true"},"#",-1),N=s(),S={href:"https://leetcode.cn/problems/merge-k-sorted-lists/",target:"_blank",rel:"noopener noreferrer"},L=s("23. \u5408\u5E76K\u4E2A\u5347\u5E8F\u94FE\u8868"),q=t(`<p>\u7ED9\u4F60\u4E00\u4E2A\u94FE\u8868\u6570\u7EC4\uFF0C\u6BCF\u4E2A\u94FE\u8868\u90FD\u5DF2\u7ECF\u6309\u5347\u5E8F\u6392\u5217\u3002</p><p>\u8BF7\u4F60\u5C06\u6240\u6709\u94FE\u8868\u5408\u5E76\u5230\u4E00\u4E2A\u5347\u5E8F\u94FE\u8868\u4E2D\uFF0C\u8FD4\u56DE\u5408\u5E76\u540E\u7684\u94FE\u8868\u3002</p><p><strong>\u524D\u7F6E\u77E5\u8BC6\uFF1A</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>PriorityQueue(int initialCapacity, Comparator&lt;? super E&gt; comparator)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>\u521B\u5EFA\u5177\u6709 <code>PriorityQueue</code>\u521D\u59CB\u5BB9\u91CF\u7684PriorityQueue\uFF0C\u6839\u636E\u6307\u5B9A\u7684\u6BD4\u8F83\u5668\u5BF9\u5176\u5143\u7D20\u8FDB\u884C\u6392\u5E8F\u3002</p><table><thead><tr><th><code>boolean</code></th><th><code>add(E e)</code>\u5C06\u6307\u5B9A\u7684\u5143\u7D20\u63D2\u5165\u5230\u6B64\u4F18\u5148\u7EA7\u961F\u5217\u4E2D\u3002</th></tr></thead><tbody><tr><td><code>E</code></td><td><code>poll()</code>\u68C0\u7D22\u5E76\u5220\u9664\u6B64\u961F\u5217\u7684\u5934\uFF0C\u5982\u679C\u6B64\u961F\u5217\u4E3A\u7A7A\uFF0C\u5219\u8FD4\u56DE <code>null</code> \u3002</td></tr></tbody></table><p><strong>\u601D\u8DEF\uFF1A</strong></p><p>\u5C06\u8282\u70B9\u52A0\u5165\u5230\u4F18\u5148\u7EA7\u961F\u5217\uFF08\u6700\u5C0F\u5806\uFF09\u4E2D\uFF0C\u5F97\u5230 k \u4E2A\u8282\u70B9\u4E2D\u7684\u6700\u5C0F\u503C\uFF0C\u63A5\u5230\u65B0\u94FE\u8868\u4E2D\uFF0C\u6700\u5C0F\u8282\u70B9\u7684\u4E0B\u4E00\u4E2A\u8282\u70B9\u5165\u961F\uFF0C\u7ED3\u675F\u6761\u4EF6\u4E3A\u961F\u5217\u4E3A\u7A7A</p><p><strong>\u6CE8\u610F\uFF1A</strong></p><p>lists \u6570\u7EC4\u53EF\u80FD\u4E3A\u7A7A\uFF0C\u9700\u8981\u52A0\u4E0A\u975E\u7A7A\u5224\u65AD</p><p>\u590D\u6742\u5EA6\u5206\u6790</p><ul><li>\u65F6\u95F4\u590D\u6742\u5EA6\uFF1A\u8003\u8651\u4F18\u5148\u961F\u5217\u4E2D\u7684\u5143\u7D20\u4E0D\u8D85\u8FC7k\u4E2A\uFF0C\u90A3\u4E48\u63D2\u5165\u548C\u5220\u9664\u7684\u65F6\u95F4\u4EE3\u4EF7\u4E3AO(logk),\u8FD9\u91CC\u6700\u591A\u6709\u4E2A\u70B9\uFF0C\u5BF9\u4E8E\u6BCF\u4E2A\u70B9\u90FD\u88AB\u63D2\u5165\u5220\u9664\u5404\u4E00\u6B21\uFF0C\u6545\u603B\u7684\u65F6\u95F4\u4EE3\u4EF7\u5373\u6E10\u8FDB\u65F6\u95F4\u590D\u6742\u5EA6\u4E3AO(kn\xD7logk)\u3002</li><li>\u7A7A\u95F4\u590D\u6742\u5EA6\uFF1A\u8FD9\u91CC\u7528\u4E86\u4F18\u5148\u961F\u5217\uFF0C\u4F18\u5148\u961F\u5217\u4E2D\u7684\u5143\u7D20\u4E0D\u8D85\u8FC7k\u4E2A\uFF0C\u6545\u6E10\u8FDB\u7A7A\u95F4\u590D\u6742\u5EA6\u4E3AO(k)\u3002</li></ul><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">mergeKLists</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span><span class="token punctuation">[</span><span class="token punctuation">]</span> lists<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// \u975E\u7A7A\u5224\u65AD</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>lists<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">ListNode</span> dummy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ListNode</span> p <span class="token operator">=</span> dummy<span class="token punctuation">;</span>
        <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ListNode</span><span class="token punctuation">&gt;</span></span> pq <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>lists<span class="token punctuation">.</span>length<span class="token punctuation">,</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> a<span class="token punctuation">.</span>val <span class="token operator">-</span> b<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// \u8282\u70B9\u5165\u961F</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> node <span class="token operator">:</span> lists<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                pq<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// \u7ED3\u675F\u6761\u4EF6\u4E3A \u961F\u5217\u4E3A\u7A7A</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>pq<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// \u5F97\u5230\u6700\u5C0F\u503C</span>
            <span class="token class-name">ListNode</span> node <span class="token operator">=</span> pq<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// \u63A5\u5230\u65B0\u94FE\u8868\u4E2D</span>
            p<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>
            <span class="token comment">// \u4E0B\u4E00\u8282\u70B9\u5165\u961F</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>next <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                pq<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// p \u6307\u9488\u4E0D\u65AD\u524D\u8FDB</span>
            p <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> dummy<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,13),T={id:"_19-\u5220\u9664\u94FE\u8868\u7684\u5012\u6570\u7B2C-n-\u4E2A\u7ED3\u70B9",tabindex:"-1"},I=n("a",{class:"header-anchor",href:"#_19-\u5220\u9664\u94FE\u8868\u7684\u5012\u6570\u7B2C-n-\u4E2A\u7ED3\u70B9","aria-hidden":"true"},"#",-1),A=s(),E={href:"https://leetcode.cn/problems/remove-nth-node-from-end-of-list/",target:"_blank",rel:"noopener noreferrer"},O=s("19. \u5220\u9664\u94FE\u8868\u7684\u5012\u6570\u7B2C N \u4E2A\u7ED3\u70B9"),M=t(`<p>\u7ED9\u4F60\u4E00\u4E2A\u94FE\u8868\uFF0C\u5220\u9664\u94FE\u8868\u7684\u5012\u6570\u7B2C <code>n</code> \u4E2A\u7ED3\u70B9\uFF0C\u5E76\u4E14\u8FD4\u56DE\u94FE\u8868\u7684\u5934\u7ED3\u70B9\u3002</p><p><strong>\u601D\u8DEF\uFF1A</strong></p><p>\u53CC\u6307\u9488\uFF0Cfast\u6307\u9488\u5148\u8D70 n \u6B65\uFF0C\u4E4B\u540E slow\uFF0Cfast \u6307\u9488\u4E00\u5757\u8D70\uFF0Cfast \u6307\u9488\u8D70\u5230\u5C3E\u7684\u65F6\u5019 slow \u6307\u9488\u521A\u597D\u6307\u5411 \u5012\u6570\u7B2C N \u4E2A \u8282\u70B9\uFF0C\u5220\u9664\u7684\u8BDD\u6211\u4EEC\u8BA9 slow \u6307\u9488\u6307\u5411 \u5012\u6570\u7B2C n -1 \u4E2A\u8282\u70B9</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">removeNthFromEnd</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token class-name">ListNode</span> dummy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        dummy<span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>
        <span class="token class-name">ListNode</span> fast <span class="token operator">=</span> dummy<span class="token punctuation">;</span>
        <span class="token class-name">ListNode</span> slow <span class="token operator">=</span> dummy<span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// \u8BA9 slow \u6307\u9488\u6307\u5411\u5012\u6570\u7B2C n-1 \u4E2A\u8282\u70B9</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>fast<span class="token punctuation">.</span>next <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
            fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        slow<span class="token punctuation">.</span>next  <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        <span class="token keyword">return</span> dummy<span class="token punctuation">.</span>next<span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),z={id:"_876-\u94FE\u8868\u7684\u4E2D\u95F4\u7ED3\u70B9",tabindex:"-1"},C=n("a",{class:"header-anchor",href:"#_876-\u94FE\u8868\u7684\u4E2D\u95F4\u7ED3\u70B9","aria-hidden":"true"},"#",-1),D=s(),R={href:"https://leetcode.cn/problems/middle-of-the-linked-list/",target:"_blank",rel:"noopener noreferrer"},B=s("876. \u94FE\u8868\u7684\u4E2D\u95F4\u7ED3\u70B9"),V=t(`<p>\u7ED9\u5B9A\u4E00\u4E2A\u5934\u7ED3\u70B9\u4E3A <code>head</code> \u7684\u975E\u7A7A\u5355\u94FE\u8868\uFF0C\u8FD4\u56DE\u94FE\u8868\u7684\u4E2D\u95F4\u7ED3\u70B9\u3002</p><p>\u5982\u679C\u6709\u4E24\u4E2A\u4E2D\u95F4\u7ED3\u70B9\uFF0C\u5219\u8FD4\u56DE\u7B2C\u4E8C\u4E2A\u4E2D\u95F4\u7ED3\u70B9</p><p><strong>\u601D\u8DEF\uFF1A</strong></p><p>\u5FEB\u6162\u6307\u9488\uFF0C\u5FEB\u6307\u9488\u6BCF\u6B21\u8D70\u4E24\u6B65\uFF0C\u6162\u6307\u9488\u6BCF\u6B21\u8D70\u4E00\u6B65</p><ul><li>\u5947\u6570\u4E2A\u8282\u70B9\uFF0Cslow \u6307\u9488\u6307\u5411 \u4E2D\u95F4\u8282\u70B9</li><li>\u5076\u6570\u4E2A\u8282\u70B9\uFF0Cslow \u6307\u9488\u6307\u5411 \u4E2D\u95F4\u8282\u70B9\u7684\u7B2C\u4E8C\u4E2A\u8282\u70B9</li></ul><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">middleNode</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ListNode</span> fast <span class="token operator">=</span> head<span class="token punctuation">;</span>
        <span class="token class-name">ListNode</span> slow <span class="token operator">=</span> head<span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>fast <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> fast<span class="token punctuation">.</span>next <span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
            slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> slow<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),P={id:"_141-\u73AF\u5F62\u94FE\u8868",tabindex:"-1"},U=n("a",{class:"header-anchor",href:"#_141-\u73AF\u5F62\u94FE\u8868","aria-hidden":"true"},"#",-1),H=s(),K={href:"https://leetcode.cn/problems/linked-list-cycle/",target:"_blank",rel:"noopener noreferrer"},Q=s("141. \u73AF\u5F62\u94FE\u8868"),G=t(`<p>\u7ED9\u4F60\u4E00\u4E2A\u94FE\u8868\u7684\u5934\u8282\u70B9 head \uFF0C\u5224\u65AD\u94FE\u8868\u4E2D\u662F\u5426\u6709\u73AF\u3002</p><p>\u5982\u679C\u94FE\u8868\u4E2D\u6709\u67D0\u4E2A\u8282\u70B9\uFF0C\u53EF\u4EE5\u901A\u8FC7\u8FDE\u7EED\u8DDF\u8E2A next \u6307\u9488\u518D\u6B21\u5230\u8FBE\uFF0C\u5219\u94FE\u8868\u4E2D\u5B58\u5728\u73AF\u3002 \u4E3A\u4E86\u8868\u793A\u7ED9\u5B9A\u94FE\u8868\u4E2D\u7684\u73AF\uFF0C\u8BC4\u6D4B\u7CFB\u7EDF\u5185\u90E8\u4F7F\u7528\u6574\u6570 pos \u6765\u8868\u793A\u94FE\u8868\u5C3E\u8FDE\u63A5\u5230\u94FE\u8868\u4E2D\u7684\u4F4D\u7F6E\uFF08\u7D22\u5F15\u4ECE 0 \u5F00\u59CB\uFF09\u3002\u6CE8\u610F\uFF1Apos \u4E0D\u4F5C\u4E3A\u53C2\u6570\u8FDB\u884C\u4F20\u9012 \u3002\u4EC5\u4EC5\u662F\u4E3A\u4E86\u6807\u8BC6\u94FE\u8868\u7684\u5B9E\u9645\u60C5\u51B5\u3002</p><p>\u5982\u679C\u94FE\u8868\u4E2D\u5B58\u5728\u73AF \uFF0C\u5219\u8FD4\u56DE true \u3002 \u5426\u5219\uFF0C\u8FD4\u56DE false \u3002</p><p><strong>\u601D\u8DEF\uFF1A</strong></p><p>\u5FEB\u6162\u6307\u9488\uFF0C\u5FEB\u6307\u9488\u6BCF\u6B21\u8D70\u4E24\u6B65\uFF0C\u6162\u6307\u9488\u6BCF\u6B21\u8D70\u4E00\u6B65\uFF0C\u5982\u679C\u4E24\u4E2A\u6307\u9488\u53EF\u4EE5\u76F8\u9047\u7684\u8BDD\uFF0C\u5C31\u6709\u73AF\uFF0C\u4E0D\u53EF\u4EE5\u7684\u8BDD\u5C31\u6CA1\u6709\u73AF\u3002</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasCycle</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ListNode</span> fast <span class="token operator">=</span> head<span class="token punctuation">;</span>
        <span class="token class-name">ListNode</span> slow <span class="token operator">=</span> head<span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>fast <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> fast<span class="token punctuation">.</span>next <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
            slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
            <span class="token comment">// \u76F8\u9047</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>slow <span class="token operator">==</span> fast<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),F={id:"_142-\u73AF\u5F62\u94FE\u8868-ii",tabindex:"-1"},W=n("a",{class:"header-anchor",href:"#_142-\u73AF\u5F62\u94FE\u8868-ii","aria-hidden":"true"},"#",-1),X=s(),Y={href:"https://leetcode.cn/problems/linked-list-cycle-ii/",target:"_blank",rel:"noopener noreferrer"},J=s("142. \u73AF\u5F62\u94FE\u8868 II"),Z=t(`<p>\u7ED9\u5B9A\u4E00\u4E2A\u94FE\u8868\u7684\u5934\u8282\u70B9 head \uFF0C\u8FD4\u56DE\u94FE\u8868\u5F00\u59CB\u5165\u73AF\u7684\u7B2C\u4E00\u4E2A\u8282\u70B9\u3002 \u5982\u679C\u94FE\u8868\u65E0\u73AF\uFF0C\u5219\u8FD4\u56DE null\u3002</p><p>\u5982\u679C\u94FE\u8868\u4E2D\u6709\u67D0\u4E2A\u8282\u70B9\uFF0C\u53EF\u4EE5\u901A\u8FC7\u8FDE\u7EED\u8DDF\u8E2A next \u6307\u9488\u518D\u6B21\u5230\u8FBE\uFF0C\u5219\u94FE\u8868\u4E2D\u5B58\u5728\u73AF\u3002 \u4E3A\u4E86\u8868\u793A\u7ED9\u5B9A\u94FE\u8868\u4E2D\u7684\u73AF\uFF0C\u8BC4\u6D4B\u7CFB\u7EDF\u5185\u90E8\u4F7F\u7528\u6574\u6570 pos \u6765\u8868\u793A\u94FE\u8868\u5C3E\u8FDE\u63A5\u5230\u94FE\u8868\u4E2D\u7684\u4F4D\u7F6E\uFF08\u7D22\u5F15\u4ECE 0 \u5F00\u59CB\uFF09\u3002\u5982\u679C pos \u662F -1\uFF0C\u5219\u5728\u8BE5\u94FE\u8868\u4E2D\u6CA1\u6709\u73AF\u3002\u6CE8\u610F\uFF1Apos \u4E0D\u4F5C\u4E3A\u53C2\u6570\u8FDB\u884C\u4F20\u9012\uFF0C\u4EC5\u4EC5\u662F\u4E3A\u4E86\u6807\u8BC6\u94FE\u8868\u7684\u5B9E\u9645\u60C5\u51B5\u3002</p><p>\u4E0D\u5141\u8BB8\u4FEE\u6539 \u94FE\u8868\u3002</p><p><strong>\u601D\u8DEF\uFF1A</strong></p><p>\u5FEB\u6162\u6307\u9488\uFF0C\u5FEB\u6307\u9488\u6BCF\u6B21\u8D70\u4E24\u6B65\uFF0C\u6162\u6307\u9488\u6BCF\u6B21\u8D70\u4E00\u6B65\uFF0C\u76F8\u9047\u4E4B\u540E\uFF0Cslow \u6307\u9488\u91CD\u65B0\u6307\u5411 head\uFF0C\u5F53\u5FEB\u6162\u6307\u9488\u518D\u6B21\u76F8\u9047\u7684\u65F6\u5019\uFF0C\u5C31\u662F\u73AF\u7684\u8D77\u70B9</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/2541/image-20220713105044372.png" alt="image-20220713105044372"></p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">detectCycle</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ListNode</span> fast <span class="token operator">=</span> head<span class="token punctuation">;</span>
        <span class="token class-name">ListNode</span> slow <span class="token operator">=</span> head<span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>fast <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> fast<span class="token punctuation">.</span>next <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
            slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
            <span class="token comment">// \u76F8\u9047</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>slow <span class="token operator">==</span> fast<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                slow <span class="token operator">=</span> head<span class="token punctuation">;</span>
                <span class="token comment">// slow\u3001fast \u524D\u8FDB\u76F4\u5230\u76F8\u9047\uFF0C\u5C31\u662F\u73AF\u8D77\u70B9</span>
                <span class="token keyword">while</span> <span class="token punctuation">(</span>slow <span class="token operator">!=</span> fast<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
                    fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">return</span> slow<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// \u65E0\u73AF</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7),$={id:"_160-\u76F8\u4EA4\u94FE\u8868",tabindex:"-1"},nn=n("a",{class:"header-anchor",href:"#_160-\u76F8\u4EA4\u94FE\u8868","aria-hidden":"true"},"#",-1),sn=s(),an={href:"https://leetcode.cn/problems/intersection-of-two-linked-lists/",target:"_blank",rel:"noopener noreferrer"},pn=s("160. \u76F8\u4EA4\u94FE\u8868"),tn=t(`<p>\u7ED9\u4F60\u4E24\u4E2A\u5355\u94FE\u8868\u7684\u5934\u8282\u70B9 <code>headA</code> \u548C <code>headB</code> \uFF0C\u8BF7\u4F60\u627E\u51FA\u5E76\u8FD4\u56DE\u4E24\u4E2A\u5355\u94FE\u8868\u76F8\u4EA4\u7684\u8D77\u59CB\u8282\u70B9\u3002\u5982\u679C\u4E24\u4E2A\u94FE\u8868\u4E0D\u5B58\u5728\u76F8\u4EA4\u8282\u70B9\uFF0C\u8FD4\u56DE <code>null</code> \u3002</p><p><strong>\u601D\u8DEF\uFF1A</strong></p><p>\u5C06\u4E24\u4E2A\u94FE\u8868\u770B\u6210\u903B\u8F91\u4E0A\u76F8\u8FDE\u7684\u4E24\u4E2A\u94FE\u8868\uFF0C\u904D\u5386\uFF0C\u76F8\u9047\u65F6\u8FD4\u56DE\uFF08\u53EF\u80FD\u662F\u76F8\u4EA4\u7684\u8282\u70B9\uFF0C\u4E5F\u6709\u53EF\u80FD\u662F null \u8282\u70B9\uFF09</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">getIntersectionNode</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> headA<span class="token punctuation">,</span> <span class="token class-name">ListNode</span> headB<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ListNode</span> p <span class="token operator">=</span> headA<span class="token punctuation">;</span>
        <span class="token class-name">ListNode</span> q <span class="token operator">=</span> headB<span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> q<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                p <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token comment">// \u63A5\u5230 headB \u4E0A\u53BB</span>
                p <span class="token operator">=</span> headB<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>q <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                q <span class="token operator">=</span> q<span class="token punctuation">.</span>next<span class="token punctuation">;</span> 
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                q <span class="token operator">=</span> headA<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> p<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-2-\u9012\u5F52\u9B54\u6CD5-\u53CD\u8F6C\u5355\u94FE\u8868" tabindex="-1"><a class="header-anchor" href="#_1-2-\u9012\u5F52\u9B54\u6CD5-\u53CD\u8F6C\u5355\u94FE\u8868" aria-hidden="true">#</a> 1.2 \u9012\u5F52\u9B54\u6CD5\uFF1A\u53CD\u8F6C\u5355\u94FE\u8868</h3>`,5),en={id:"_206-\u53CD\u8F6C\u94FE\u8868",tabindex:"-1"},on=n("a",{class:"header-anchor",href:"#_206-\u53CD\u8F6C\u94FE\u8868","aria-hidden":"true"},"#",-1),cn=s(),ln={href:"https://leetcode.cn/problems/reverse-linked-list/",target:"_blank",rel:"noopener noreferrer"},un=s("206. \u53CD\u8F6C\u94FE\u8868"),kn=t(`<p>\u7ED9\u4F60\u5355\u94FE\u8868\u7684\u5934\u8282\u70B9 <code>head</code> \uFF0C\u8BF7\u4F60\u53CD\u8F6C\u94FE\u8868\uFF0C\u5E76\u8FD4\u56DE\u53CD\u8F6C\u540E\u7684\u94FE\u8868\u3002</p><blockquote><p>\u8FED\u4EE3\u6CD5</p></blockquote><p><strong>\u601D\u8DEF\uFF1A</strong></p><p>\u4F7F\u7528\u4E09\u4E2A\u6307\u9488 pre\u3001next\u3001cur\uFF0C\u53CD\u8F6C\u94FE\u8868</p><p>\u590D\u6742\u5EA6\u5206\u6790\uFF1A</p><ul><li>\u65F6\u95F4\u590D\u6742\u5EA6 O(n)</li><li>\u7A7A\u95F4\u590D\u6742\u5EA6 O(1)</li></ul><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">reverseList</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ListNode</span> cur <span class="token operator">=</span> head<span class="token punctuation">,</span> pre <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>cur <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            next <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
            cur<span class="token punctuation">.</span>next <span class="token operator">=</span> pre<span class="token punctuation">;</span>
            pre <span class="token operator">=</span> cur<span class="token punctuation">;</span>
            cur <span class="token operator">=</span> next<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> pre<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>\u9012\u5F52</p></blockquote><p><strong>\u601D\u8DEF\uFF1A</strong></p><p>\u53CD\u8F6C head.next \u94FE\u8868\uFF0C\u518D\u53BB\u8FDE\u63A5\u7B2C\u4E00\u4E2A\u8282\u70B9\uFF0C\u94FE\u8868\u672B\u5C3E\u7F6E\u4E3A null</p><p>\u590D\u6742\u5EA6\u5206\u6790\uFF1A</p><ul><li>\u65F6\u95F4\u590D\u6742\u5EA6 O(n)</li><li>\u7A7A\u95F4\u590D\u6742\u5EA6 O(n)</li></ul><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code> <span class="token comment">// \u5B9A\u4E49\uFF1A\u53CD\u8F6C\u94FE\u8868\uFF0C\u5E76\u8FD4\u56DE\u53CD\u8F6C\u540E\u7684\u5934\u8282\u70B9</span>
    <span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">reverseList</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// base case</span>
        <span class="token comment">// \u6CA1\u6709\u8282\u70B9\u6216\u53EA\u6709\u4E00\u4E2A\u8282\u70B9\u662F\u4E0D\u53CD\u8F6C</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> head<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> head<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">ListNode</span> last <span class="token operator">=</span> <span class="token function">reverseList</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// \u8FDE\u63A5\u7B2C\u4E00\u4E2A\u8282\u70B9</span>
        head<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>
        <span class="token comment">// \u94FE\u8868\u7684\u672B\u5C3E\u6307\u5411 null</span>
        head<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> last<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,13),rn={id:"_92-\u53CD\u8F6C\u94FE\u8868-ii",tabindex:"-1"},dn=n("a",{class:"header-anchor",href:"#_92-\u53CD\u8F6C\u94FE\u8868-ii","aria-hidden":"true"},"#",-1),vn=s(),mn={href:"https://leetcode.cn/problems/reverse-linked-list-ii/",target:"_blank",rel:"noopener noreferrer"},bn=s("92. \u53CD\u8F6C\u94FE\u8868 II"),hn=t(`<p>\u7ED9\u4F60\u5355\u94FE\u8868\u7684\u5934\u6307\u9488 head \u548C\u4E24\u4E2A\u6574\u6570 left \u548C right \uFF0C\u5176\u4E2D left &lt;= right \u3002\u8BF7\u4F60\u53CD\u8F6C\u4ECE\u4F4D\u7F6E left \u5230\u4F4D\u7F6E right \u7684\u94FE\u8868\u8282\u70B9\uFF0C\u8FD4\u56DE \u53CD\u8F6C\u540E\u7684\u94FE\u8868 \u3002</p><blockquote><p>\u9012\u5F52</p></blockquote><p><strong>\u601D\u8DEF\uFF1A</strong></p><p>1.\u53CD\u8F6C\u524Dn\u4E2A\u8282\u70B9 reverseN(ListNode head, int n)</p><p>\u200B base case\uFF1An == 1\uFF0C\u8BB0\u5F55\u540E\u9A71\u8282\u70B9 next \uFF0Clast \u63A5\u6536\u8FD4\u56DE\u503C\uFF0C\u8FDE\u63A5\u7B2C\u4E00\u4E2A\u8282\u70B9\uFF0C\u7B2C\u4E00\u4E2A\u8282\u70B9\u6307\u5411\u540E\u9A71\u8282\u70B9 next</p><p>2.\u8FD4\u56DE left \u5230 right \u7684\u8282\u70B9 reverseBetween(ListNode head, int left, int right)</p><p>\u200B base case: left == 1\uFF0C\u7B49\u540C\u4E8E\u53CD\u8F6C\u524DN\u4E2A\u8282\u70B9\uFF0C\u7528 head.next \u63A5\u6536\u8FD4\u56DE\u7ED3\u679C</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>

    <span class="token class-name">ListNode</span> next<span class="token punctuation">;</span>

    <span class="token comment">// \u5B9A\u4E49\uFF1A\u4F60\u53CD\u8F6C\u4ECE\u4F4D\u7F6E left \u5230\u4F4D\u7F6E right \u7684\u94FE\u8868\u8282\u70B9\uFF0C\u8FD4\u56DE \u53CD\u8F6C\u540E\u7684\u94FE\u8868</span>
    <span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">reverseBetween</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// base case</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token function">reverseN</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        head<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token function">reverseBetween</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>next<span class="token punctuation">,</span> left <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> right <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> head<span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
    <span class="token comment">// \u5B9A\u4E49\uFF1A\u53CD\u8F6C\u524Dn\u4E2A\u8282\u70B9\uFF0C\u8FD4\u56DE\u53CD\u8F6C\u540E\u7684\u94FE\u8868</span>
    <span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">reverseN</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// base case</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// \u8BB0\u5F55\u540E\u9A71\u8282\u70B9</span>
            next <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
            <span class="token keyword">return</span> head<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// \u4EE5 head.next \u4E3A\u8D77\u70B9\uFF0C\u53CD\u8F6C\u524D n -1 \u4E2A\u8282\u70B9</span>
        <span class="token class-name">ListNode</span> last <span class="token operator">=</span> <span class="token function">reverseN</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>next<span class="token punctuation">,</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// \u8FDE\u63A5\u7B2C\u4E00\u4E2A\u8282\u70B9</span>
        head<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>
        <span class="token comment">// \u7B2C\u4E00\u4E2A\u8282\u70B9\u6307\u5411\u540E\u9A71\u8282\u70B9</span>
        head<span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>
        <span class="token keyword">return</span> last<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8),wn={id:"_25-k-\u4E2A\u4E00\u7EC4\u7FFB\u8F6C\u94FE\u8868",tabindex:"-1"},yn=n("a",{class:"header-anchor",href:"#_25-k-\u4E2A\u4E00\u7EC4\u7FFB\u8F6C\u94FE\u8868","aria-hidden":"true"},"#",-1),gn=s(),fn={href:"https://leetcode.cn/problems/reverse-nodes-in-k-group/",target:"_blank",rel:"noopener noreferrer"},_n=s("25. K \u4E2A\u4E00\u7EC4\u7FFB\u8F6C\u94FE\u8868"),xn=t(`<p>\u7ED9\u4F60\u94FE\u8868\u7684\u5934\u8282\u70B9 head \uFF0C\u6BCF k \u4E2A\u8282\u70B9\u4E00\u7EC4\u8FDB\u884C\u7FFB\u8F6C\uFF0C\u8BF7\u4F60\u8FD4\u56DE\u4FEE\u6539\u540E\u7684\u94FE\u8868\u3002</p><p>k \u662F\u4E00\u4E2A\u6B63\u6574\u6570\uFF0C\u5B83\u7684\u503C\u5C0F\u4E8E\u6216\u7B49\u4E8E\u94FE\u8868\u7684\u957F\u5EA6\u3002\u5982\u679C\u8282\u70B9\u603B\u6570\u4E0D\u662F k \u7684\u6574\u6570\u500D\uFF0C\u90A3\u4E48\u8BF7\u5C06\u6700\u540E\u5269\u4F59\u7684\u8282\u70B9\u4FDD\u6301\u539F\u6709\u987A\u5E8F\u3002</p><p>\u4F60\u4E0D\u80FD\u53EA\u662F\u5355\u7EAF\u7684\u6539\u53D8\u8282\u70B9\u5185\u90E8\u7684\u503C\uFF0C\u800C\u662F\u9700\u8981\u5B9E\u9645\u8FDB\u884C\u8282\u70B9\u4EA4\u6362\u3002</p><p><strong>\u601D\u8DEF\uFF1A</strong></p><p>base case\uFF1A\u904D\u5386\u627E\u5230\u7B2C k \u4E2A \u8282\u70B9\uFF0C\u82E5\u4E3A \u7A7A\uFF0C\u76F4\u63A5\u8FD4\u56DE\u5934\u8282\u70B9\uFF0C\u5426\u5219 \u53CD\u8F6C\u94FE\u8868\uFF0C\u5E76\u8FDE\u63A5\u8D77\u6765</p><p>\u590D\u6742\u5EA6\u5206\u6790\uFF1A</p><ul><li>\u65F6\u95F4\u590D\u6742\u5EA6 O(n)</li><li>\u7A7A\u95F4\u590D\u6742\u5EA6 O(n)</li></ul><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>

    <span class="token class-name">ListNode</span> next<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">reverseKGroup</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ListNode</span> a <span class="token operator">=</span> head<span class="token punctuation">;</span>
        <span class="token class-name">ListNode</span> b <span class="token operator">=</span> head<span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> k<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// base case \u4E0D\u8DB3 k \u4E2A\u8282\u70B9</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> head<span class="token punctuation">;</span>
            b <span class="token operator">=</span> b<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// \u53CD\u8F6C\u524D k \u4E2A\u8282\u70B9</span>
        <span class="token class-name">ListNode</span> node <span class="token operator">=</span> <span class="token function">reverseN</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// \u8FDE\u63A5\u540E\u9762\u53CD\u8F6C\u7684\u94FE\u8868</span>
        a<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token function">reverseKGroup</span><span class="token punctuation">(</span>b <span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> node<span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
    <span class="token comment">// \u5B9A\u4E49\uFF1A\u53CD\u8F6C\u524Dn\u4E2A\u8282\u70B9\uFF0C\u8FD4\u56DE\u53CD\u8F6C\u540E\u7684\u94FE\u8868</span>
    <span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">reverseN</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// base case</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// \u8BB0\u5F55\u540E\u9A71\u8282\u70B9</span>
            next <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
            <span class="token keyword">return</span> head<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// \u4EE5 head.next \u4E3A\u8D77\u70B9\uFF0C\u53CD\u8F6C\u524D n -1 \u4E2A\u8282\u70B9</span>
        <span class="token class-name">ListNode</span> last <span class="token operator">=</span> <span class="token function">reverseN</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>next<span class="token punctuation">,</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// \u8FDE\u63A5\u7B2C\u4E00\u4E2A\u8282\u70B9</span>
        head<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>
        <span class="token comment">// \u7B2C\u4E00\u4E2A\u8282\u70B9\u6307\u5411\u540E\u9A71\u8282\u70B9</span>
        head<span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>
        <span class="token keyword">return</span> last<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-3-\u5982\u4F55\u5224\u65AD\u56DE\u6587\u94FE\u8868" tabindex="-1"><a class="header-anchor" href="#_1-3-\u5982\u4F55\u5224\u65AD\u56DE\u6587\u94FE\u8868" aria-hidden="true">#</a> 1.3 \u5982\u4F55\u5224\u65AD\u56DE\u6587\u94FE\u8868</h3>`,9),jn={id:"_234-\u56DE\u6587\u94FE\u8868",tabindex:"-1"},Nn=n("a",{class:"header-anchor",href:"#_234-\u56DE\u6587\u94FE\u8868","aria-hidden":"true"},"#",-1),Sn=s(),Ln={href:"https://leetcode.cn/problems/palindrome-linked-list/",target:"_blank",rel:"noopener noreferrer"},qn=s("234. \u56DE\u6587\u94FE\u8868"),Tn=t(`<p>\u7ED9\u4F60\u4E00\u4E2A\u5355\u94FE\u8868\u7684\u5934\u8282\u70B9 <code>head</code> \uFF0C\u8BF7\u4F60\u5224\u65AD\u8BE5\u94FE\u8868\u662F\u5426\u4E3A\u56DE\u6587\u94FE\u8868\u3002\u5982\u679C\u662F\uFF0C\u8FD4\u56DE <code>true</code> \uFF1B\u5426\u5219\uFF0C\u8FD4\u56DE <code>false</code> \u3002</p><p><strong>\u601D\u8DEF\uFF1A</strong></p><p><s>\u5148\u53CD\u8F6C\u94FE\u8868\uFF0C\u540C\u65F6\u904D\u5386\uFF0C\u4E0D\u76F8\u7B49\u5C31\u4E0D\u662F\u56DE\u6587\u4E32</s> ==&gt; <strong>\u4F1A\u6539\u53D8\u539F\u94FE\u8868</strong></p><p>\u5229\u7528\u540E\u5E8F\u904D\u5386\uFF0C\u6A21\u62DF\u53CC\u6307\u9488\uFF0C\u627E\u5230\u56DE\u6587\u94FE\u8868</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>

    <span class="token comment">// \u5DE6\u4FA7\u6307\u9488</span>
    <span class="token class-name">ListNode</span> left<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        left <span class="token operator">=</span> head<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token function">traverse</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>
        
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">traverse</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// base case</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>right <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
      <span class="token keyword">boolean</span> res <span class="token operator">=</span> <span class="token function">traverse</span><span class="token punctuation">(</span>right<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// \u540E\u5E8F\u4F4D\u7F6E</span>
      res <span class="token operator">=</span> res <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>left<span class="token punctuation">.</span>val <span class="token operator">==</span> right<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
      left <span class="token operator">=</span> left<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
      <span class="token keyword">return</span> res<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>\u4F18\u5316</p></blockquote><p><strong>\u601D\u8DEF\uFF1A</strong></p><p>\u5148\u627E\u5230\u94FE\u8868\u7684\u4E2D\u95F4\u8282\u70B9\uFF0C\u5982\u679C\u662F\u5947\u6570\uFF0C\u524D\u8FDB\u4E00\u4F4D\uFF0C\u53CD\u8F6C\u540E\u534A\u8282\u70B9\uFF0C\u518D\u53BB\u6BD4\u8F83</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// \u6CA1\u6709\u8282\u70B9\u6216\u53EA\u6709\u4E00\u4E2A\u8282\u70B9</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> head<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token class-name">ListNode</span> fast <span class="token operator">=</span> head<span class="token punctuation">,</span> slow <span class="token operator">=</span> head<span class="token punctuation">;</span>
        <span class="token comment">// \u7528\u4E8E\u6062\u590D\u94FE\u8868</span>
        <span class="token class-name">ListNode</span> p <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> q <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>fast <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> fast<span class="token punctuation">.</span>next <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
            p <span class="token operator">=</span> slow<span class="token punctuation">;</span>
            slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>fast <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> fast<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// \u5947\u6570\u8282\u70B9</span>
            p <span class="token operator">=</span> slow<span class="token punctuation">;</span>
   
            slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// \u53CD\u8F6C\u94FE\u8868</span>
        <span class="token class-name">ListNode</span> right <span class="token operator">=</span> <span class="token function">reverseList</span><span class="token punctuation">(</span>slow<span class="token punctuation">)</span><span class="token punctuation">;</span>
        q <span class="token operator">=</span> right<span class="token punctuation">;</span>
        <span class="token class-name">ListNode</span> left <span class="token operator">=</span> head<span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>right <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>left<span class="token punctuation">.</span>val <span class="token operator">!=</span> right<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// \u6062\u590D\u94FE\u8868</span>
                p<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token function">reverseList</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            left <span class="token operator">=</span> left<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
            right <span class="token operator">=</span> right<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// \u6062\u590D\u94FE\u8868</span>
        p<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token function">reverseList</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">reverseList</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ListNode</span> cur <span class="token operator">=</span> head<span class="token punctuation">,</span> pre <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>cur <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            next <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
            cur<span class="token punctuation">.</span>next <span class="token operator">=</span> pre<span class="token punctuation">;</span>
            pre <span class="token operator">=</span> cur<span class="token punctuation">;</span>
            cur <span class="token operator">=</span> next<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> pre<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-\u6570\u7EC4\u7B97\u6CD5" tabindex="-1"><a class="header-anchor" href="#_2-\u6570\u7EC4\u7B97\u6CD5" aria-hidden="true">#</a> 2.\u6570\u7EC4\u7B97\u6CD5</h2><h3 id="_2-1-\u6211\u5199\u4E86\u9996\u8BD7-\u8BA9\u4F60\u95ED\u7740\u773C\u775B\u4E5F\u80FD\u5199\u5BF9\u4E8C\u5206\u641C\u7D22" tabindex="-1"><a class="header-anchor" href="#_2-1-\u6211\u5199\u4E86\u9996\u8BD7-\u8BA9\u4F60\u95ED\u7740\u773C\u775B\u4E5F\u80FD\u5199\u5BF9\u4E8C\u5206\u641C\u7D22" aria-hidden="true">#</a> 2.1 \u6211\u5199\u4E86\u9996\u8BD7\uFF0C\u8BA9\u4F60\u95ED\u7740\u773C\u775B\u4E5F\u80FD\u5199\u5BF9\u4E8C\u5206\u641C\u7D22</h3>`,11),In={id:"_704-\u4E8C\u5206\u67E5\u627E",tabindex:"-1"},An=n("a",{class:"header-anchor",href:"#_704-\u4E8C\u5206\u67E5\u627E","aria-hidden":"true"},"#",-1),En=s(),On={href:"https://leetcode.cn/problems/binary-search/",target:"_blank",rel:"noopener noreferrer"},Mn=s("704. \u4E8C\u5206\u67E5\u627E"),zn=t(`<p>\u7ED9\u5B9A\u4E00\u4E2A n \u4E2A\u5143\u7D20\u6709\u5E8F\u7684\uFF08\u5347\u5E8F\uFF09\u6574\u578B\u6570\u7EC4 nums \u548C\u4E00\u4E2A\u76EE\u6807\u503C target \uFF0C\u5199\u4E00\u4E2A\u51FD\u6570\u641C\u7D22 nums \u4E2D\u7684 target\uFF0C\u5982\u679C\u76EE\u6807\u503C\u5B58\u5728\u8FD4\u56DE\u4E0B\u6807\uFF0C\u5426\u5219\u8FD4\u56DE -1\u3002</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> nums<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> mid <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> mid<span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                right <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// \u627E\u4E0D\u5230</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),Cn={id:"_34-\u5728\u6392\u5E8F\u6570\u7EC4\u4E2D\u67E5\u627E\u5143\u7D20\u7684\u7B2C\u4E00\u4E2A\u548C\u6700\u540E\u4E00\u4E2A\u4F4D\u7F6E",tabindex:"-1"},Dn=n("a",{class:"header-anchor",href:"#_34-\u5728\u6392\u5E8F\u6570\u7EC4\u4E2D\u67E5\u627E\u5143\u7D20\u7684\u7B2C\u4E00\u4E2A\u548C\u6700\u540E\u4E00\u4E2A\u4F4D\u7F6E","aria-hidden":"true"},"#",-1),Rn=s(),Bn={href:"https://leetcode.cn/problems/find-first-and-last-position-of-element-in-sorted-array/",target:"_blank",rel:"noopener noreferrer"},Vn=s("34. \u5728\u6392\u5E8F\u6570\u7EC4\u4E2D\u67E5\u627E\u5143\u7D20\u7684\u7B2C\u4E00\u4E2A\u548C\u6700\u540E\u4E00\u4E2A\u4F4D\u7F6E"),Pn=t(`<p>\u7ED9\u4F60\u4E00\u4E2A\u6309\u7167\u975E\u9012\u51CF\u987A\u5E8F\u6392\u5217\u7684\u6574\u6570\u6570\u7EC4 nums\uFF0C\u548C\u4E00\u4E2A\u76EE\u6807\u503C target\u3002\u8BF7\u4F60\u627E\u51FA\u7ED9\u5B9A\u76EE\u6807\u503C\u5728\u6570\u7EC4\u4E2D\u7684\u5F00\u59CB\u4F4D\u7F6E\u548C\u7ED3\u675F\u4F4D\u7F6E\u3002</p><p>\u5982\u679C\u6570\u7EC4\u4E2D\u4E0D\u5B58\u5728\u76EE\u6807\u503C target\uFF0C\u8FD4\u56DE [-1, -1]\u3002</p><p>\u4F60\u5FC5\u987B\u8BBE\u8BA1\u5E76\u5B9E\u73B0\u65F6\u95F4\u590D\u6742\u5EA6\u4E3A O(log n) \u7684\u7B97\u6CD5\u89E3\u51B3\u6B64\u95EE\u9898\u3002</p><p><strong>\u601D\u8DEF\uFF1A</strong></p><p>1.\u627E\u5230\u5DE6\u4FA7\u8FB9\u754C\uFF0C\u627E\u5230\u7684\u65F6\u5019\u7F29\u5C0F\u53F3\u4FA7\u8FB9\u754C\uFF0C\u7ED3\u679C\u8FD4\u56DE left, right = mid\uFF0C\u627E\u4E0D\u5230\u503C\u6709\u4E24\u79CD\u60C5\u51B5\uFF1A</p><p>\u200B 1.nums[left] != target -&gt; target \u5C0F\u4E8E\u6240\u6709\u503C\uFF0C\u56E0\u6B64left = 0\uFF0C\u4E5F\u6709\u53EF\u80FD\u662F\u521A\u597D\u627E\u5230\u7684\u60C5\u51B5</p><p>\u200B 2.left = nums.length -&gt; target \u5927\u4E8E\u6240\u6709\u503C</p><p>2.\u627E\u5230\u53F3\u4FA7\u8FB9\u754C\uFF0C\u627E\u5230\u7684\u65F6\u5019\u7F29\u5C0F\u5DE6\u4FA7\u8FB9\u754C\uFF0C\u8FD4\u56DE left - 1\uFF0C\u627E\u4E0D\u5230\u7684\u60C5\u51B5\uFF1A</p><p>\u200B 1.left == 0</p><p>\u200B 2.nums[left - 1] != target</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">searchRange</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> nums<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token function">findLeft</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> right <span class="token operator">=</span> <span class="token function">findRight</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>left<span class="token punctuation">,</span> right<span class="token punctuation">}</span><span class="token punctuation">;</span> 
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">findLeft</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> mid <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                right <span class="token operator">=</span> mid<span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> 
        <span class="token punctuation">}</span>
        <span class="token comment">// \u627E\u4E0D\u5230\u7684\u60C5\u51B5</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">==</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">==</span> target <span class="token operator">?</span> left <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">findRight</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> mid <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&gt;</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                right <span class="token operator">=</span> mid<span class="token punctuation">;</span>
            <span class="token punctuation">}</span> 
        <span class="token punctuation">}</span>
        <span class="token comment">// \u627E\u4E0D\u5230\u7684\u60C5\u51B5</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> nums<span class="token punctuation">[</span>left <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> target <span class="token operator">?</span> left <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-\u4E8C\u5206\u641C\u7D22\u600E\u4E48\u7528-\u6211\u53C8\u603B\u7ED3\u4E86\u5957\u8DEF" tabindex="-1"><a class="header-anchor" href="#_2-2-\u4E8C\u5206\u641C\u7D22\u600E\u4E48\u7528-\u6211\u53C8\u603B\u7ED3\u4E86\u5957\u8DEF" aria-hidden="true">#</a> 2.2 \u4E8C\u5206\u641C\u7D22\u600E\u4E48\u7528\uFF1F\u6211\u53C8\u603B\u7ED3\u4E86\u5957\u8DEF</h3><blockquote><p><strong>1\u3001\u786E\u5B9A <code>x, f(x), target</code> \u5206\u522B\u662F\u4EC0\u4E48\uFF0C\u5E76\u5199\u51FA\u51FD\u6570 <code>f</code> \u7684\u4EE3\u7801</strong>\u3002</p><p><strong>2\u3001\u627E\u5230 <code>x</code> \u7684\u53D6\u503C\u8303\u56F4\u4F5C\u4E3A\u4E8C\u5206\u641C\u7D22\u7684\u641C\u7D22\u533A\u95F4\uFF0C\u521D\u59CB\u5316 <code>left</code> \u548C <code>right</code> \u53D8\u91CF</strong>\u3002</p><p><strong>3\u3001\u6839\u636E\u9898\u76EE\u7684\u8981\u6C42\uFF0C\u786E\u5B9A\u5E94\u8BE5\u4F7F\u7528\u641C\u7D22\u5DE6\u4FA7\u8FD8\u662F\u641C\u7D22\u53F3\u4FA7\u7684\u4E8C\u5206\u641C\u7D22\u7B97\u6CD5\uFF0C\u5199\u51FA\u89E3\u6CD5\u4EE3\u7801</strong>\u3002</p></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token operator">/</span> \u51FD\u6570 f \u662F\u5173\u4E8E\u81EA\u53D8\u91CF x \u7684\u5355\u8C03\u51FD\u6570
<span class="token keyword">int</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>

<span class="token comment">// \u4E3B\u51FD\u6570\uFF0C\u5728 f(x) == target \u7684\u7EA6\u675F\u4E0B\u6C42 x \u7684\u6700\u503C</span>
<span class="token keyword">int</span> <span class="token function">solution</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token comment">// \u95EE\u81EA\u5DF1\uFF1A\u81EA\u53D8\u91CF x \u7684\u6700\u5C0F\u503C\u662F\u591A\u5C11\uFF1F</span>
    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>
    <span class="token comment">// \u95EE\u81EA\u5DF1\uFF1A\u81EA\u53D8\u91CF x \u7684\u6700\u5927\u503C\u662F\u591A\u5C11\uFF1F</span>
    <span class="token keyword">int</span> right <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    
    <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> mid <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span> <span class="token operator">==</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// \u95EE\u81EA\u5DF1\uFF1A\u9898\u76EE\u662F\u6C42\u5DE6\u8FB9\u754C\u8FD8\u662F\u53F3\u8FB9\u754C\uFF1F</span>
            <span class="token comment">// ...</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span> <span class="token operator">&lt;</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// \u95EE\u81EA\u5DF1\uFF1A\u600E\u4E48\u8BA9 f(x) \u5927\u4E00\u70B9\uFF1F</span>
            <span class="token comment">// ...</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span> <span class="token operator">&gt;</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// \u95EE\u81EA\u5DF1\uFF1A\u600E\u4E48\u8BA9 f(x) \u5C0F\u4E00\u70B9\uFF1F</span>
            <span class="token comment">// ...</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> left<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,14),Un={id:"_875-\u7231\u5403\u9999\u8549\u7684\u73C2\u73C2",tabindex:"-1"},Hn=n("a",{class:"header-anchor",href:"#_875-\u7231\u5403\u9999\u8549\u7684\u73C2\u73C2","aria-hidden":"true"},"#",-1),Kn=s(),Qn={href:"https://leetcode.cn/problems/koko-eating-bananas/",target:"_blank",rel:"noopener noreferrer"},Gn=s("875. \u7231\u5403\u9999\u8549\u7684\u73C2\u73C2"),Fn=t(`<p>\u73C2\u73C2\u559C\u6B22\u5403\u9999\u8549\u3002\u8FD9\u91CC\u6709 n \u5806\u9999\u8549\uFF0C\u7B2C i \u5806\u4E2D\u6709 piles[i] \u6839\u9999\u8549\u3002\u8B66\u536B\u5DF2\u7ECF\u79BB\u5F00\u4E86\uFF0C\u5C06\u5728 h \u5C0F\u65F6\u540E\u56DE\u6765\u3002</p><p>\u73C2\u73C2\u53EF\u4EE5\u51B3\u5B9A\u5979\u5403\u9999\u8549\u7684\u901F\u5EA6 k \uFF08\u5355\u4F4D\uFF1A\u6839/\u5C0F\u65F6\uFF09\u3002\u6BCF\u4E2A\u5C0F\u65F6\uFF0C\u5979\u5C06\u4F1A\u9009\u62E9\u4E00\u5806\u9999\u8549\uFF0C\u4ECE\u4E2D\u5403\u6389 k \u6839\u3002\u5982\u679C\u8FD9\u5806\u9999\u8549\u5C11\u4E8E k \u6839\uFF0C\u5979\u5C06\u5403\u6389\u8FD9\u5806\u7684\u6240\u6709\u9999\u8549\uFF0C\u7136\u540E\u8FD9\u4E00\u5C0F\u65F6\u5185\u4E0D\u4F1A\u518D\u5403\u66F4\u591A\u7684\u9999\u8549\u3002</p><p>\u73C2\u73C2\u559C\u6B22\u6162\u6162\u5403\uFF0C\u4F46\u4ECD\u7136\u60F3\u5728\u8B66\u536B\u56DE\u6765\u524D\u5403\u6389\u6240\u6709\u7684\u9999\u8549\u3002</p><p>\u8FD4\u56DE\u5979\u53EF\u4EE5\u5728 h \u5C0F\u65F6\u5185\u5403\u6389\u6240\u6709\u9999\u8549\u7684\u6700\u5C0F\u901F\u5EA6 k\uFF08k \u4E3A\u6574\u6570\uFF09\u3002</p><p><strong>\u601D\u8DEF\uFF1A</strong></p><p>f(x)\u662F \u901F\u5EA6\u4E3A x \u65F6\u5403\u6389\u6240\u6709\u9999\u8549\u6240\u9700\u8981\u7684\u65F6\u95F4\uFF08\u5355\u8C03\u9012\u51CF\uFF09\uFF0C\u901F\u5EA6\u7684\u6700\u5C0F\u503C\u662F 1\uFF0C\u901F\u5EA6\u7684\u6700\u5927\u503C\u662F piles\u6570\u7EC4\u4E2D\u7684\u6700\u5927\u503C + 1\uFF0C\u6C42\u7684\u662F\u5DE6\u8FB9\u754C</p><p><strong>\u6CE8\u610F\uFF1A</strong></p><p>f(x)\u8BA1\u7B97\u65F6\u53EF\u80FD\u4F1A\u51FA\u73B0\u8D85\u65F6\u95EE\u9898\uFF0C\u56E0\u6B64\u91C7\u7528 / % \u6765\u8BA1\u7B97\u65F6\u95F4\u3002</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">minEatingSpeed</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> piles<span class="token punctuation">,</span> <span class="token keyword">int</span> h<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>piles<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token comment">// \u901F\u5EA6\u7684\u6700\u5C0F\u503C\u662F \u6BCF\u6B21\u53EA\u5403\u4E00\u6839</span>
        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token comment">// \u901F\u5EA6\u7684\u6700\u5927\u503C\u662F \u6BCF\u6B21\u90FD\u53EF\u4EE5\u5403\u6389\u4E00\u5806</span>
        <span class="token keyword">int</span> right <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> pile <span class="token operator">:</span> piles<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// if (right &lt; pile) right = pile;</span>
            right <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>right<span class="token punctuation">,</span> pile<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        right <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> mid <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
            <span class="token comment">// if (f(piles, mid) == h) {</span>
            <span class="token comment">//     // \u6C42\u7684\u662F\u5DE6\u8FB9\u754C</span>
            <span class="token comment">//     right = mid;</span>
            <span class="token comment">// } else if(f(piles, mid) &lt; h) {</span>
            <span class="token comment">//     // \u8BA9\u65F6\u95F4\u53D8\u5927\uFF0C\u4E5F\u5C31\u662F\u901F\u5EA6\u53D8\u5C0F</span>
            <span class="token comment">//     right = mid;</span>
            <span class="token comment">// } else {</span>
            <span class="token comment">//     // \u8BA9\u65F6\u95F4\u53D8\u5C0F\uFF0C\u4E5F\u5C31\u662F\u901F\u5EA6\u53D8\u5927</span>
            <span class="token comment">//     left = mid + 1;</span>
            <span class="token comment">// }</span>
            
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span>piles<span class="token punctuation">,</span> mid<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> h<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// \u6C42\u7684\u662F\u5DE6\u8FB9\u754C</span>
                right <span class="token operator">=</span> mid<span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token comment">// \u8BA9\u65F6\u95F4\u53D8\u5C0F\uFF0C\u4E5F\u5C31\u662F\u901F\u5EA6\u53D8\u5927</span>
                left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> left<span class="token punctuation">;</span>


    <span class="token punctuation">}</span>
    <span class="token comment">// f(x)\uFF1A\u901F\u5EA6\u4E3Ax\u65F6\u5403\u5230\u6240\u6709\u9999\u8549\u6240\u9700\u8981\u7684\u65F6\u95F4</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> piles<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> h <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> pile <span class="token operator">:</span> piles<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// \u8D85\u65F6</span>
            <span class="token comment">// while (pile &gt; 0) {</span>
            <span class="token comment">//     // \u4E00\u4E2A\u5C0F\u65F6\u5403\u4E0D\u5B8C</span>
            <span class="token comment">//     h++;</span>
            <span class="token comment">//     pile -= x;</span>
            <span class="token comment">// }</span>

            h <span class="token operator">+=</span> pile <span class="token operator">/</span> x<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>pile <span class="token operator">%</span> x <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> h<span class="token operator">++</span><span class="token punctuation">;</span>

        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> h<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9),Wn={id:"_1011-\u5728-d-\u5929\u5185\u9001\u8FBE\u5305\u88F9\u7684\u80FD\u529B",tabindex:"-1"},Xn=n("a",{class:"header-anchor",href:"#_1011-\u5728-d-\u5929\u5185\u9001\u8FBE\u5305\u88F9\u7684\u80FD\u529B","aria-hidden":"true"},"#",-1),Yn=s(),Jn={href:"https://leetcode.cn/problems/capacity-to-ship-packages-within-d-days/",target:"_blank",rel:"noopener noreferrer"},Zn=s("1011. \u5728 D \u5929\u5185\u9001\u8FBE\u5305\u88F9\u7684\u80FD\u529B"),$n=t(`<p>\u4F20\u9001\u5E26\u4E0A\u7684\u5305\u88F9\u5FC5\u987B\u5728 days \u5929\u5185\u4ECE\u4E00\u4E2A\u6E2F\u53E3\u8FD0\u9001\u5230\u53E6\u4E00\u4E2A\u6E2F\u53E3\u3002</p><p>\u4F20\u9001\u5E26\u4E0A\u7684\u7B2C i \u4E2A\u5305\u88F9\u7684\u91CD\u91CF\u4E3A weights[i]\u3002\u6BCF\u4E00\u5929\uFF0C\u6211\u4EEC\u90FD\u4F1A\u6309\u7ED9\u51FA\u91CD\u91CF\uFF08weights\uFF09\u7684\u987A\u5E8F\u5F80\u4F20\u9001\u5E26\u4E0A\u88C5\u8F7D\u5305\u88F9\u3002\u6211\u4EEC\u88C5\u8F7D\u7684\u91CD\u91CF\u4E0D\u4F1A\u8D85\u8FC7\u8239\u7684\u6700\u5927\u8FD0\u8F7D\u91CD\u91CF\u3002</p><p>\u8FD4\u56DE\u80FD\u5728 days \u5929\u5185\u5C06\u4F20\u9001\u5E26\u4E0A\u7684\u6240\u6709\u5305\u88F9\u9001\u8FBE\u7684\u8239\u7684\u6700\u4F4E\u8FD0\u8F7D\u80FD\u529B\u3002</p><p><strong>\u601D\u8DEF\uFF1A</strong></p><p>f(x)\u5355\u8C03\u9012\u51CF\uFF0C\u6C42\u7684\u662F\u5DE6\u4FA7\u8FB9\u754C\uFF0C\u6700\u4F4E\u8FD0\u8F7D\u80FD\u529B\u662F weights\u6570\u7EC4\u4E2D\u7684\u6700\u5927\u503C\uFF0C\u6700\u9AD8\u8FD0\u8F7D\u80FD\u529B\u662F weights \u6570\u7EC4\u4E2D\u7684 \u7D2F\u52A0\u548C + 1</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">shipWithinDays</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> weights<span class="token punctuation">,</span> <span class="token keyword">int</span> days<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>weights<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token comment">// \u6C42\u51FA\u6700\u5927\u503C\u548C\u6700\u5C0F\u503C</span>
        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> weight <span class="token operator">:</span> weights<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            left <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span>weight<span class="token punctuation">)</span><span class="token punctuation">;</span>
            right <span class="token operator">+=</span> weight<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> mid <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span>weights<span class="token punctuation">,</span> mid<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> days<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// \u6C42\u5DE6\u8FB9\u754C</span>
                right <span class="token operator">=</span> mid<span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> left<span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
    <span class="token comment">// \u8FD0\u8F7D\u80FD\u529B\u4E3Ax\u65F6\u9700\u8981\u7684\u5929\u6570</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> weights<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> days <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> capacity <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> weights<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            capacity <span class="token operator">=</span> x<span class="token punctuation">;</span>
            <span class="token comment">// while (i &lt; weights.length &amp;&amp; capacity &gt; weights[i] ) {</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> weights<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> capacity <span class="token operator">&gt;=</span> weights<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>
                capacity <span class="token operator">-=</span> weights<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
                i<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            days<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> days<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),ns={id:"_410-\u5206\u5272\u6570\u7EC4\u7684\u6700\u5927\u503C",tabindex:"-1"},ss=n("a",{class:"header-anchor",href:"#_410-\u5206\u5272\u6570\u7EC4\u7684\u6700\u5927\u503C","aria-hidden":"true"},"#",-1),as=s(),ps={href:"https://leetcode.cn/problems/split-array-largest-sum/",target:"_blank",rel:"noopener noreferrer"},ts=s("410. \u5206\u5272\u6570\u7EC4\u7684\u6700\u5927\u503C"),es=t(`<p>\u7ED9\u5B9A\u4E00\u4E2A\u975E\u8D1F\u6574\u6570\u6570\u7EC4 <code>nums</code> \u548C\u4E00\u4E2A\u6574\u6570 <code>m</code> \uFF0C\u4F60\u9700\u8981\u5C06\u8FD9\u4E2A\u6570\u7EC4\u5206\u6210 <code>m</code> \u4E2A\u975E\u7A7A\u7684\u8FDE\u7EED\u5B50\u6570\u7EC4\u3002</p><p>\u8BBE\u8BA1\u4E00\u4E2A\u7B97\u6CD5\u4F7F\u5F97\u8FD9 <code>m</code> \u4E2A\u5B50\u6570\u7EC4\u5404\u81EA\u548C\u7684\u6700\u5927\u503C\u6700\u5C0F\u3002</p><p><strong>\u601D\u8DEF\uFF1A</strong></p><p>f(x):\u5206\u9694\u6570\u7EC4\u7684\u6700\u5927\u503C\u4E3A x \u7684\u5206\u9694\u6570\uFF0C\u6700\u5927\u503C\u8D8A\u5927\uFF0C\u5206\u9694\u6570\u8D8A\u5C0F\uFF0C\u5355\u8C03\u9012\u51CF\uFF0C\u5206\u9694\u6570\u7EC4\u7684\u6700\u5927\u503C\u7684\u6700\u5C0F\u662F \u6570\u7EC4\u4E2D\u7684\u6700\u5927\u503C\uFF0C \u6700\u5927\u662F \u6570\u7EC4\u7684\u7D2F\u52A0\u548C + 1</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">splitArray</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token comment">// \u5206\u9694\u6570\u7EC4\u7684\u6700\u5927\u503C\u7684\u6700\u5C0F\u662F \u6570\u7EC4\u4E2D\u7684\u6700\u5927\u503C</span>
        <span class="token comment">// \u5206\u9694\u6570\u7EC4\u7684\u6700\u5927\u503C\u7684\u6700\u5927\u662F \u6570\u7EC4\u7684\u7D2F\u52A0\u548C + 1</span>
        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> num <span class="token operator">:</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            left <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> left<span class="token punctuation">)</span><span class="token punctuation">;</span>
            right <span class="token operator">+=</span> num<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> mid <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> mid<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// \u6C42\u7684\u662F\u5DE6\u8FB9\u754C</span>
                <span class="token comment">// \u8BA9\u5206\u9694\u6570\u53D8\u5927\uFF0C\u4E5F\u5C31\u662F\u5206\u9694\u6570\u7EC4\u6700\u5927\u503C\u53D8\u5C0F</span>
                right <span class="token operator">=</span> mid<span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token comment">// \u8BA9\u5206\u9694\u6570\u53D8\u5C0F\uFF0C\u4E5F\u5C31\u662F\u5206\u9694\u6570\u7EC4\u6700\u5927\u503C\u53D8\u5927</span>
                left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> left<span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
    <span class="token comment">// \u5206\u9694\u6570\u7EC4\u7684\u6700\u5927\u503C\u4E3A x \u7684\u5206\u9694\u6570</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// \u56E0\u4E3A x \u53EF\u80FD\u5927\u4E8E \u6570\u7EC4\u7684\u7D2F\u52A0\u548C\uFF0C\u5E76\u4E0D\u4F1A\u89E6\u53D1 split++\uFF0C\u56E0\u6B64\u81F3\u5C11\u662F\u4E00\u4E2A\u5206\u9694</span>
        <span class="token keyword">int</span> split <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> curVal <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> num <span class="token operator">:</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>curVal <span class="token operator">+</span> num <span class="token operator">&gt;</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// \u52A0\u4E0A\u5F53\u524D\u503C\u8D85\u8FC7x\uFF0C\u9700\u8981\u5206\u9694\uFF0C\u53E6\u8D77\u7076\u7089</span>
                curVal <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
                split<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> 
            curVal <span class="token operator">+=</span> num<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// \u8FD4\u56DE\u5206\u9694\u6570</span>
        <span class="token keyword">return</span> split<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),os={id:"lcp-12-\u5C0F\u5F20\u5237\u9898\u8BA1\u5212",tabindex:"-1"},cs=n("a",{class:"header-anchor",href:"#lcp-12-\u5C0F\u5F20\u5237\u9898\u8BA1\u5212","aria-hidden":"true"},"#",-1),ls=s(),is={href:"https://leetcode.cn/problems/xiao-zhang-shua-ti-ji-hua/",target:"_blank",rel:"noopener noreferrer"},us=s("LCP 12. \u5C0F\u5F20\u5237\u9898\u8BA1\u5212"),ks=t(`<p>\u4E3A\u4E86\u63D0\u9AD8\u81EA\u5DF1\u7684\u4EE3\u7801\u80FD\u529B\uFF0C\u5C0F\u5F20\u5236\u5B9A\u4E86 LeetCode \u5237\u9898\u8BA1\u5212\uFF0C\u4ED6\u9009\u4E2D\u4E86 LeetCode \u9898\u5E93\u4E2D\u7684 n \u9053\u9898\uFF0C\u7F16\u53F7\u4ECE 0 \u5230 n-1\uFF0C\u5E76\u8BA1\u5212\u5728 m \u5929\u5185\u6309\u7167\u9898\u76EE\u7F16\u53F7\u987A\u5E8F\u5237\u5B8C\u6240\u6709\u7684\u9898\u76EE\uFF08\u6CE8\u610F\uFF0C\u5C0F\u5F20\u4E0D\u80FD\u7528\u591A\u5929\u5B8C\u6210\u540C\u4E00\u9898\uFF09\u3002</p><p>\u5728\u5C0F\u5F20\u5237\u9898\u8BA1\u5212\u4E2D\uFF0C\u5C0F\u5F20\u9700\u8981\u7528 time[i] \u7684\u65F6\u95F4\u5B8C\u6210\u7F16\u53F7 i \u7684\u9898\u76EE\u3002\u6B64\u5916\uFF0C\u5C0F\u5F20\u8FD8\u53EF\u4EE5\u4F7F\u7528\u573A\u5916\u6C42\u52A9\u529F\u80FD\uFF0C\u901A\u8FC7\u8BE2\u95EE\u4ED6\u7684\u597D\u670B\u53CB\u5C0F\u6768\u9898\u76EE\u7684\u89E3\u6CD5\uFF0C\u53EF\u4EE5\u7701\u53BB\u8BE5\u9898\u7684\u505A\u9898\u65F6\u95F4\u3002\u4E3A\u4E86\u9632\u6B62\u201C\u5C0F\u5F20\u5237\u9898\u8BA1\u5212\u201D\u53D8\u6210\u201C\u5C0F\u6768\u5237\u9898\u8BA1\u5212\u201D\uFF0C\u5C0F\u5F20\u6BCF\u5929\u6700\u591A\u4F7F\u7528\u4E00\u6B21\u6C42\u52A9\u3002</p><p>\u6211\u4EEC\u5B9A\u4E49 m \u5929\u4E2D\u505A\u9898\u65F6\u95F4\u6700\u591A\u7684\u4E00\u5929\u8017\u65F6\u4E3A T\uFF08\u5C0F\u6768\u5B8C\u6210\u7684\u9898\u76EE\u4E0D\u8BA1\u5165\u505A\u9898\u603B\u65F6\u95F4\uFF09\u3002\u8BF7\u4F60\u5E2E\u5C0F\u5F20\u6C42\u51FA\u6700\u5C0F\u7684 T\u662F\u591A\u5C11\u3002</p><p><strong>\u601D\u8DEF\uFF1A</strong></p><p>f(x):\u505A\u9898\u65F6\u95F4\u6700\u591A\u7684\u4E00\u5929\u8017\u65F6\u4E3A x \u65F6\uFF0C\u6240\u9700\u8981\u7684\u5929\u6570\uFF0C\u5355\u8C03\u9012\u51CF\uFF0C\u8017\u65F6\u6700\u5C11\u4E3A 0\uFF0C \u6700\u591A\u4E3A \u6570\u7EC4\u7684\u7D2F\u52A0\u548C + 1,</p><p>f(x) \u9700\u8981\u7EF4\u62A4 \u6700\u5927\u7684\u82B1\u8D39\u65F6\u95F4\u548C\u662F\u5426\u4F7F\u7528\u8FC7\u6C42\u52A9\uFF0C\u5F53\u8D85\u8FC7 x \u65F6\uFF0C\u5224\u65AD\u662F\u5426\u6C42\u52A9\u8FC7\uFF0C\u6CA1\u6709\u7684\u8BDD\u51CF\u53BB\u6700\u5927\u7684\u82B1\u8D39\u65F6\u95F4\uFF0C\u6C42\u52A9 false\uFF0C\u5426\u5219 \u5929\u6570\u52A0\u4E00\uFF0C\u5237\u65B0\u6570\u636E\uFF0Ci--\uFF0C\u56E0\u4E3A\u6CA1\u6709\u505A\u5B8C\u7684\u9898\u9700\u8981\u7B49\u5230\u4E0B\u4E00\u5929\u518D\u505A</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">minTime</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> time<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>time<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token comment">// \u6700\u5C0F\u662F\u6C42\u52A9\uFF0C\u4E0D\u7528\u82B1\u65F6\u95F4</span>
        <span class="token comment">// \u6700\u5927\u662F\u5168\u90E8\u505A\u5B8C + 1</span>
        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> t <span class="token operator">:</span> time<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            right <span class="token operator">+=</span> t<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> mid <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span>time<span class="token punctuation">,</span> mid<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// \u6C42\u7684\u662F\u5DE6\u8FB9\u754C</span>
                right <span class="token operator">=</span> mid<span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> left<span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
    <span class="token comment">// \u505A\u9898\u65F6\u95F4\u6700\u591A\u7684\u4E00\u5929\u8017\u65F6\u4E3A x \u65F6\uFF0C\u6240\u9700\u8981\u7684\u5929\u6570</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> time<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">// \u7B2C\u4E00\u5929\u90FD\u505A\u5B8C\u7684\u8BDD\uFF0C\u4E0D\u4F1A\u51FA\u53D1 days++\uFF0C\u56E0\u6B64\u521D\u59CB\u5316\u4E3A 1</span>
        <span class="token keyword">int</span> days <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> curVal <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token comment">// \u6700\u5927\u7684\u82B1\u8D39\u65F6\u95F4</span>
        <span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token comment">// \u662F\u5426\u4F7F\u7528\u6C42\u52A9</span>
        <span class="token keyword">boolean</span> helper <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
       <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> time<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
           <span class="token comment">// \u7EF4\u62A4\u6700\u5927\u82B1\u8D39\u65F6\u95F4</span>
           max <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>time<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> max<span class="token punctuation">)</span><span class="token punctuation">;</span>
           <span class="token comment">// \u5148\u7D2F\u52A0\u505A\u9898\u65F6\u95F4</span>
           curVal <span class="token operator">+=</span> time<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
           <span class="token keyword">if</span> <span class="token punctuation">(</span>curVal <span class="token operator">&gt;</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
               <span class="token keyword">if</span> <span class="token punctuation">(</span>helper<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// \u6CA1\u6709\u4F7F\u7528\u8FC7\u6C42\u52A9</span>
                   <span class="token comment">// \u51CF\u53BB\u6700\u5927\u82B1\u8D39\u65F6\u95F4</span>
                   curVal <span class="token operator">-=</span> max<span class="token punctuation">;</span>
                   helper <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
               <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                   <span class="token comment">// \u8D85\u65F6\u5E76\u4F7F\u7528\u8FC7\u6C42\u52A9</span>
                   <span class="token comment">// \u5929\u6570\u52A01</span>
                   days<span class="token operator">++</span><span class="token punctuation">;</span>
                   <span class="token comment">// \u5237\u65B0</span>
                   curVal <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
                   helper <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                   max <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
                   <span class="token comment">// \u5F53\u5929\u6CA1\u505A\u5B8C\u7684\u9898\u4E0B\u4E00\u5929\u91CD\u65B0\u505A</span>
                   i<span class="token operator">--</span><span class="token punctuation">;</span>
               <span class="token punctuation">}</span>
           <span class="token punctuation">}</span> 
       <span class="token punctuation">}</span>
        <span class="token keyword">return</span> days<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7),rs={id:"_1482-\u5236\u4F5C-m-\u675F\u82B1\u6240\u9700\u7684\u6700\u5C11\u5929\u6570",tabindex:"-1"},ds=n("a",{class:"header-anchor",href:"#_1482-\u5236\u4F5C-m-\u675F\u82B1\u6240\u9700\u7684\u6700\u5C11\u5929\u6570","aria-hidden":"true"},"#",-1),vs=s(),ms={href:"https://leetcode.cn/problems/minimum-number-of-days-to-make-m-bouquets/",target:"_blank",rel:"noopener noreferrer"},bs=s("1482. \u5236\u4F5C m \u675F\u82B1\u6240\u9700\u7684\u6700\u5C11\u5929\u6570"),hs=t(`<p>\u7ED9\u4F60\u4E00\u4E2A\u6574\u6570\u6570\u7EC4 bloomDay\uFF0C\u4EE5\u53CA\u4E24\u4E2A\u6574\u6570 m \u548C k \u3002</p><p>\u73B0\u9700\u8981\u5236\u4F5C m \u675F\u82B1\u3002\u5236\u4F5C\u82B1\u675F\u65F6\uFF0C\u9700\u8981\u4F7F\u7528\u82B1\u56ED\u4E2D \u76F8\u90BB\u7684 k \u6735\u82B1 \u3002</p><p>\u82B1\u56ED\u4E2D\u6709 n \u6735\u82B1\uFF0C\u7B2C i \u6735\u82B1\u4F1A\u5728 bloomDay[i] \u65F6\u76DB\u5F00\uFF0C\u6070\u597D \u53EF\u4EE5\u7528\u4E8E \u4E00\u675F \u82B1\u4E2D\u3002</p><p>\u8BF7\u4F60\u8FD4\u56DE\u4ECE\u82B1\u56ED\u4E2D\u6458 m \u675F\u82B1\u9700\u8981\u7B49\u5F85\u7684\u6700\u5C11\u7684\u5929\u6570\u3002\u5982\u679C\u4E0D\u80FD\u6458\u5230 m \u675F\u82B1\u5219\u8FD4\u56DE -1 \u3002</p><p><strong>\u601D\u8DEF\uFF1A</strong></p><p>f(x): \u7B49\u5F85\u5929\u6570\u4E3A x \u65F6\uFF0C\u53EF\u4EE5\u6458\u5230\u7684\u82B1\u675F\uFF0C\u5355\u8C03\u9012\u589E, \u6700\u5C0F\u662F \u6570\u7EC4\u4E2D\u7684\u6700\u5C0F\u503C\uFF0C \u6700\u5927\u662F \u6570\u7EC4\u4E2D\u7684\u6700\u5927\u503C + 1</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">minDays</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bloomDay<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>bloomDay<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> bloomDay<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> m <span class="token operator">*</span> k<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
       <span class="token comment">// \u6700\u5C0F\u662F \u6570\u7EC4\u4E2D\u7684\u6700\u5C0F\u503C\uFF0C \u6700\u5927\u662F \u6570\u7EC4\u4E2D\u7684\u6700\u5927\u503C + 1</span>
        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> b <span class="token operator">:</span> bloomDay<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            left <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
            right <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>right<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        right<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> mid <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span>bloomDay<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> k<span class="token punctuation">)</span> <span class="token operator">&gt;=</span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// \u6C42\u7684\u662F\u5DE6\u8FB9\u754C</span>
                right <span class="token operator">=</span> mid<span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> left<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// \u7B49\u5F85\u5929\u6570\u4E3A x \u65F6\uFF0C\u53EF\u4EE5\u6458\u5230\u7684\u82B1\u675F\uFF0C\u5355\u8C03\u9012\u589E</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bloomDay<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> flower <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> bloomDay<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&gt;=</span> bloomDay<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                flower<span class="token operator">++</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>flower <span class="token operator">==</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    count<span class="token operator">++</span><span class="token punctuation">;</span>
                    flower <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token comment">// \u4E0D\u8FDE\u7EED</span>
                flower <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> count<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-3-\u4E00\u4E2A\u65B9\u6CD5\u56E2\u706D-nsum-\u95EE\u9898" tabindex="-1"><a class="header-anchor" href="#_2-3-\u4E00\u4E2A\u65B9\u6CD5\u56E2\u706D-nsum-\u95EE\u9898" aria-hidden="true">#</a> 2.3 \u4E00\u4E2A\u65B9\u6CD5\u56E2\u706D NSUM \u95EE\u9898</h3><p><strong>\u6A21\u677F:</strong></p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>	<span class="token comment">// \u6CE8\u610F\uFF1A\u8FD9\u91CC\u628A target \u63D0\u5347\u4E3A long \u7C7B\u578B</span>
	<span class="token comment">// \u6CE8\u610F\uFF1A\u9700\u8981\u5C06 nums[] \u6392\u597D\u5E8F</span>
    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">nSumTarget</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">long</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> len <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
        <span class="token comment">// \u81F3\u5C11\u662F\u4E24\u6570\u4E4B\u548C\uFF0C\u5E76\u4E14\u5C0F\u4E8E\u6570\u7EC4\u7684\u957F\u5EA6</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">2</span> <span class="token operator">||</span> n <span class="token operator">&gt;</span> len<span class="token punctuation">)</span> <span class="token keyword">return</span> res<span class="token punctuation">;</span>
        <span class="token comment">// base case\uFF0C\u4E24\u6570\u4E4B\u548C</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> lo <span class="token operator">=</span> start<span class="token punctuation">,</span> hi <span class="token operator">=</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>lo <span class="token operator">&lt;</span> hi<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// \u6CE8\u610F\uFF1Aleft \u548C right \u653E\u5728\u5FAA\u574F\u4F53\u5185</span>
                <span class="token keyword">int</span> left <span class="token operator">=</span> nums<span class="token punctuation">[</span>lo<span class="token punctuation">]</span><span class="token punctuation">,</span> right <span class="token operator">=</span> nums<span class="token punctuation">[</span>hi<span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token keyword">int</span> sum <span class="token operator">=</span> nums<span class="token punctuation">[</span>lo<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>hi<span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">&lt;</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// \u53BB\u91CD</span>
                    <span class="token keyword">while</span> <span class="token punctuation">(</span>lo <span class="token operator">&lt;</span> hi <span class="token operator">&amp;&amp;</span> left <span class="token operator">==</span> nums<span class="token punctuation">[</span>lo<span class="token punctuation">]</span><span class="token punctuation">)</span> lo<span class="token operator">++</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">&gt;</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// \u53BB\u91CD</span>
                    <span class="token keyword">while</span> <span class="token punctuation">(</span>lo <span class="token operator">&lt;</span> hi <span class="token operator">&amp;&amp;</span> right <span class="token operator">==</span> nums<span class="token punctuation">[</span>hi<span class="token punctuation">]</span><span class="token punctuation">)</span> hi<span class="token operator">--</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token comment">// \u52A0\u5165\u7ED3\u679C\u96C6</span>
                    res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token comment">// \u53BB\u91CD</span>
                    <span class="token keyword">while</span> <span class="token punctuation">(</span>lo <span class="token operator">&lt;</span> hi <span class="token operator">&amp;&amp;</span> left <span class="token operator">==</span> nums<span class="token punctuation">[</span>lo<span class="token punctuation">]</span><span class="token punctuation">)</span> lo<span class="token operator">++</span><span class="token punctuation">;</span>
                    <span class="token keyword">while</span> <span class="token punctuation">(</span>lo <span class="token operator">&lt;</span> hi <span class="token operator">&amp;&amp;</span> right <span class="token operator">==</span> nums<span class="token punctuation">[</span>hi<span class="token punctuation">]</span><span class="token punctuation">)</span> hi<span class="token operator">--</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment">// \u5BF9\u6570\u7EC4\u7684\u6BCF\u4E00\u4E2A\u5143\u7D20\uFF0C\u8C03\u7528 (n-1)Sum</span>
            <span class="token comment">// \u6CE8\u610F\uFF1Ai = start</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> start<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// \u6CE8\u610F\uFF1A\u8FD9\u91CC\u7684target \u662F tatget - nums[i]</span>
                <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token function">nSumTarget</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> target <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> list1 <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// (n-1)Sum \u518D\u52A0\u4E0A\u5F53\u524D\u5143\u7D20\uFF0C\u5C31\u662F nSum</span>
                    list1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token comment">// \u52A0\u5230\u7ED3\u679C\u4E2D</span>
                    res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token comment">// \u6CE8\u610F\uFF1A\u53BB\u91CD</span>
                <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> len <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> i<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> res<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>\u6CE8\u610F\u70B9:</strong></p><p>1.\u5148\u5C06\u6570\u7EC4<code>\u6392\u597D\u5E8F</code></p><p>2.\u628A target \u63D0\u5347\u4E3A <code>long</code> \u7C7B\u578B\uFF0C\u56E0\u4E3A\u6709\u4E9B\u7528\u4F8B\u4F1A\u6EA2\u51FA</p><p>3.left \u548C right \u653E\u5728 <code>while(lo &lt; hi)</code> \u5FAA\u574F\u4F53\u5185</p><p>4.i = start</p><p>5.\u9012\u5F52\u8C03\u7528\u65F6\u7684target \u662F <code>tatget - nums[i]</code></p><p>6.\u53BB\u91CD</p><p>\u200B 6.1 <code>while(lo &lt; hi)</code>\u5FAA\u574F\u4F53\u5185\u53BB\u91CD</p><p>\u200B 6.2 \u5BF9\u5F53\u524D\u5143\u7D20\u4E5F\u9700\u8981\u53BB\u91CD</p>`,19),ws={id:"_1-\u4E24\u6570\u4E4B\u548C",tabindex:"-1"},ys=n("a",{class:"header-anchor",href:"#_1-\u4E24\u6570\u4E4B\u548C","aria-hidden":"true"},"#",-1),gs=s(),fs={href:"https://leetcode.cn/problems/two-sum/",target:"_blank",rel:"noopener noreferrer"},_s=s("1. \u4E24\u6570\u4E4B\u548C"),xs=t(`<p>\u7ED9\u5B9A\u4E00\u4E2A\u6574\u6570\u6570\u7EC4 nums \u548C\u4E00\u4E2A\u6574\u6570\u76EE\u6807\u503C target\uFF0C\u8BF7\u4F60\u5728\u8BE5\u6570\u7EC4\u4E2D\u627E\u51FA \u548C\u4E3A\u76EE\u6807\u503C target \u7684\u90A3 \u4E24\u4E2A \u6574\u6570\uFF0C\u5E76\u8FD4\u56DE\u5B83\u4EEC\u7684\u6570\u7EC4\u4E0B\u6807\u3002</p><p>\u4F60\u53EF\u4EE5\u5047\u8BBE\u6BCF\u79CD\u8F93\u5165\u53EA\u4F1A\u5BF9\u5E94\u4E00\u4E2A\u7B54\u6848\u3002\u4F46\u662F\uFF0C\u6570\u7EC4\u4E2D\u540C\u4E00\u4E2A\u5143\u7D20\u5728\u7B54\u6848\u91CC\u4E0D\u80FD\u91CD\u590D\u51FA\u73B0\u3002</p><p>\u4F60\u53EF\u4EE5\u6309\u4EFB\u610F\u987A\u5E8F\u8FD4\u56DE\u7B54\u6848\u3002</p><p><strong>\u601D\u8DEF\uFF1A</strong></p><p>\u7528 hashmap</p><blockquote><p>\u65F6\u95F4\u590D\u6742\u5EA6 O(NlogN)</p></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">twoSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
           <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>target <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
               <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> i<span class="token punctuation">}</span><span class="token punctuation">;</span>
           <span class="token punctuation">}</span>
           map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token punctuation">}</span>
       <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7),js={id:"_15-\u4E09\u6570\u4E4B\u548C",tabindex:"-1"},Ns=n("a",{class:"header-anchor",href:"#_15-\u4E09\u6570\u4E4B\u548C","aria-hidden":"true"},"#",-1),Ss=s(),Ls={href:"https://leetcode.cn/problems/3sum/",target:"_blank",rel:"noopener noreferrer"},qs=s("15. \u4E09\u6570\u4E4B\u548C"),Ts=t(`<p>\u7ED9\u4F60\u4E00\u4E2A\u5305\u542B n \u4E2A\u6574\u6570\u7684\u6570\u7EC4 nums\uFF0C\u5224\u65AD nums \u4E2D\u662F\u5426\u5B58\u5728\u4E09\u4E2A\u5143\u7D20 a\uFF0Cb\uFF0Cc \uFF0C\u4F7F\u5F97 a + b + c = 0 \uFF1F\u8BF7\u4F60\u627E\u51FA\u6240\u6709\u548C\u4E3A 0 \u4E14\u4E0D\u91CD\u590D\u7684\u4E09\u5143\u7EC4\u3002</p><p>\u6CE8\u610F\uFF1A\u7B54\u6848\u4E2D\u4E0D\u53EF\u4EE5\u5305\u542B\u91CD\u590D\u7684\u4E09\u5143\u7EC4\u3002</p><p><strong>\u601D\u8DEF\uFF1A</strong></p><p>\u5148\u5C06\u6570\u7EC4\u6392\u597D\u5E8F\uFF0C\u7136\u540E\u8C03\u7528 nSum \u7684\u51FD\u6570 <code>public List&lt;Integer&gt; nSum(int[] nums, int n, int start, int target)</code>,</p><p>nSum:</p><p>1.n&gt;=2 &amp;&amp; n &lt;= nums.length</p><p>2.base case: n == 2\uFF0C\u6C42\u4E24\u6570\u4E4B\u548C</p><p>3.\u904D\u5386\u6570\u7EC4\uFF0C\u9012\u5F52\u8C03\u7528 nSum\uFF0C\u52A0\u4E0A\u5F53\u524D\u8282\u70B9\uFF0C\u52A0\u5165\u7ED3\u679C\uFF0C\u5E76\u4E14\u8981\u4FDD\u8BC1\u7B2C\u4E00\u4E2A\u6570\u4E0D\u91CD\u590D</p><p>\u590D\u6742\u5EA6\u5206\u6790</p><ul><li>\u65F6\u95F4\u590D\u6742\u5EA6\uFF1AO(n),\u6570\u7EC4\u6392\u5E8FO(NlogN),\u904D\u5386\u6570\u7EC4O(n),\u53CC\u6307\u9488\u904D\u5386O(n),\u603BO(NlogN)+O(n)*O(n),O(n2)</li><li>\u7A7A\u95F4\u590D\u6742\u5EA6\uFF1AO(logn)\u3002\u6211\u4EEC\u5FFD\u7565\u5B58\u50A8\u7B54\u6848\u7684\u7A7A\u95F4\uFF0C\u989D\u5916\u7684\u6392\u5E8F\u7684\u7A7A\u95F4\u590D\u6742\u5EA6\u4E3AO(logn)\u3002\u7136\u800C\u6211\u4EEC\u4FEE\u6539\u4E86\u8F93\u5165\u7684\u6570\u7EC4nms,\u5728\u5B9E\u9645\u60C5\u51B5\u4E0B\u4E0D\u4E00\u5B9A\u5141\u8BB8\uFF0C\u56E0\u6B64\u4E5F\u53EF\u4EE5\u770B\u6210\u4F7F\u7528\u4E86\u4E00\u4E2A\u989D\u5916\u7684\u6570\u7EC4\u5B58\u50A8\u4E86nums\u7684\u526F\u672C\u5E76\u8FDB\u884C\u6392\u5E8F\uFF0C\u7A7A\u95F4\u590D\u6742\u5EA6\u4E3AO(n)\u3002</li></ul><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">threeSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// \u73B0\u5C06\u6570\u7EC4\u6392\u597D\u5E8F</span>
        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token function">nSum</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">nSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&gt;</span> nums<span class="token punctuation">.</span>length <span class="token operator">||</span> n <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> res<span class="token punctuation">;</span>
        <span class="token comment">// base case</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token comment">// \u4E24\u6570\u4E4B\u548C</span>
            <span class="token keyword">int</span> lo <span class="token operator">=</span> start<span class="token punctuation">,</span> hi <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>lo <span class="token operator">&lt;</span> hi<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">int</span> sum <span class="token operator">=</span> nums<span class="token punctuation">[</span>lo<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>hi<span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token keyword">int</span> left <span class="token operator">=</span> nums<span class="token punctuation">[</span>lo<span class="token punctuation">]</span><span class="token punctuation">,</span> right <span class="token operator">=</span> nums<span class="token punctuation">[</span>hi<span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">&lt;</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">while</span> <span class="token punctuation">(</span>lo <span class="token operator">&lt;</span> hi <span class="token operator">&amp;&amp;</span> left <span class="token operator">==</span> nums<span class="token punctuation">[</span>lo<span class="token punctuation">]</span><span class="token punctuation">)</span> lo<span class="token operator">++</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">&gt;</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
                    <span class="token keyword">while</span> <span class="token punctuation">(</span>lo <span class="token operator">&lt;</span> hi <span class="token operator">&amp;&amp;</span> right <span class="token operator">==</span> nums<span class="token punctuation">[</span>hi<span class="token punctuation">]</span><span class="token punctuation">)</span> hi<span class="token operator">--</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">while</span> <span class="token punctuation">(</span>lo <span class="token operator">&lt;</span> hi <span class="token operator">&amp;&amp;</span> left <span class="token operator">==</span> nums<span class="token punctuation">[</span>lo<span class="token punctuation">]</span><span class="token punctuation">)</span> lo<span class="token operator">++</span><span class="token punctuation">;</span>
                    <span class="token keyword">while</span> <span class="token punctuation">(</span>lo <span class="token operator">&lt;</span> hi <span class="token operator">&amp;&amp;</span> right <span class="token operator">==</span> nums<span class="token punctuation">[</span>hi<span class="token punctuation">]</span><span class="token punctuation">)</span> hi<span class="token operator">--</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment">// \u904D\u5386\u6570\u7EC4</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> start<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> sumList <span class="token operator">=</span> <span class="token function">nSum</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> target <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// \u904D\u5386</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> s <span class="token operator">:</span> sumList<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    s<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token comment">// \u4FDD\u8BC1\u7B2C\u4E00\u4E2A\u5143\u7D20\u4E0D\u91CD\u590D</span>
                <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> i<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> res<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,11),Is={id:"_18-\u56DB\u6570\u4E4B\u548C",tabindex:"-1"},As=n("a",{class:"header-anchor",href:"#_18-\u56DB\u6570\u4E4B\u548C","aria-hidden":"true"},"#",-1),Es=s(),Os={href:"https://leetcode.cn/problems/4sum/",target:"_blank",rel:"noopener noreferrer"},Ms=s("18. \u56DB\u6570\u4E4B\u548C"),zs=t(`<p>\u7ED9\u4F60\u4E00\u4E2A\u7531 n \u4E2A\u6574\u6570\u7EC4\u6210\u7684\u6570\u7EC4 nums \uFF0C\u548C\u4E00\u4E2A\u76EE\u6807\u503C target \u3002\u8BF7\u4F60\u627E\u51FA\u5E76\u8FD4\u56DE\u6EE1\u8DB3\u4E0B\u8FF0\u5168\u90E8\u6761\u4EF6\u4E14\u4E0D\u91CD\u590D\u7684\u56DB\u5143\u7EC4 [nums[a], nums[b], nums[c], nums[d]] \uFF08\u82E5\u4E24\u4E2A\u56DB\u5143\u7EC4\u5143\u7D20\u4E00\u4E00\u5BF9\u5E94\uFF0C\u5219\u8BA4\u4E3A\u4E24\u4E2A\u56DB\u5143\u7EC4\u91CD\u590D\uFF09\uFF1A</p><ul><li>0 &lt;= a, b, c, d &lt; n</li><li>a\u3001b\u3001c \u548C d \u4E92\u4E0D\u76F8\u540C</li><li>nums[a] + nums[b] + nums[c] + nums[d] == target</li></ul><p>\u4F60\u53EF\u4EE5\u6309 \u4EFB\u610F\u987A\u5E8F \u8FD4\u56DE\u7B54\u6848</p><blockquote><p>\u65F6\u95F4\u590D\u6742\u5EA6 <code>O(NlogN + N^3) = O(N^3)</code>\u3002</p></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">fourSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// \u6CE8\u610F\uFF1A\u5148\u5C06\u6570\u7EC4\u6392\u597D\u5E8F</span>
        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token function">nSumTarget</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// \u6CE8\u610F\uFF1A\u8FD9\u91CC\u628A target \u63D0\u5347\u4E3A long \u7C7B\u578B</span>
    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">nSumTarget</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">long</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> len <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
        <span class="token comment">// \u81F3\u5C11\u662F\u4E24\u6570\u4E4B\u548C\uFF0C\u5E76\u4E14\u5C0F\u4E8E\u6570\u7EC4\u7684\u957F\u5EA6</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">2</span> <span class="token operator">||</span> n <span class="token operator">&gt;</span> len<span class="token punctuation">)</span> <span class="token keyword">return</span> res<span class="token punctuation">;</span>
        <span class="token comment">// base case\uFF0C\u4E24\u6570\u4E4B\u548C</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> lo <span class="token operator">=</span> start<span class="token punctuation">,</span> hi <span class="token operator">=</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>lo <span class="token operator">&lt;</span> hi<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// \u6CE8\u610F\uFF1Aleft \u548C right \u653E\u5728\u5FAA\u574F\u4F53\u5185</span>
                <span class="token keyword">int</span> left <span class="token operator">=</span> nums<span class="token punctuation">[</span>lo<span class="token punctuation">]</span><span class="token punctuation">,</span> right <span class="token operator">=</span> nums<span class="token punctuation">[</span>hi<span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token keyword">int</span> sum <span class="token operator">=</span> nums<span class="token punctuation">[</span>lo<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>hi<span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">&lt;</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// \u53BB\u91CD</span>
                    <span class="token keyword">while</span> <span class="token punctuation">(</span>lo <span class="token operator">&lt;</span> hi <span class="token operator">&amp;&amp;</span> left <span class="token operator">==</span> nums<span class="token punctuation">[</span>lo<span class="token punctuation">]</span><span class="token punctuation">)</span> lo<span class="token operator">++</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">&gt;</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// \u53BB\u91CD</span>
                    <span class="token keyword">while</span> <span class="token punctuation">(</span>lo <span class="token operator">&lt;</span> hi <span class="token operator">&amp;&amp;</span> right <span class="token operator">==</span> nums<span class="token punctuation">[</span>hi<span class="token punctuation">]</span><span class="token punctuation">)</span> hi<span class="token operator">--</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token comment">// \u52A0\u5165\u7ED3\u679C\u96C6</span>
                    res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token comment">// \u53BB\u91CD</span>
                    <span class="token keyword">while</span> <span class="token punctuation">(</span>lo <span class="token operator">&lt;</span> hi <span class="token operator">&amp;&amp;</span> left <span class="token operator">==</span> nums<span class="token punctuation">[</span>lo<span class="token punctuation">]</span><span class="token punctuation">)</span> lo<span class="token operator">++</span><span class="token punctuation">;</span>
                    <span class="token keyword">while</span> <span class="token punctuation">(</span>lo <span class="token operator">&lt;</span> hi <span class="token operator">&amp;&amp;</span> right <span class="token operator">==</span> nums<span class="token punctuation">[</span>hi<span class="token punctuation">]</span><span class="token punctuation">)</span> hi<span class="token operator">--</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment">// \u5BF9\u6570\u7EC4\u7684\u6BCF\u4E00\u4E2A\u5143\u7D20\uFF0C\u8C03\u7528 (n-1)Sum</span>
            <span class="token comment">// \u6CE8\u610F\uFF1Ai = start</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> start<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// \u6CE8\u610F\uFF1A\u8FD9\u91CC\u7684target \u662F tatget - nums[i]</span>
                <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token function">nSumTarget</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> target <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> list1 <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// (n-1)Sum \u518D\u52A0\u4E0A\u5F53\u524D\u5143\u7D20\uFF0C\u5C31\u662F nSum</span>
                    list1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token comment">// \u52A0\u5230\u7ED3\u679C\u4E2D</span>
                    res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token comment">// \u6CE8\u610F\uFF1A\u53BB\u91CD</span>
                <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> len <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> i<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> res<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-4-\u53CC\u6307\u9488\u6280\u5DE7\u79D2\u6740\u4E03\u9053\u6570\u7EC4\u9898\u76EE" tabindex="-1"><a class="header-anchor" href="#_2-4-\u53CC\u6307\u9488\u6280\u5DE7\u79D2\u6740\u4E03\u9053\u6570\u7EC4\u9898\u76EE" aria-hidden="true">#</a> 2.4 \u53CC\u6307\u9488\u6280\u5DE7\u79D2\u6740\u4E03\u9053\u6570\u7EC4\u9898\u76EE</h3><blockquote><p>\u5FEB\u6162\u6307\u9488</p></blockquote>`,7),Cs={id:"_26-\u5220\u9664\u6709\u5E8F\u6570\u7EC4\u4E2D\u7684\u91CD\u590D\u9879",tabindex:"-1"},Ds=n("a",{class:"header-anchor",href:"#_26-\u5220\u9664\u6709\u5E8F\u6570\u7EC4\u4E2D\u7684\u91CD\u590D\u9879","aria-hidden":"true"},"#",-1),Rs=s(),Bs={href:"https://leetcode.cn/problems/remove-duplicates-from-sorted-array/",target:"_blank",rel:"noopener noreferrer"},Vs=s("26. \u5220\u9664\u6709\u5E8F\u6570\u7EC4\u4E2D\u7684\u91CD\u590D\u9879"),Ps=s("\u7ED9\u4F60\u4E00\u4E2A "),Us=n("strong",null,"\u5347\u5E8F\u6392\u5217",-1),Hs=s(" \u7684\u6570\u7EC4 "),Ks=n("code",null,"nums",-1),Qs=s(" \uFF0C\u8BF7\u4F60**"),Gs={href:"http://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95",target:"_blank",rel:"noopener noreferrer"},Fs=s(" \u539F\u5730"),Ws=s("** \u5220\u9664\u91CD\u590D\u51FA\u73B0\u7684\u5143\u7D20\uFF0C\u4F7F\u6BCF\u4E2A\u5143\u7D20 "),Xs=n("strong",null,"\u53EA\u51FA\u73B0\u4E00\u6B21",-1),Ys=s(" \uFF0C\u8FD4\u56DE\u5220\u9664\u540E\u6570\u7EC4\u7684\u65B0\u957F\u5EA6\u3002"),Js=t(`<p><strong>\u601D\u8DEF\uFF1A</strong></p><p>\u5FEB\u6162\u6307\u9488\uFF0C\u4E0D\u76F8\u7B49\u5219\u653E\u5728\u6570\u7EC4\u91CC\uFF0C\u76F8\u7B49\u5C31\u4E0B\u4E00\u4E2A</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">removeDuplicates</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> slow <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> fast <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>fast <span class="token operator">!=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// \u4FDD\u8BC1 nums[0,slow] \u662F\u4E0D\u91CD\u590D\u7684\u5143\u7D20</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>slow<span class="token punctuation">]</span> <span class="token operator">!=</span> nums<span class="token punctuation">[</span>fast<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                nums<span class="token punctuation">[</span><span class="token operator">++</span>slow<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>fast<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            fast<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> slow <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),Zs={id:"_83-\u5220\u9664\u6392\u5E8F\u94FE\u8868\u4E2D\u7684\u91CD\u590D\u5143\u7D20",tabindex:"-1"},$s=n("a",{class:"header-anchor",href:"#_83-\u5220\u9664\u6392\u5E8F\u94FE\u8868\u4E2D\u7684\u91CD\u590D\u5143\u7D20","aria-hidden":"true"},"#",-1),na=s(),sa={href:"https://leetcode.cn/problems/remove-duplicates-from-sorted-list/",target:"_blank",rel:"noopener noreferrer"},aa=s("83. \u5220\u9664\u6392\u5E8F\u94FE\u8868\u4E2D\u7684\u91CD\u590D\u5143\u7D20"),pa=t(`<p>\u7ED9\u5B9A\u4E00\u4E2A\u5DF2\u6392\u5E8F\u7684\u94FE\u8868\u7684\u5934 <code>head</code> \uFF0C \u5220\u9664\u6240\u6709\u91CD\u590D\u7684\u5143\u7D20\uFF0C\u4F7F\u6BCF\u4E2A\u5143\u7D20\u53EA\u51FA\u73B0\u4E00\u6B21 \u3002\u8FD4\u56DE \u5DF2\u6392\u5E8F\u7684\u94FE\u8868 \u3002</p><p><strong>\u601D\u8DEF\uFF1A</strong></p><p>\u5FEB\u6162\u6307\u9488</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">deleteDuplicates</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> head<span class="token punctuation">;</span>
        <span class="token class-name">ListNode</span> fast <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">,</span> slow <span class="token operator">=</span> head<span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>fast <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>fast<span class="token punctuation">.</span>val <span class="token operator">!=</span> slow<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                slow<span class="token punctuation">.</span>next <span class="token operator">=</span> fast<span class="token punctuation">;</span>
                slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// \u7ED3\u675F\u94FE\u8868</span>
        slow<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> head<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),ta={id:"_27-\u79FB\u9664\u5143\u7D20",tabindex:"-1"},ea=n("a",{class:"header-anchor",href:"#_27-\u79FB\u9664\u5143\u7D20","aria-hidden":"true"},"#",-1),oa=s(),ca={href:"https://leetcode.cn/problems/remove-element/",target:"_blank",rel:"noopener noreferrer"},la=s("27. \u79FB\u9664\u5143\u7D20"),ia=t(`<p>\u7ED9\u4F60\u4E00\u4E2A\u6570\u7EC4 nums \u548C\u4E00\u4E2A\u503C val\uFF0C\u4F60\u9700\u8981 \u539F\u5730 \u79FB\u9664\u6240\u6709\u6570\u503C\u7B49\u4E8E val \u7684\u5143\u7D20\uFF0C\u5E76\u8FD4\u56DE\u79FB\u9664\u540E\u6570\u7EC4\u7684\u65B0\u957F\u5EA6\u3002</p><p>\u4E0D\u8981\u4F7F\u7528\u989D\u5916\u7684\u6570\u7EC4\u7A7A\u95F4\uFF0C\u4F60\u5FC5\u987B\u4EC5\u4F7F\u7528 O(1) \u989D\u5916\u7A7A\u95F4\u5E76 \u539F\u5730 \u4FEE\u6539\u8F93\u5165\u6570\u7EC4\u3002</p><p>\u5143\u7D20\u7684\u987A\u5E8F\u53EF\u4EE5\u6539\u53D8\u3002\u4F60\u4E0D\u9700\u8981\u8003\u8651\u6570\u7EC4\u4E2D\u8D85\u51FA\u65B0\u957F\u5EA6\u540E\u9762\u7684\u5143\u7D20\u3002</p><p><strong>\u601D\u8DEF\uFF1A</strong></p><p>\u5FEB\u6162\u6307\u9488</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">removeElement</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> fast <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> slow <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>fast <span class="token operator">!=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>fast<span class="token punctuation">]</span> <span class="token operator">!=</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                nums<span class="token punctuation">[</span>slow<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>fast<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            fast<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> slow<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),ua={id:"_283-\u79FB\u52A8\u96F6",tabindex:"-1"},ka=n("a",{class:"header-anchor",href:"#_283-\u79FB\u52A8\u96F6","aria-hidden":"true"},"#",-1),ra=s(),da={href:"https://leetcode.cn/problems/move-zeroes/",target:"_blank",rel:"noopener noreferrer"},va=s("283. \u79FB\u52A8\u96F6"),ma=t(`<p>\u7ED9\u5B9A\u4E00\u4E2A\u6570\u7EC4 <code>nums</code>\uFF0C\u7F16\u5199\u4E00\u4E2A\u51FD\u6570\u5C06\u6240\u6709 <code>0</code> \u79FB\u52A8\u5230\u6570\u7EC4\u7684\u672B\u5C3E\uFF0C\u540C\u65F6\u4FDD\u6301\u975E\u96F6\u5143\u7D20\u7684\u76F8\u5BF9\u987A\u5E8F\u3002</p><p><strong>\u8BF7\u6CE8\u610F</strong> \uFF0C\u5FC5\u987B\u5728\u4E0D\u590D\u5236\u6570\u7EC4\u7684\u60C5\u51B5\u4E0B\u539F\u5730\u5BF9\u6570\u7EC4\u8FDB\u884C\u64CD\u4F5C\u3002</p><p><strong>\u601D\u8DEF\uFF1A</strong></p><p>\u975E\u96F6\u79FB\u52A8\u5728\u524D\u9762\uFF0C\u540E\u9762\u518D\u8865\u96F6</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">moveZeroes</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> fast <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> slow <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>fast <span class="token operator">!=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>fast<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                nums<span class="token punctuation">[</span>slow<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>fast<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            fast<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>slow <span class="token operator">!=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            nums<span class="token punctuation">[</span>slow<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>\u5DE6\u53F3\u6307\u9488</p></blockquote>`,6),ba={id:"_167-\u4E24\u6570\u4E4B\u548C-ii-\u8F93\u5165\u6709\u5E8F\u6570\u7EC4",tabindex:"-1"},ha=n("a",{class:"header-anchor",href:"#_167-\u4E24\u6570\u4E4B\u548C-ii-\u8F93\u5165\u6709\u5E8F\u6570\u7EC4","aria-hidden":"true"},"#",-1),wa=s(),ya={href:"https://leetcode.cn/problems/two-sum-ii-input-array-is-sorted/",target:"_blank",rel:"noopener noreferrer"},ga=s("167. \u4E24\u6570\u4E4B\u548C II - \u8F93\u5165\u6709\u5E8F\u6570\u7EC4"),fa=t(`<p>\u7ED9\u4F60\u4E00\u4E2A<code>\u4E0B\u6807\u4ECE 1 \u5F00\u59CB</code>\u7684\u6574\u6570\u6570\u7EC4 numbers \uFF0C\u8BE5\u6570\u7EC4\u5DF2\u6309 \u975E\u9012\u51CF\u987A\u5E8F\u6392\u5217 \uFF0C\u8BF7\u4F60\u4ECE\u6570\u7EC4\u4E2D\u627E\u51FA\u6EE1\u8DB3\u76F8\u52A0\u4E4B\u548C\u7B49\u4E8E\u76EE\u6807\u6570 target \u7684\u4E24\u4E2A\u6570\u3002\u5982\u679C\u8BBE\u8FD9\u4E24\u4E2A\u6570\u5206\u522B\u662F numbers[index1] \u548C numbers[index2] \uFF0C\u5219 1 &lt;= index1 &lt; index2 &lt;= numbers.length \u3002</p><p>\u4EE5\u957F\u5EA6\u4E3A 2 \u7684\u6574\u6570\u6570\u7EC4 [index1, index2] \u7684\u5F62\u5F0F\u8FD4\u56DE\u8FD9\u4E24\u4E2A\u6574\u6570\u7684\u4E0B\u6807 index1 \u548C index2\u3002</p><p>\u4F60\u53EF\u4EE5\u5047\u8BBE\u6BCF\u4E2A\u8F93\u5165 \u53EA\u5BF9\u5E94\u552F\u4E00\u7684\u7B54\u6848 \uFF0C\u800C\u4E14\u4F60 \u4E0D\u53EF\u4EE5 <code>\u91CD\u590D\u4F7F\u7528\u76F8\u540C\u7684\u5143\u7D20</code>\u3002</p><p>\u4F60\u6240\u8BBE\u8BA1\u7684\u89E3\u51B3\u65B9\u6848\u5FC5\u987B\u53EA\u4F7F\u7528\u5E38\u91CF\u7EA7\u7684\u989D\u5916\u7A7A\u95F4\u3002</p><p><strong>\u601D\u8DEF\uFF1A</strong></p><p>\u4E8C\u5206\u67E5\u627E</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">twoSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> numbers<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> numbers<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token comment">// \u4E0D\u53EF\u4EE5 \u91CD\u590D\u4F7F\u7528\u76F8\u540C\u7684\u5143\u7D20</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> sum <span class="token operator">=</span> numbers<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">+</span> numbers<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">&lt;</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                left<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">&gt;</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                right<span class="token operator">--</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token comment">// \u4E0B\u6807\u4ECE1\u5F00\u59CB\uFF0C\u6240\u4EE5\u4E0B\u6807\u52A01</span>
                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> right <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7),_a={id:"_344-\u53CD\u8F6C\u5B57\u7B26\u4E32",tabindex:"-1"},xa=n("a",{class:"header-anchor",href:"#_344-\u53CD\u8F6C\u5B57\u7B26\u4E32","aria-hidden":"true"},"#",-1),ja=s(),Na={href:"https://leetcode.cn/problems/reverse-string/",target:"_blank",rel:"noopener noreferrer"},Sa=s("344. \u53CD\u8F6C\u5B57\u7B26\u4E32"),La=t(`<p>\u7F16\u5199\u4E00\u4E2A\u51FD\u6570\uFF0C\u5176\u4F5C\u7528\u662F\u5C06\u8F93\u5165\u7684\u5B57\u7B26\u4E32\u53CD\u8F6C\u8FC7\u6765\u3002\u8F93\u5165\u5B57\u7B26\u4E32\u4EE5\u5B57\u7B26\u6570\u7EC4 s \u7684\u5F62\u5F0F\u7ED9\u51FA\u3002</p><p>\u4E0D\u8981\u7ED9\u53E6\u5916\u7684\u6570\u7EC4\u5206\u914D\u989D\u5916\u7684\u7A7A\u95F4\uFF0C\u4F60\u5FC5\u987B\u539F\u5730\u4FEE\u6539\u8F93\u5165\u6570\u7EC4\u3001\u4F7F\u7528 O(1) \u7684\u989D\u5916\u7A7A\u95F4\u89E3\u51B3\u8FD9\u4E00\u95EE\u9898\u3002</p><p><strong>\u601D\u8DEF\uFF1A</strong></p><p>\u5DE6\u53F3\u6307\u9488</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">reverseString</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> s<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">char</span> temp <span class="token operator">=</span> s<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>
            s<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>
            s<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>
            left<span class="token operator">++</span><span class="token punctuation">;</span>
            right<span class="token operator">--</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),qa={id:"_5-\u6700\u957F\u56DE\u6587\u5B50\u4E32",tabindex:"-1"},Ta=n("a",{class:"header-anchor",href:"#_5-\u6700\u957F\u56DE\u6587\u5B50\u4E32","aria-hidden":"true"},"#",-1),Ia=s(),Aa={href:"https://leetcode.cn/problems/longest-palindromic-substring/",target:"_blank",rel:"noopener noreferrer"},Ea=s("5. \u6700\u957F\u56DE\u6587\u5B50\u4E32"),Oa=t(`<p>\u7ED9\u4F60\u4E00\u4E2A\u5B57\u7B26\u4E32 <code>s</code>\uFF0C\u627E\u5230 <code>s</code> \u4E2D\u6700\u957F\u7684\u56DE\u6587\u5B50\u4E32\u3002</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/2541/202209161415051.png" alt="image-20220916141509932"></p><p><strong>\u601D\u8DEF\uFF1A</strong></p><p>1.\u7F16\u5199\u65B9\u6CD5 public String palindrome(String s, int i, int j):\u627E\u51FA\u4EE5 s[i] \u548C s[j]\u4E3A\u4E2D\u5FC3\u7684\u6700\u957F\u56DE\u6587\u5B57\u7B26\u4E32</p><p>2.\u904D\u5386\u5B57\u7B26\u4E32 s\uFF0C\u5BF9\u6BCF\u4E2A\u5143\u7D20\u6C42\u6700\u957F\u56DE\u6587\u5B57\u7B26\u4E32\uFF08\u533A\u5206\u5947\u6570\u548C\u5076\u6570\uFF09\uFF0C\u5F97\u5230\u6700\u957F\u7684\u56DE\u6587\u5B57\u7B26\u4E32</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">longestPalindrome</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> len <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> s<span class="token punctuation">;</span>
        <span class="token class-name">String</span> res <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// \u5076\u6570\u7684\u60C5\u51B5</span>
            <span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token function">palindrome</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> i<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// \u5947\u6570\u7684\u60C5\u51B5</span>
            <span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token function">palindrome</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> i<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// \u627E\u51FA\u6700\u957F\u7684\u56DE\u6587\u5B57\u7B26\u4E32</span>
            res <span class="token operator">=</span> res<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> s1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> res <span class="token operator">:</span> s1<span class="token punctuation">;</span>
            res <span class="token operator">=</span> res<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> s2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> res <span class="token operator">:</span> s2<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> res<span class="token punctuation">;</span>
        
    <span class="token punctuation">}</span>
    <span class="token comment">// \u627E\u51FA\u4EE5 s[i] \u548C s[j] \u4E3A\u4E2D\u5FC3\u7684\u6700\u957F\u56DE\u6587\u5B57\u7B26\u4E32</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">palindrome</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// \u4FDD\u8BC1\u4E0D\u8D8A\u754C\u5E76\u4E14\u56DE\u6587</span>
            <span class="token comment">// \u6307\u9488\u5728\u4E2D\u95F4\u5411\u4E24\u8FB9\u524D\u8FDB</span>
            i<span class="token operator">--</span><span class="token punctuation">;</span>
            j<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-5-\u5C0F\u800C\u7F8E\u7684\u7B97\u6CD5\u6280\u5DE7-\u524D\u7F00\u548C\u6570\u7EC4" tabindex="-1"><a class="header-anchor" href="#_2-5-\u5C0F\u800C\u7F8E\u7684\u7B97\u6CD5\u6280\u5DE7-\u524D\u7F00\u548C\u6570\u7EC4" aria-hidden="true">#</a> 2.5 \u5C0F\u800C\u7F8E\u7684\u7B97\u6CD5\u6280\u5DE7\uFF1A\u524D\u7F00\u548C\u6570\u7EC4</h3><blockquote><p><strong>\u524D\u7F00\u548C\u4E3B\u8981\u9002\u7528\u7684\u573A\u666F\u662F\u539F\u59CB\u6570\u7EC4\u4E0D\u4F1A\u88AB\u4FEE\u6539\u7684\u60C5\u51B5\u4E0B\uFF0C\u9891\u7E41\u67E5\u8BE2\u67D0\u4E2A\u533A\u95F4\u7684\u7D2F\u52A0\u548C</strong>\u3002</p></blockquote>`,8),Ma={id:"_303-\u533A\u57DF\u548C\u68C0\u7D22-\u6570\u7EC4\u4E0D\u53EF\u53D8",tabindex:"-1"},za=n("a",{class:"header-anchor",href:"#_303-\u533A\u57DF\u548C\u68C0\u7D22-\u6570\u7EC4\u4E0D\u53EF\u53D8","aria-hidden":"true"},"#",-1),Ca=s(),Da={href:"https://leetcode.cn/problems/range-sum-query-immutable/",target:"_blank",rel:"noopener noreferrer"},Ra=s("303. \u533A\u57DF\u548C\u68C0\u7D22 - \u6570\u7EC4\u4E0D\u53EF\u53D8"),Ba=t(`<p>\u7ED9\u5B9A\u4E00\u4E2A\u6574\u6570\u6570\u7EC4 nums\uFF0C\u5904\u7406\u4EE5\u4E0B\u7C7B\u578B\u7684\u591A\u4E2A\u67E5\u8BE2:</p><p>\u8BA1\u7B97\u7D22\u5F15 left \u548C right \uFF08\u5305\u542B left \u548C right\uFF09\u4E4B\u95F4\u7684 nums \u5143\u7D20\u7684 \u548C \uFF0C\u5176\u4E2D left &lt;= right \u5B9E\u73B0 NumArray \u7C7B\uFF1A</p><p>NumArray(int[] nums) \u4F7F\u7528\u6570\u7EC4 nums \u521D\u59CB\u5316\u5BF9\u8C61 int sumRange(int i, int j) \u8FD4\u56DE\u6570\u7EC4 nums \u4E2D\u7D22\u5F15 left \u548C right \u4E4B\u95F4\u7684\u5143\u7D20\u7684 \u603B\u548C \uFF0C\u5305\u542B left \u548C right \u4E24\u70B9\uFF08\u4E5F\u5C31\u662F nums[left] + nums[left + 1] + ... + nums[right] )</p><p><strong>\u601D\u8DEF\uFF1A</strong></p><p>\u524D\u7F00\u548C\u6570\u7EC4\uFF0Csum \u6570\u7EC4\u7684\u957F\u5EA6\u4E3A <code>nums.length + 1</code>\uFF0C<code>sum[i] = nums[0]+....+nums[i - 1]</code>\uFF0C\u7ED3\u679C\u7B49\u4E8E <code>sum[right + 1] - sum[left]</code>;</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">NumArray</span> <span class="token punctuation">{</span>

    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> sum<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">NumArray</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        sum <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>nums<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token comment">// sum[i] = nums[0]+....+nums[i - 1]</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> sum<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">sumRange</span><span class="token punctuation">(</span><span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> sum<span class="token punctuation">[</span>right <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> sum<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),Va={id:"_304-\u4E8C\u7EF4\u533A\u57DF\u548C\u68C0\u7D22-\u77E9\u9635\u4E0D\u53EF\u53D8",tabindex:"-1"},Pa=n("a",{class:"header-anchor",href:"#_304-\u4E8C\u7EF4\u533A\u57DF\u548C\u68C0\u7D22-\u77E9\u9635\u4E0D\u53EF\u53D8","aria-hidden":"true"},"#",-1),Ua=s(),Ha={href:"https://leetcode.cn/problems/range-sum-query-2d-immutable/",target:"_blank",rel:"noopener noreferrer"},Ka=s("304. \u4E8C\u7EF4\u533A\u57DF\u548C\u68C0\u7D22 - \u77E9\u9635\u4E0D\u53EF\u53D8"),Qa=t(`<p>\u7ED9\u5B9A\u4E00\u4E2A\u4E8C\u7EF4\u77E9\u9635 matrix\uFF0C\u4EE5\u4E0B\u7C7B\u578B\u7684\u591A\u4E2A\u8BF7\u6C42\uFF1A</p><p>\u8BA1\u7B97\u5176\u5B50\u77E9\u5F62\u8303\u56F4\u5185\u5143\u7D20\u7684\u603B\u548C\uFF0C\u8BE5\u5B50\u77E9\u9635\u7684 \u5DE6\u4E0A\u89D2 \u4E3A (row1, col1) \uFF0C\u53F3\u4E0B\u89D2 \u4E3A (row2, col2) \u3002 \u5B9E\u73B0 NumMatrix \u7C7B\uFF1A</p><p>NumMatrix(int[][] matrix) \u7ED9\u5B9A\u6574\u6570\u77E9\u9635 matrix \u8FDB\u884C\u521D\u59CB\u5316 int sumRegion(int row1, int col1, int row2, int col2) \u8FD4\u56DE \u5DE6\u4E0A\u89D2 (row1, col1) \u3001\u53F3\u4E0B\u89D2 (row2, col2) \u6240\u63CF\u8FF0\u7684\u5B50\u77E9\u9635\u7684\u5143\u7D20 \u603B\u548C</p><p><strong>\u601D\u8DEF\uFF1A</strong></p><p>\u524D\u7F00\u548C</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/2541/1626332422-wUpUHT-image.png" alt="img"></p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">NumMatrix</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u524D\u7F00\u548C\u6570\u7EC4</span>
    <span class="token keyword">int</span> sum<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">NumMatrix</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> matrix<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> n <span class="token operator">=</span> matrix<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
        <span class="token keyword">int</span> m <span class="token operator">=</span> matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>
        sum <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
               sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> sum<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> sum<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> matrix<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">sumRegion</span><span class="token punctuation">(</span><span class="token keyword">int</span> row1<span class="token punctuation">,</span> <span class="token keyword">int</span> col1<span class="token punctuation">,</span> <span class="token keyword">int</span> row2<span class="token punctuation">,</span> <span class="token keyword">int</span> col2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> sum<span class="token punctuation">[</span>row2 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>col2 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> sum<span class="token punctuation">[</span>row2 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>col1<span class="token punctuation">]</span> <span class="token operator">-</span> sum<span class="token punctuation">[</span>row1<span class="token punctuation">]</span><span class="token punctuation">[</span>col2 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> sum<span class="token punctuation">[</span>row1<span class="token punctuation">]</span><span class="token punctuation">[</span>col1<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-6-\u5C0F\u800C\u7F8E\u7684\u7B97\u6CD5\u6280\u5DE7-\u5DEE\u5206\u6570\u7EC4" tabindex="-1"><a class="header-anchor" href="#_2-6-\u5C0F\u800C\u7F8E\u7684\u7B97\u6CD5\u6280\u5DE7-\u5DEE\u5206\u6570\u7EC4" aria-hidden="true">#</a> 2.6 \u5C0F\u800C\u7F8E\u7684\u7B97\u6CD5\u6280\u5DE7\uFF1A\u5DEE\u5206\u6570\u7EC4</h3><blockquote><p><strong>\u5DEE\u5206\u6570\u7EC4\u7684\u4E3B\u8981\u9002\u7528\u573A\u666F\u662F\u9891\u7E41\u5BF9\u539F\u59CB\u6570\u7EC4\u7684\u67D0\u4E2A\u533A\u95F4\u7684\u5143\u7D20\u8FDB\u884C\u589E\u51CF</strong>\u3002</p></blockquote><p><strong>\u6A21\u677F\uFF1A</strong></p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// \u5DEE\u5206\u6570\u7EC4\u5DE5\u5177\u7C7B</span>
<span class="token keyword">class</span> <span class="token class-name">Difference</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u5DEE\u5206\u6570\u7EC4</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> diff<span class="token punctuation">;</span>
    
    <span class="token comment">/* \u8F93\u5165\u4E00\u4E2A\u521D\u59CB\u6570\u7EC4\uFF0C\u533A\u95F4\u64CD\u4F5C\u5C06\u5728\u8FD9\u4E2A\u6570\u7EC4\u4E0A\u8FDB\u884C */</span>
    <span class="token keyword">public</span> <span class="token class-name">Difference</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        diff <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token comment">// \u6839\u636E\u521D\u59CB\u6570\u7EC4\u6784\u9020\u5DEE\u5206\u6570\u7EC4</span>
        diff<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            diff<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> nums<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">/* \u7ED9\u95ED\u533A\u95F4 [i, j] \u589E\u52A0 val\uFF08\u53EF\u4EE5\u662F\u8D1F\u6570\uFF09*/</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        diff<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> val<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> diff<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            diff<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-=</span> val<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">/* \u8FD4\u56DE\u7ED3\u679C\u6570\u7EC4 */</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">result</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>diff<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token comment">// \u6839\u636E\u5DEE\u5206\u6570\u7EC4\u6784\u9020\u7ED3\u679C\u6570\u7EC4</span>
        res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> diff<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> diff<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> res<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> diff<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> res<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,11),Ga={id:"_1109-\u822A\u73ED\u9884\u8BA2\u7EDF\u8BA1",tabindex:"-1"},Fa=n("a",{class:"header-anchor",href:"#_1109-\u822A\u73ED\u9884\u8BA2\u7EDF\u8BA1","aria-hidden":"true"},"#",-1),Wa=s(),Xa={href:"https://leetcode.cn/problems/corporate-flight-bookings/",target:"_blank",rel:"noopener noreferrer"},Ya=s("1109. \u822A\u73ED\u9884\u8BA2\u7EDF\u8BA1"),Ja=t(`<p>\u8FD9\u91CC\u6709 n \u4E2A\u822A\u73ED\uFF0C\u5B83\u4EEC\u5206\u522B\u4ECE 1 \u5230 n \u8FDB\u884C\u7F16\u53F7\u3002</p><p>\u6709\u4E00\u4EFD\u822A\u73ED\u9884\u8BA2\u8868 bookings \uFF0C\u8868\u4E2D\u7B2C i \u6761\u9884\u8BA2\u8BB0\u5F55 bookings[i] = [firsti, lasti, seatsi] \u610F\u5473\u7740\u5728\u4ECE firsti \u5230 lasti \uFF08\u5305\u542B firsti \u548C lasti \uFF09\u7684 \u6BCF\u4E2A\u822A\u73ED \u4E0A\u9884\u8BA2\u4E86 seatsi \u4E2A\u5EA7\u4F4D\u3002</p><p>\u8BF7\u4F60\u8FD4\u56DE\u4E00\u4E2A\u957F\u5EA6\u4E3A n \u7684\u6570\u7EC4 answer\uFF0C\u91CC\u9762\u7684\u5143\u7D20\u662F\u6BCF\u4E2A\u822A\u73ED\u9884\u5B9A\u7684\u5EA7\u4F4D\u603B\u6570\u3002</p><p><strong>\u601D\u8DEF\uFF1A</strong></p><p>\u5DEE\u5206\u6CD5\uFF0C\u521D\u59CB\u5316\u6570\u7EC4 nums\uFF0C\u957F\u5EA6\u4E3A n, \u4E09\u5143\u7EC4 bookings[i] \u5C31\u662F\u5728\u533A\u95F4\u8FDB\u884C\u589E\u51CF\uFF0C\u5957\u7528\u6A21\u677F</p><p><strong>\u6CE8\u610F\uFF1A</strong></p><p>\u56E0\u4E3A n \u662F\u4ECE 1 \u5F00\u59CB\u7684\uFF0C\u6240\u4EE5 \u7D22\u5F15\u9700\u8981\u51CF 1</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">corpFlightBookings</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bookings<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token class-name">Difference</span> diff <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Difference</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> booking <span class="token operator">:</span> bookings<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// \u6CE8\u610F\u7D22\u5F15\u51CF1</span>
            <span class="token keyword">int</span> i <span class="token operator">=</span> booking<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> j <span class="token operator">=</span> booking<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> val <span class="token operator">=</span> booking<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            diff<span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> diff<span class="token punctuation">.</span><span class="token function">result</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">Difference</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u5DEE\u5206\u6570\u7EC4</span>
    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> diff<span class="token punctuation">;</span>

    <span class="token comment">// \u521D\u59CB\u5316\u5DEE\u5206\u6570\u7EC4</span>
    <span class="token keyword">public</span> <span class="token class-name">Difference</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        diff <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token comment">// \u5DEE\u5206\u6570\u7EC4\u7B2C\u4E00\u4E2A\u503C\u5C31\u662F\u6570\u7EC4\u7684\u7B2C\u4E00\u4E2A\u503C</span>
        diff<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// \u5DEE\u5206\u6570\u7EC4\u7684\u5B9A\u4E49</span>
            diff<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> nums<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// \u7ED9\u533A\u95F4[i, j]\u589E\u52A0val</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        diff<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> val<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> diff<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// \u82E5 j + 1 &gt;= diff.length\uFF0C\u8868\u660E\u5BF9 nums[i] \u540E\u7684\u6574\u4E2A\u6570\u7EC4\u589E\u52A0\u503C\uFF0C\u4E0D\u9700\u8981\u64CD\u4F5C diff[j + 1]</span>
            diff<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-=</span> val<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// \u6839\u636E\u5DEE\u5206\u6570\u7EC4\u8FD4\u56DE\u7ED3\u679C\u96C6</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">result</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>diff<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>
        res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> diff<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> diff<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> res<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> diff<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> res<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8),Za={id:"_1094-\u62FC\u8F66",tabindex:"-1"},$a=n("a",{class:"header-anchor",href:"#_1094-\u62FC\u8F66","aria-hidden":"true"},"#",-1),np=s(),sp={href:"https://leetcode.cn/problems/car-pooling/",target:"_blank",rel:"noopener noreferrer"},ap=s("1094. \u62FC\u8F66"),pp=t(`<p>\u8F66\u4E0A\u6700\u521D\u6709 capacity \u4E2A\u7A7A\u5EA7\u4F4D\u3002\u8F66 \u53EA\u80FD \u5411\u4E00\u4E2A\u65B9\u5411\u884C\u9A76\uFF08\u4E5F\u5C31\u662F\u8BF4\uFF0C\u4E0D\u5141\u8BB8\u6389\u5934\u6216\u6539\u53D8\u65B9\u5411\uFF09</p><p>\u7ED9\u5B9A\u6574\u6570 capacity \u548C\u4E00\u4E2A\u6570\u7EC4 trips , trip[i] = [numPassengersi, fromi, toi] \u8868\u793A\u7B2C i \u6B21\u65C5\u884C\u6709 numPassengersi \u4E58\u5BA2\uFF0C\u63A5\u4ED6\u4EEC\u548C\u653E\u4ED6\u4EEC\u7684\u4F4D\u7F6E\u5206\u522B\u662F fromi \u548C toi \u3002\u8FD9\u4E9B\u4F4D\u7F6E\u662F\u4ECE\u6C7D\u8F66\u7684\u521D\u59CB\u4F4D\u7F6E\u5411\u4E1C\u7684\u516C\u91CC\u6570\u3002</p><p>\u5F53\u4E14\u4EC5\u5F53\u4F60\u53EF\u4EE5\u5728\u6240\u6709\u7ED9\u5B9A\u7684\u884C\u7A0B\u4E2D\u63A5\u9001\u6240\u6709\u4E58\u5BA2\u65F6\uFF0C\u8FD4\u56DE true\uFF0C\u5426\u5219\u8BF7\u8FD4\u56DE false\u3002</p><p><strong>\u601D\u8DEF\uFF1A</strong></p><p>\u5DEE\u5206\u6CD5\uFF0C\u8FD9\u91CC\u8FD8\u6709\u4E2A\u5BB9\u91CF\u7684\u9650\u5236</p><p><strong>\u6CE8\u610F\uFF1A</strong></p><p>\u4E58\u5BA2\u5728\u8F66\u4E0A\u7684\u533A\u95F4\u662F <code>[trip[1], trip[2] - 1]</code></p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">carPooling</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> trips<span class="token punctuation">,</span> <span class="token keyword">int</span> capacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// \u6839\u636E 0 &lt;= fromi &lt; toi &lt;= 1000</span>
        <span class="token comment">// \u6700\u591A\u6709 1001 \u4E2A\u8F66\u7AD9</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">1001</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token class-name">Difference</span> diff <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Difference</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> trip <span class="token operator">:</span> trips<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> val <span class="token operator">=</span> trip<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> i <span class="token operator">=</span> trip<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token comment">// trip[2]\u4E0B\u8F66</span>
            <span class="token comment">// \u5373\u4E58\u5BA2\u5728\u8F66\u4E0A\u7684\u533A\u95F4\u662F [trip[1], trip[2] - 1]</span>
            <span class="token keyword">int</span> j <span class="token operator">=</span> trip<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
            diff<span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res <span class="token operator">=</span> diff<span class="token punctuation">.</span><span class="token function">result</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> r <span class="token operator">:</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">&gt;</span> capacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// \u8D85\u8FC7\u5BB9\u91CF</span>
                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">Difference</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u5DEE\u5206\u6570\u7EC4</span>
    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> diff<span class="token punctuation">;</span>

    <span class="token comment">// \u521D\u59CB\u5316\u5DEE\u5206\u6570\u7EC4</span>
    <span class="token keyword">public</span> <span class="token class-name">Difference</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        diff <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token comment">// \u5DEE\u5206\u6570\u7EC4\u7B2C\u4E00\u4E2A\u503C\u5C31\u662F\u6570\u7EC4\u7684\u7B2C\u4E00\u4E2A\u503C</span>
        diff<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// \u5DEE\u5206\u6570\u7EC4\u7684\u5B9A\u4E49</span>
            diff<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> nums<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// \u7ED9\u533A\u95F4[i, j]\u589E\u52A0val</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        diff<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> val<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> diff<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// \u82E5 j + 1 &gt;= diff.length\uFF0C\u8868\u660E\u5BF9 nums[i] \u540E\u7684\u6574\u4E2A\u6570\u7EC4\u589E\u52A0\u503C\uFF0C\u4E0D\u9700\u8981\u64CD\u4F5C diff[j + 1]</span>
            diff<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-=</span> val<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// \u6839\u636E\u5DEE\u5206\u6570\u7EC4\u8FD4\u56DE\u7ED3\u679C\u96C6</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">result</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>diff<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>
        res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> diff<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> diff<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> res<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> diff<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> res<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-7-\u4E8C\u7EF4\u6570\u7EC4\u7684\u82B1\u5F0F\u904D\u5386\u6280\u5DE7" tabindex="-1"><a class="header-anchor" href="#_2-7-\u4E8C\u7EF4\u6570\u7EC4\u7684\u82B1\u5F0F\u904D\u5386\u6280\u5DE7" aria-hidden="true">#</a> 2.7 \u4E8C\u7EF4\u6570\u7EC4\u7684\u82B1\u5F0F\u904D\u5386\u6280\u5DE7</h3>`,9),tp={id:"_48-\u65CB\u8F6C\u56FE\u50CF",tabindex:"-1"},ep=n("a",{class:"header-anchor",href:"#_48-\u65CB\u8F6C\u56FE\u50CF","aria-hidden":"true"},"#",-1),op=s(),cp={href:"https://leetcode.cn/problems/rotate-image/",target:"_blank",rel:"noopener noreferrer"},lp=s("48. \u65CB\u8F6C\u56FE\u50CF"),ip=t(`<p>\u7ED9\u5B9A\u4E00\u4E2A n \xD7 n \u7684\u4E8C\u7EF4\u77E9\u9635 matrix \u8868\u793A\u4E00\u4E2A\u56FE\u50CF\u3002\u8BF7\u4F60\u5C06\u56FE\u50CF\u987A\u65F6\u9488\u65CB\u8F6C 90 \u5EA6\u3002</p><p>\u4F60\u5FC5\u987B\u5728 \u539F\u5730 \u65CB\u8F6C\u56FE\u50CF\uFF0C\u8FD9\u610F\u5473\u7740\u4F60\u9700\u8981\u76F4\u63A5\u4FEE\u6539\u8F93\u5165\u7684\u4E8C\u7EF4\u77E9\u9635\u3002\u8BF7\u4E0D\u8981 \u4F7F\u7528\u53E6\u4E00\u4E2A\u77E9\u9635\u6765\u65CB\u8F6C\u56FE\u50CF\u3002</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/2541/202209161356863.png" alt="image-20220916135655731"></p><p><strong>\u601D\u8DEF\uFF1A</strong></p><p>\u5148\u6CBF\u5BF9\u89D2\u7EBF\u5BF9\u79F0\u77E9\u9635\uFF0C\u7136\u540E\u6BCF\u4E00\u884Creverse</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> matrix<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> n <span class="token operator">=</span> matrix<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
        <span class="token comment">// \u6CBF\u5BF9\u89D2\u7EBF\u5BF9\u79F0\u77E9\u9635</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">int</span> temp <span class="token operator">=</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
                matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> matrix<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
                matrix<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// \u6BCF\u4E00\u884C reverse</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> row <span class="token operator">:</span> matrix<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">reverse</span><span class="token punctuation">(</span>row<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> row<span class="token punctuation">)</span> <span class="token punctuation">{</span>
         <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> row<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
         <span class="token keyword">while</span> <span class="token punctuation">(</span>right <span class="token operator">&gt;</span> left<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> temp <span class="token operator">=</span> row<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>
            row<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> row<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>
            row<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>
            left<span class="token operator">++</span><span class="token punctuation">;</span>
            right<span class="token operator">--</span><span class="token punctuation">;</span>
         <span class="token punctuation">}</span>
     <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>\u8865\u5145\uFF1A</p><p>\u9006\u65F6\u9488\u65CB\u8F6C90\uFF0C\u5148\u5BF9\u6BCF\u4E00\u884C reverse\uFF0C\u7136\u540E\u518D\u6CBF\u5BF9\u89D2\u7EBF\u5BF9\u79F0\u77E9\u9635</p></blockquote>`,7),up={id:"_54-\u87BA\u65CB\u77E9\u9635",tabindex:"-1"},kp=n("a",{class:"header-anchor",href:"#_54-\u87BA\u65CB\u77E9\u9635","aria-hidden":"true"},"#",-1),rp=s(),dp={href:"https://leetcode.cn/problems/spiral-matrix/",target:"_blank",rel:"noopener noreferrer"},vp=s("54. \u87BA\u65CB\u77E9\u9635"),mp=t(`<p>\u7ED9\u4F60\u4E00\u4E2A <code>m</code> \u884C <code>n</code> \u5217\u7684\u77E9\u9635 <code>matrix</code> \uFF0C\u8BF7\u6309\u7167 <strong>\u987A\u65F6\u9488\u87BA\u65CB\u987A\u5E8F</strong> \uFF0C\u8FD4\u56DE\u77E9\u9635\u4E2D\u7684\u6240\u6709\u5143\u7D20\u3002</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/2541/202209161357749.png" alt="image-20220916135710622"></p><p><strong>\u601D\u8DEF\uFF1A</strong></p><p>\u5B9A\u4E49\u4E0A\u4E0B\u5DE6\u53F3\u8FB9\u754C\uFF0C\u6A21\u62DF\u904D\u5386</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> <span class="token function">spiralOrder</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> matrix<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> n <span class="token operator">=</span> matrix<span class="token punctuation">.</span>length<span class="token punctuation">,</span> m <span class="token operator">=</span> matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> b <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> r <span class="token operator">=</span> m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token comment">// \u7ED3\u675F\u6761\u4EF6</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> m <span class="token operator">*</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// \u9876\u90E8\u4ECE\u5DE6\u5230\u53F3\u904D\u5386</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">&lt;=</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span> 	<span class="token comment">// \u907F\u514D\u91CD\u590D\u904D\u5386</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> l<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> r<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token comment">// \u4E0A\u8FB9\u754C\u4E0B\u79FB</span>
                t<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// \u53F3\u8FB9\u754C\u4ECE\u4E0A\u5230\u4E0B\u904D\u5386</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> t<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> b<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token comment">// \u53F3\u8FB9\u754C\u5DE6\u79FB</span>
                r<span class="token operator">--</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// \u5E95\u90E8\u4ECE\u53F3\u5230\u5DE6\u904D\u5386</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">&lt;=</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> r<span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> l<span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token comment">// \u4E0B\u8FB9\u754C\u4E0A\u79FB</span>
                b<span class="token operator">--</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// \u5DE6\u8FB9\u754C\u4ECE\u4E0B\u5230\u4E0A\u904D\u5386</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> b<span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> t<span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token comment">// \u5DE6\u8FB9\u754C\u53F3\u79FB</span>
                l<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> res<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),bp={id:"_59-\u87BA\u65CB\u77E9\u9635-ii",tabindex:"-1"},hp=n("a",{class:"header-anchor",href:"#_59-\u87BA\u65CB\u77E9\u9635-ii","aria-hidden":"true"},"#",-1),wp=s(),yp={href:"https://leetcode.cn/problems/spiral-matrix-ii/",target:"_blank",rel:"noopener noreferrer"},gp=s("59. \u87BA\u65CB\u77E9\u9635 II"),fp=t(`<p>\u7ED9\u4F60\u4E00\u4E2A\u6B63\u6574\u6570 <code>n</code> \uFF0C\u751F\u6210\u4E00\u4E2A\u5305\u542B <code>1</code> \u5230 <code>n2</code> \u6240\u6709\u5143\u7D20\uFF0C\u4E14\u5143\u7D20\u6309\u987A\u65F6\u9488\u987A\u5E8F\u87BA\u65CB\u6392\u5217\u7684 <code>n x n</code> \u6B63\u65B9\u5F62\u77E9\u9635 <code>matrix</code> \u3002</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/2541/202209161357638.png" alt="image-20220916135722526"></p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">generateMatrix</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> matrix <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> b <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> r <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token comment">// \u8D4B\u503C</span>
        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token comment">// \u7ED3\u675F\u6761\u4EF6</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>count <span class="token operator">&lt;=</span> n <span class="token operator">*</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// \u9876\u90E8\u4ECE\u5DE6\u5230\u53F3\u904D\u5386</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">&lt;=</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> l<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> r<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    matrix<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> count<span class="token operator">++</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token comment">// \u4E0A\u8FB9\u754C\u4E0B\u79FB</span>
                t<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// \u53F3\u8FB9\u754C\u4ECE\u4E0A\u5230\u4E0B\u904D\u5386</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> t<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> b<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">=</span> count<span class="token operator">++</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token comment">// \u53F3\u8FB9\u754C\u5DE6\u79FB</span>
                r<span class="token operator">--</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// \u5E95\u90E8\u4ECE\u53F3\u5230\u5DE6\u904D\u5386</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">&lt;=</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> r<span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> l<span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    matrix<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> count<span class="token operator">++</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token comment">// \u4E0B\u8FB9\u754C\u4E0A\u79FB</span>
                b<span class="token operator">--</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// \u5DE6\u8FB9\u754C\u4ECE\u4E0B\u5230\u4E0A\u904D\u5386</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> b<span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> t<span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">=</span> count<span class="token operator">++</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token comment">// \u5DE6\u8FB9\u754C\u53F3\u79FB</span>
                l<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> matrix<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-8-\u6211\u5199\u4E86\u9996\u8BD7-\u628A\u6ED1\u52A8\u7A97\u53E3\u7B97\u6CD5\u7B97\u6CD5\u53D8\u6210\u4E86\u9ED8\u5199\u9898" tabindex="-1"><a class="header-anchor" href="#_2-8-\u6211\u5199\u4E86\u9996\u8BD7-\u628A\u6ED1\u52A8\u7A97\u53E3\u7B97\u6CD5\u7B97\u6CD5\u53D8\u6210\u4E86\u9ED8\u5199\u9898" aria-hidden="true">#</a> 2.8 \u6211\u5199\u4E86\u9996\u8BD7\uFF0C\u628A\u6ED1\u52A8\u7A97\u53E3\u7B97\u6CD5\u7B97\u6CD5\u53D8\u6210\u4E86\u9ED8\u5199\u9898</h3><p><strong>\u6A21\u677F\uFF1A</strong></p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">/* \u6ED1\u52A8\u7A97\u53E3\u7B97\u6CD5\u6846\u67B6 */</span>
<span class="token keyword">void</span> <span class="token function">slidingWindow</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    unordered_map<span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">char</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">&gt;</span></span> window<span class="token punctuation">;</span>
    
    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>right <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// c \u662F\u5C06\u79FB\u5165\u7A97\u53E3\u7684\u5B57\u7B26</span>
        <span class="token keyword">char</span> c <span class="token operator">=</span> s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token comment">// \u589E\u5927\u7A97\u53E3</span>
        right<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token comment">// \u8FDB\u884C\u7A97\u53E3\u5185\u6570\u636E\u7684\u4E00\u7CFB\u5217\u66F4\u65B0</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

        <span class="token doc-comment comment">/*** debug \u8F93\u51FA\u7684\u4F4D\u7F6E ***/</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;window: [%d, %d)\\n&quot;</span><span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token doc-comment comment">/********************/</span>
        
        <span class="token comment">// \u5224\u65AD\u5DE6\u4FA7\u7A97\u53E3\u662F\u5426\u8981\u6536\u7F29</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>window needs shrink<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// d \u662F\u5C06\u79FB\u51FA\u7A97\u53E3\u7684\u5B57\u7B26</span>
            <span class="token keyword">char</span> d <span class="token operator">=</span> s<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token comment">// \u7F29\u5C0F\u7A97\u53E3</span>
            left<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token comment">// \u8FDB\u884C\u7A97\u53E3\u5185\u6570\u636E\u7684\u4E00\u7CFB\u5217\u66F4\u65B0</span>
            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>\u601D\u8003\uFF1A</strong></p><p>1\u3001\u4EC0\u4E48\u65F6\u5019\u5E94\u8BE5\u79FB\u52A8 <code>right</code> \u6269\u5927\u7A97\u53E3\uFF1F\u7A97\u53E3\u52A0\u5165\u5B57\u7B26\u65F6\uFF0C\u5E94\u8BE5\u66F4\u65B0\u54EA\u4E9B\u6570\u636E\uFF1F</p><p>2\u3001\u4EC0\u4E48\u65F6\u5019\u7A97\u53E3\u5E94\u8BE5\u6682\u505C\u6269\u5927\uFF0C\u5F00\u59CB\u79FB\u52A8 <code>left</code> \u7F29\u5C0F\u7A97\u53E3\uFF1F\u4ECE\u7A97\u53E3\u79FB\u51FA\u5B57\u7B26\u65F6\uFF0C\u5E94\u8BE5\u66F4\u65B0\u54EA\u4E9B\u6570\u636E\uFF1F</p><p>3\u3001\u6211\u4EEC\u8981\u7684\u7ED3\u679C\u5E94\u8BE5\u5728\u6269\u5927\u7A97\u53E3\u65F6\u8FD8\u662F\u7F29\u5C0F\u7A97\u53E3\u65F6\u8FDB\u884C\u66F4\u65B0\uFF1F</p>`,10),_p={id:"_76-\u6700\u5C0F\u8986\u76D6\u5B50\u4E32",tabindex:"-1"},xp=n("a",{class:"header-anchor",href:"#_76-\u6700\u5C0F\u8986\u76D6\u5B50\u4E32","aria-hidden":"true"},"#",-1),jp=s(),Np={href:"https://leetcode.cn/problems/minimum-window-substring/",target:"_blank",rel:"noopener noreferrer"},Sp=s("76. \u6700\u5C0F\u8986\u76D6\u5B50\u4E32"),Lp=t(`<p>\u7ED9\u4F60\u4E00\u4E2A\u5B57\u7B26\u4E32 <code>s</code> \u3001\u4E00\u4E2A\u5B57\u7B26\u4E32 <code>t</code> \u3002\u8FD4\u56DE <code>s</code> \u4E2D\u6DB5\u76D6 <code>t</code> \u6240\u6709\u5B57\u7B26\u7684\u6700\u5C0F\u5B50\u4E32\u3002\u5982\u679C <code>s</code> \u4E2D\u4E0D\u5B58\u5728\u6DB5\u76D6 <code>t</code> \u6240\u6709\u5B57\u7B26\u7684\u5B50\u4E32\uFF0C\u5219\u8FD4\u56DE\u7A7A\u5B57\u7B26\u4E32 <code>&quot;&quot;</code> \u3002</p><p><strong>\u793A\u4F8B 1\uFF1A</strong></p><p>\u8F93\u5165\uFF1As = &quot;ADOBECODEBANC&quot;, t = &quot;ABC&quot; \u8F93\u51FA\uFF1A&quot;BANC&quot;</p><p><strong>\u601D\u8DEF\uFF1A</strong></p><p>\u6ED1\u52A8\u7A97\u53E3\uFF0C\u58F0\u660E\u4E24\u4E2Amap\uFF08window\uFF0Cneed\uFF09\uFF0C\u7EF4\u62A4\u53D8\u91CF valid\uFF0C\u8BB0\u5F55\u6EE1\u8DB3\u6761\u4EF6\u7684\u5B57\u7B26\u6570\uFF0C\u58F0\u660E start\uFF0Clen\uFF0C\u8BB0\u5F55\u6700\u5C0F\u8986\u76D6\u5B50\u4E32\u7684\u4FE1\u606F</p><p>1.\u589E\u5927\u7A97\u53E3\u65F6\uFF0C\u7EF4\u62A4 window\uFF0Cvalid</p><p>2.\u5F53 valid == need.size() \u65F6\uFF0C\u53EF\u4EE5\u7F29\u5C0F\u7A97\u53E3</p><p>3.\u5F00\u59CB\u7F29\u5C0F\u7A97\u53E3\u65F6\uFF0C\u66F4\u65B0\u7ED3\u679C\uFF0C\u540C\u65F6\u4E5F\u8981\u7EF4\u62A4 window\uFF0Cvalid</p><p><strong>\u6CE8\u610F\uFF1A</strong></p><p>\u5305\u88C5\u7C7B\u7684\u6BD4\u8F83\u4F7F\u7528 <code>equals</code></p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">minWindow</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">,</span> <span class="token class-name">String</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// \u8BB0\u5F55\u7A97\u53E3\u7684map</span>
        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> window <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// \u8BB0\u5F55\u9700\u8981\u7684map</span>
        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> need <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// \u8BB0\u5F55\u6700\u5C0F\u8986\u76D6\u5B50\u4E32\u7684\u4FE1\u606F</span>
        <span class="token keyword">int</span> start <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> len <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>
        <span class="token comment">// \u7A97\u53E3\u6307\u9488\uFF0C\u5DE6\u95ED\u53F3\u5F00</span>
        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token comment">// \u6EE1\u8DB3\u6761\u4EF6\u7684\u5B57\u7B26\u6570</span>
        <span class="token keyword">int</span> valid <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token comment">// \u521D\u59CB\u5316 need</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> t<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            need<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> need<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// \u7ED3\u675F\u6761\u4EF6</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>right <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// \u79FB\u5165\u7A97\u53E3\u7684\u5B57\u7B26</span>
            <span class="token keyword">char</span> c <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
            right<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token comment">// \u66F4\u65B0\u64CD\u4F5C</span>
            window<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> window<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>need<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>need<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    valid<span class="token operator">++</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// \u5F00\u59CB\u7F29\u5C0F\u7A97\u53E3</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>valid <span class="token operator">==</span> need<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// \u66F4\u65B0\u7ED3\u679C</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left <span class="token operator">&lt;</span> len<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    start <span class="token operator">=</span> left<span class="token punctuation">;</span>
                    len <span class="token operator">=</span> right <span class="token operator">-</span> left<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token comment">// \u79FB\u51FA\u7A97\u53E3\u7684\u5B57\u7B26</span>
                <span class="token keyword">char</span> d <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
                left<span class="token operator">++</span><span class="token punctuation">;</span>
                <span class="token comment">// \u66F4\u65B0</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>need<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>need<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        valid<span class="token operator">--</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
                window<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> window<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> len <span class="token operator">==</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MAX_VALUE <span class="token operator">?</span> <span class="token string">&quot;&quot;</span> <span class="token operator">:</span> s<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> start <span class="token operator">+</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,11),qp={id:"_567-\u5B57\u7B26\u4E32\u7684\u6392\u5217",tabindex:"-1"},Tp=n("a",{class:"header-anchor",href:"#_567-\u5B57\u7B26\u4E32\u7684\u6392\u5217","aria-hidden":"true"},"#",-1),Ip=s(),Ap={href:"https://leetcode.cn/problems/permutation-in-string/",target:"_blank",rel:"noopener noreferrer"},Ep=s("567. \u5B57\u7B26\u4E32\u7684\u6392\u5217"),Op=t(`<p>\u7ED9\u4F60\u4E24\u4E2A\u5B57\u7B26\u4E32 s1 \u548C s2 \uFF0C\u5199\u4E00\u4E2A\u51FD\u6570\u6765\u5224\u65AD s2 \u662F\u5426\u5305\u542B s1 \u7684\u6392\u5217\u3002\u5982\u679C\u662F\uFF0C\u8FD4\u56DE true \uFF1B\u5426\u5219\uFF0C\u8FD4\u56DE false \u3002</p><p>\u6362\u53E5\u8BDD\u8BF4\uFF0Cs1 \u7684\u6392\u5217\u4E4B\u4E00\u662F s2 \u7684 \u5B50\u4E32 \u3002</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/2541/202209161357312.png" alt="image-20220916135745135"></p><p><strong>\u601D\u8DEF\uFF1A</strong></p><p>\u540C\u6700\u5C0F\u8986\u76D6\u5B50\u4E32\uFF0C\u5F53 <code>valid == need.size()</code> \u65F6\uFF0C\u5982\u679C <code>right - left == s1.length()</code>\uFF0C\u5219\u8FD4\u56DE true</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">checkInclusion</span><span class="token punctuation">(</span><span class="token class-name">String</span> s1<span class="token punctuation">,</span> <span class="token class-name">String</span> s2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// \u8BB0\u5F55\u7A97\u53E3\u7684map</span>
        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> window <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// \u8BB0\u5F55\u9700\u8981\u7684map</span>
        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> need <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// \u7A97\u53E3\u6307\u9488\uFF0C\u5DE6\u95ED\u53F3\u5F00</span>
        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token comment">// \u6EE1\u8DB3\u6761\u4EF6\u7684\u5B57\u7B26\u6570</span>
        <span class="token keyword">int</span> valid <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token comment">// \u521D\u59CB\u5316 need</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            need<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> need<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// \u7ED3\u675F\u6761\u4EF6</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>right <span class="token operator">&lt;</span> s2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// \u79FB\u5165\u7A97\u53E3\u7684\u5B57\u7B26</span>
            <span class="token keyword">char</span> c <span class="token operator">=</span> s2<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
            right<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token comment">// \u66F4\u65B0\u64CD\u4F5C</span>
            window<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> window<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>need<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>need<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    valid<span class="token operator">++</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// \u5F00\u59CB\u7F29\u5C0F\u7A97\u53E3</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>valid <span class="token operator">==</span> need<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// \u66F4\u65B0\u7ED3\u679C</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left <span class="token operator">==</span> s1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// \u7A97\u53E3\u5927\u5C0F\u7B49\u4E8Es1.length()</span>
                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token comment">// \u79FB\u51FA\u7A97\u53E3\u7684\u5B57\u7B26</span>
                <span class="token keyword">char</span> d <span class="token operator">=</span> s2<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
                left<span class="token operator">++</span><span class="token punctuation">;</span>
                <span class="token comment">// \u66F4\u65B0</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>need<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>need<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        valid<span class="token operator">--</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
                window<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> window<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>   
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),Mp={id:"_438-\u627E\u5230\u5B57\u7B26\u4E32\u4E2D\u6240\u6709\u5B57\u6BCD\u5F02\u4F4D\u8BCD",tabindex:"-1"},zp=n("a",{class:"header-anchor",href:"#_438-\u627E\u5230\u5B57\u7B26\u4E32\u4E2D\u6240\u6709\u5B57\u6BCD\u5F02\u4F4D\u8BCD","aria-hidden":"true"},"#",-1),Cp=s(),Dp={href:"https://leetcode.cn/problems/find-all-anagrams-in-a-string/",target:"_blank",rel:"noopener noreferrer"},Rp=s("438. \u627E\u5230\u5B57\u7B26\u4E32\u4E2D\u6240\u6709\u5B57\u6BCD\u5F02\u4F4D\u8BCD"),Bp=t(`<p>\u7ED9\u5B9A\u4E24\u4E2A\u5B57\u7B26\u4E32 s \u548C p\uFF0C\u627E\u5230 s \u4E2D\u6240\u6709 p \u7684 \u5F02\u4F4D\u8BCD \u7684\u5B50\u4E32\uFF0C\u8FD4\u56DE\u8FD9\u4E9B\u5B50\u4E32\u7684\u8D77\u59CB\u7D22\u5F15\u3002\u4E0D\u8003\u8651\u7B54\u6848\u8F93\u51FA\u7684\u987A\u5E8F\u3002</p><p>\u5F02\u4F4D\u8BCD \u6307\u7531\u76F8\u540C\u5B57\u6BCD\u91CD\u6392\u5217\u5F62\u6210\u7684\u5B57\u7B26\u4E32\uFF08\u5305\u62EC\u76F8\u540C\u7684\u5B57\u7B26\u4E32\uFF09\u3002</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/2541/202209161357087.png" alt="image-20220916135755921"></p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> <span class="token function">findAnagrams</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">,</span> <span class="token class-name">String</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// \u8BB0\u5F55\u7A97\u53E3\u7684map</span>
        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> window <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// \u8BB0\u5F55\u9700\u8981\u7684map</span>
        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> need <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// \u7A97\u53E3\u6307\u9488\uFF0C\u5DE6\u95ED\u53F3\u5F00</span>
        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token comment">// \u6EE1\u8DB3\u6761\u4EF6\u7684\u5B57\u7B26\u6570</span>
        <span class="token keyword">int</span> valid <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token comment">// \u7ED3\u679C</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// \u521D\u59CB\u5316 need</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> p<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            need<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> need<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// \u7ED3\u675F\u6761\u4EF6</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>right <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// \u79FB\u5165\u7A97\u53E3\u7684\u5B57\u7B26</span>
            <span class="token keyword">char</span> c <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
            right<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token comment">// \u66F4\u65B0\u64CD\u4F5C</span>
            window<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> window<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>need<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>need<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    valid<span class="token operator">++</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
             <span class="token comment">// \u5F00\u59CB\u7F29\u5C0F\u7A97\u53E3</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>valid <span class="token operator">==</span> need<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// \u66F4\u65B0\u7ED3\u679C</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left <span class="token operator">==</span> p<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// \u7A97\u53E3\u5927\u5C0F\u7B49\u4E8Ep.length()\uFF0C\u8BB0\u5F55\u8D77\u59CB\u7D22\u5F15</span>
                    res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token comment">// \u79FB\u51FA\u7A97\u53E3\u7684\u5B57\u7B26</span>
                <span class="token keyword">char</span> d <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
                left<span class="token operator">++</span><span class="token punctuation">;</span>
                <span class="token comment">// \u66F4\u65B0</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>need<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>need<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        valid<span class="token operator">--</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
                window<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> window<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>   
        <span class="token keyword">return</span> res<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),Vp={id:"_3-\u65E0\u91CD\u590D\u5B57\u7B26\u7684\u6700\u957F\u5B50\u4E32",tabindex:"-1"},Pp=n("a",{class:"header-anchor",href:"#_3-\u65E0\u91CD\u590D\u5B57\u7B26\u7684\u6700\u957F\u5B50\u4E32","aria-hidden":"true"},"#",-1),Up=s(),Hp={href:"https://leetcode.cn/problems/longest-substring-without-repeating-characters/",target:"_blank",rel:"noopener noreferrer"},Kp=s("3. \u65E0\u91CD\u590D\u5B57\u7B26\u7684\u6700\u957F\u5B50\u4E32"),Qp=t(`<p>\u7ED9\u5B9A\u4E00\u4E2A\u5B57\u7B26\u4E32 <code>s</code> \uFF0C\u8BF7\u4F60\u627E\u51FA\u5176\u4E2D\u4E0D\u542B\u6709\u91CD\u590D\u5B57\u7B26\u7684 <strong>\u6700\u957F\u5B50\u4E32</strong> \u7684\u957F\u5EA6\u3002</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/2541/202209161358466.png" alt="image-20220916135808366"></p><p><strong>\u601D\u8DEF\uFF1A</strong></p><p>\u5F53 window.get(c) &gt;= 2\u65F6\uFF0C\u9700\u8981\u7F29\u5C0F\u7A97\u53E3</p><p><strong>\u6CE8\u610F\uFF1A</strong></p><p>\u6BCF\u6B21\u79FB\u52A8\u7A97\u53E3\u90FD\u8981\u66F4\u65B0\u6570\u636E</p><p>\u590D\u6742\u5EA6\u5206\u6790\uFF1A</p><ul><li>\u65F6\u95F4\u590D\u6742\u5EA6\uFF1AO(N),\u5176\u4E2DN\u662F\u5B57\u7B26\u4E32\u7684\u957F\u5EA6\u3002\u5DE6\u6307\u9488\u548C\u53F3\u6307\u9488\u5206\u522B\u4F1A\u904D\u5386\u6574\u4E2A\u5B57\u7B26\u4E32\u4E00\u6B21\u3002</li><li>\u7A7A\u95F4\u590D\u6742\u5EA6\uFF1AO(|\u03A3|),\u5176\u4E2D\u03A3\u8868\u793A\u5B57\u7B26\u96C6\uFF08\u5373\u5B57\u7B26\u4E32\u4E2D\u53EF\u4EE5\u51FA\u73B0\u7684\u5B57\u7B26\uFF09\uFF0C\u8868\u793A\u5B57\u7B26\u96C6\u7684\u5927\u5C0F\u3002\u5728\u672C\u9898\u4E2D\u6CA1\u6709\u660E\u786E\u8BF4\u660E\u5B57\u7B26\u96C6\uFF0C\u56E0\u6B64\u53EF\u4EE5\u9ED8\u8BA4\u4E3A\u6240\u6709ASCII\u7801\u5728[0,128)\u5185\u7684\u5B57\u7B26\uFF0C\u5373 |\u03A3| = 128\u3002\u6211\u4EEC\u9700\u8981\u7528\u5230\u54C8\u5E0C\u96C6\u5408\u6765\u5B58\u50A8\u51FA\u73B0\u8FC7\u7684\u5B57\u7B26\uFF0C\u800C\u5B57\u7B26\u6700\u591A\u6709|\u03A3|\u4E2A\uFF0C\u56E0\u6B64\u7A7A\u95F4\u590D\u6742\u5EA6\u4E3AO(|\u03A3|)\u3002</li></ul><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">lengthOfLongestSubstring</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// \u8BB0\u5F55\u7A97\u53E3\u7684map</span>
        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> window <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// \u7A97\u53E3\u6307\u9488\uFF0C\u5DE6\u95ED\u53F3\u5F00</span>
        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token comment">// \u6700\u957F\u65E0\u91CD\u590D\u5B50\u4E32</span>
        <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token comment">// \u7ED3\u675F\u6761\u4EF6</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>right <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// \u79FB\u5165\u7A97\u53E3\u7684\u5B57\u7B26</span>
            <span class="token keyword">char</span> c <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
            right<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token comment">// \u66F4\u65B0\u64CD\u4F5C</span>
            window<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> window<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
             <span class="token comment">// \u6709\u91CD\u590D\u5B57\u7B26\u5F00\u59CB\u7F29\u5C0F\u7A97\u53E3</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// \u79FB\u51FA\u7A97\u53E3\u7684\u5B57\u7B26</span>
                <span class="token keyword">char</span> d <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
                left<span class="token operator">++</span><span class="token punctuation">;</span>
                <span class="token comment">// \u66F4\u65B0</span>
                window<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> window<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// \u6CE8\u610F\uFF1A\u8FD9\u91CC\u66F4\u65B0 len\uFF0C\u56E0\u4E3A\u6BCF\u6B21\u79FB\u52A8\u7A97\u53E3\u90FD\u8981\u66F4\u65B0</span>
            len <span class="token operator">=</span> len <span class="token operator">&gt;</span> right <span class="token operator">-</span> left <span class="token operator">?</span> len <span class="token operator">:</span> right <span class="token operator">-</span> left<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>   
        <span class="token keyword">return</span> len<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-9-\u6ED1\u52A8\u7A97\u53E3\u7B97\u6CD5\u5EF6\u4F38-rabin-karp-\u5B57\u7B26\u5339\u914D\u7B97\u6CD5" tabindex="-1"><a class="header-anchor" href="#_2-9-\u6ED1\u52A8\u7A97\u53E3\u7B97\u6CD5\u5EF6\u4F38-rabin-karp-\u5B57\u7B26\u5339\u914D\u7B97\u6CD5" aria-hidden="true">#</a> 2.9 \u6ED1\u52A8\u7A97\u53E3\u7B97\u6CD5\u5EF6\u4F38\uFF1ARABIN KARP \u5B57\u7B26\u5339\u914D\u7B97\u6CD5</h3>`,10),Gp={id:"_187-\u91CD\u590D\u7684dna\u5E8F\u5217",tabindex:"-1"},Fp=n("a",{class:"header-anchor",href:"#_187-\u91CD\u590D\u7684dna\u5E8F\u5217","aria-hidden":"true"},"#",-1),Wp=s(),Xp={href:"https://leetcode.cn/problems/repeated-dna-sequences/",target:"_blank",rel:"noopener noreferrer"},Yp=s("187. \u91CD\u590D\u7684DNA\u5E8F\u5217"),Jp=t(`<p>DNA\u5E8F\u5217 \u7531\u4E00\u7CFB\u5217\u6838\u82F7\u9178\u7EC4\u6210\uFF0C\u7F29\u5199\u4E3A &#39;A&#39;, &#39;C&#39;, &#39;G&#39; \u548C &#39;T&#39;.\u3002</p><p>\u4F8B\u5982\uFF0C&quot;ACGAATTCCG&quot; \u662F\u4E00\u4E2A DNA\u5E8F\u5217 \u3002 \u5728\u7814\u7A76 DNA \u65F6\uFF0C\u8BC6\u522B DNA \u4E2D\u7684\u91CD\u590D\u5E8F\u5217\u975E\u5E38\u6709\u7528\u3002</p><p>\u7ED9\u5B9A\u4E00\u4E2A\u8868\u793A DNA\u5E8F\u5217 \u7684\u5B57\u7B26\u4E32 s \uFF0C\u8FD4\u56DE\u6240\u6709\u5728 DNA \u5206\u5B50\u4E2D\u51FA\u73B0\u4E0D\u6B62\u4E00\u6B21\u7684 \u957F\u5EA6\u4E3A 10 \u7684\u5E8F\u5217(\u5B50\u5B57\u7B26\u4E32)\u3002\u4F60\u53EF\u4EE5\u6309 \u4EFB\u610F\u987A\u5E8F \u8FD4\u56DE\u7B54\u6848\u3002</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/2541/202209161358182.png" alt="image-20220916135829041"></p><p><strong>\u601D\u8DEF\uFF1A</strong></p><p>\u904D\u5386\u6240\u6709\u957F\u5EA6\u4E3A10\u7684\u5B50\u5B57\u7B26\u4E32\uFF0C\u58F0\u660E\u4E24\u4E2A HashSet\uFF0C\u8BB0\u5F55\u51FA\u73B0\u8FC7\u7684\u5B57\u7B26\u4E32 \u548C \u51FA\u73B0\u8FC7\u4E24\u6B21\u6216\u4E24\u6B21\u4EE5\u4E0A\u7684\u5B57\u7B26\u4E32</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">findRepeatedDnaSequences</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> n <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token comment">// \u8BB0\u5F55\u51FA\u73B0\u8FC7\u7684\u5B50\u4E32</span>
        <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> appeared <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// \u8BB0\u5F55\u51FA\u73B0\u8FC7\u4E0D\u6B62\u4E00\u6B21\u7684\u5B50\u4E32</span>
        <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">+</span> <span class="token number">10</span> <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// \u5DE6\u95ED\u53F3\u5F00</span>
            <span class="token class-name">String</span> str <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>appeared<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// \u7B2C\u4E00\u6B21\u51FA\u73B0</span>
                appeared<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token comment">// \u51FA\u73B0\u4E0D\u6B62\u4E00\u6B21</span>
                res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7),Zp={id:"_28-\u5B9E\u73B0-strstr",tabindex:"-1"},$p=n("a",{class:"header-anchor",href:"#_28-\u5B9E\u73B0-strstr","aria-hidden":"true"},"#",-1),nt=s(),st={href:"https://leetcode.cn/problems/implement-strstr/",target:"_blank",rel:"noopener noreferrer"},at=s("28. \u5B9E\u73B0 strStr()"),pt=t(`<p>\u5B9E\u73B0 strStr() \u51FD\u6570\u3002</p><p>\u7ED9\u4F60\u4E24\u4E2A\u5B57\u7B26\u4E32 haystack \u548C needle \uFF0C\u8BF7\u4F60\u5728 haystack \u5B57\u7B26\u4E32\u4E2D\u627E\u51FA needle \u5B57\u7B26\u4E32\u51FA\u73B0\u7684\u7B2C\u4E00\u4E2A\u4F4D\u7F6E\uFF08\u4E0B\u6807\u4ECE 0 \u5F00\u59CB\uFF09\u3002\u5982\u679C\u4E0D\u5B58\u5728\uFF0C\u5219\u8FD4\u56DE -1 \u3002</p><p>\u8BF4\u660E\uFF1A</p><p>\u5F53 needle \u662F\u7A7A\u5B57\u7B26\u4E32\u65F6\uFF0C\u6211\u4EEC\u5E94\u5F53\u8FD4\u56DE\u4EC0\u4E48\u503C\u5462\uFF1F\u8FD9\u662F\u4E00\u4E2A\u5728\u9762\u8BD5\u4E2D\u5F88\u597D\u7684\u95EE\u9898\u3002</p><p>\u5BF9\u4E8E\u672C\u9898\u800C\u8A00\uFF0C\u5F53 needle \u662F\u7A7A\u5B57\u7B26\u4E32\u65F6\u6211\u4EEC\u5E94\u5F53\u8FD4\u56DE 0 \u3002\u8FD9\u4E0E C \u8BED\u8A00\u7684 strstr() \u4EE5\u53CA Java \u7684 indexOf() \u5B9A\u4E49\u76F8\u7B26\u3002</p><p><strong>\u601D\u8DEF\uFF1A</strong></p><p>\u66B4\u529B\u7B97\u6CD5</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">strStr</span><span class="token punctuation">(</span><span class="token class-name">String</span> haystack<span class="token punctuation">,</span> <span class="token class-name">String</span> needle<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> n <span class="token operator">=</span> haystack<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> m <span class="token operator">=</span> needle<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">+</span> m <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">String</span> subStr <span class="token operator">=</span> haystack<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> i <span class="token operator">+</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>subStr<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>needle<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> i<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-10-\u5E26\u6743\u91CD\u7684\u968F\u673A\u9009\u62E9\u7B97\u6CD5" tabindex="-1"><a class="header-anchor" href="#_2-10-\u5E26\u6743\u91CD\u7684\u968F\u673A\u9009\u62E9\u7B97\u6CD5" aria-hidden="true">#</a> 2.10 \u5E26\u6743\u91CD\u7684\u968F\u673A\u9009\u62E9\u7B97\u6CD5</h3>`,9),tt={id:"_528-\u6309\u6743\u91CD\u968F\u673A\u9009\u62E9",tabindex:"-1"},et=n("a",{class:"header-anchor",href:"#_528-\u6309\u6743\u91CD\u968F\u673A\u9009\u62E9","aria-hidden":"true"},"#",-1),ot=s(),ct={href:"https://leetcode.cn/problems/random-pick-with-weight/",target:"_blank",rel:"noopener noreferrer"},lt=s("528. \u6309\u6743\u91CD\u968F\u673A\u9009\u62E9"),it=t(`<p>\u7ED9\u4F60\u4E00\u4E2A \u4E0B\u6807\u4ECE 0 \u5F00\u59CB \u7684\u6B63\u6574\u6570\u6570\u7EC4 w \uFF0C\u5176\u4E2D w[i] \u4EE3\u8868\u7B2C i \u4E2A\u4E0B\u6807\u7684\u6743\u91CD\u3002</p><p>\u8BF7\u4F60\u5B9E\u73B0\u4E00\u4E2A\u51FD\u6570 pickIndex \uFF0C\u5B83\u53EF\u4EE5 \u968F\u673A\u5730 \u4ECE\u8303\u56F4 [0, w.length - 1] \u5185\uFF08\u542B 0 \u548C w.length - 1\uFF09\u9009\u51FA\u5E76\u8FD4\u56DE\u4E00\u4E2A\u4E0B\u6807\u3002\u9009\u53D6\u4E0B\u6807 i \u7684 \u6982\u7387 \u4E3A w[i] / sum(w) \u3002</p><p>\u4F8B\u5982\uFF0C\u5BF9\u4E8E w = [1, 3]\uFF0C\u6311\u9009\u4E0B\u6807 0 \u7684\u6982\u7387\u4E3A 1 / (1 + 3) = 0.25 \uFF08\u5373\uFF0C25%\uFF09\uFF0C\u800C\u9009\u53D6\u4E0B\u6807 1 \u7684\u6982\u7387\u4E3A 3 / (1 + 3) = 0.75\uFF08\u5373\uFF0C75%\uFF09\u3002</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/2541/image-20220720120019756.png" alt="image-20220720120019756"></p><p><strong>\u601D\u8DEF\uFF1A</strong></p><p>1.\u751F\u6210\u524D\u7F00\u548C\u6570\u7EC4 preSum</p><p>2.\u968F\u673A\u751F\u6210 preSum \u5185\u7684\u968F\u673A\u6570\uFF0C\u6839\u636E\u4E8C\u5206\u641C\u7D22\uFF08\u5BFB\u627E\u5DE6\u4FA7\u8FB9\u754C\uFF09\u627E\u5230\u5927\u4E8E\u7B49\u4E8E\u968F\u673A\u6570\u7684\u6700\u5C0F\u7D22\u5F15</p><p>3.\u7D22\u5F15\u51CF1\uFF0C\u56E0\u4E3A\u539F\u6570\u7EC4\u548C\u524D\u7F00\u548C\u6570\u7EC4\u67091\u4F4D\u7684\u504F\u5DEE</p><p><strong>\u6CE8\u610F\uFF1A</strong></p><p>1.\u968F\u673A\u6570\u7684\u53D6\u503C\u662F [1,preSum[preSum.length - 1]]\uFF0C\u56E0\u4E3A 0 \u53EA\u662F\u4E00\u4E2A\u5360\u4F4D\u7B26</p><p>2.\u5BFB\u627E\u5DE6\u4FA7\u8FB9\u754C\u7684\u4E8C\u5206\u641C\u7D22\u6CD5</p><p>\u5F53\u76EE\u6807\u5143\u7D20\u4E0D\u5B58\u5728\u7684\u65F6\u5019\uFF0C\u8FD4\u56DE\u503C\u4E3A\uFF1A</p><p>\u200B 1.\u5927\u4E8E\u7B49\u4E8E target \u7684\u6700\u5C0F\u7D22\u5F15\u503C</p><p>\u200B 2.target \u5728 nums \u6570\u7EC4\u4E2D\u7684\u4F4D\u7F6E</p><p>\u200B 3.nums \u6570\u7EC4\u4E2D\u5C0F\u4E8E target \u7684\u5143\u7D20\u4E2A\u6570</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>

    <span class="token comment">// \u524D\u7F00\u548C\u6570\u7EC4</span>
    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> preSum<span class="token punctuation">;</span>
    <span class="token comment">// \u751F\u6210\u968F\u673A\u6570</span>
    <span class="token class-name">Random</span> rand <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> w<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// \u751F\u6210\u524D\u7F00\u548C</span>
        preSum <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>w<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        preSum<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> preSum<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            preSum<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> preSum<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> w<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">pickIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// \u751F\u6210 [1,preSum[preSum.length - 1]] \u4E4B\u95F4\u7684\u968F\u673A\u6570</span>
        <span class="token keyword">int</span> target <span class="token operator">=</span> rand<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>preSum<span class="token punctuation">[</span>preSum<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token function">findLeft</span><span class="token punctuation">(</span>preSum<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// \u539F\u6570\u7EC4\u4E0E\u524D\u7F00\u548C\u6570\u7EC4\u6709\u4E00\u4F4D\u7684\u504F\u5DEE</span>
        <span class="token keyword">return</span> index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>

    <span class="token comment">// \u5BFB\u627E\u5DE6\u4FA7\u8FB9\u754C</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">findLeft</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">,</span> right <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> mid <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                right <span class="token operator">=</span> mid<span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> left<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * Your Solution object will be instantiated and called as such:
 * Solution obj = new Solution(w);
 * int param_1 = obj.pickIndex();
 */</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-11-\u7530\u5FCC\u8D5B\u9A6C\u80CC\u540E\u7684\u7B97\u6CD5\u51B3\u7B56" tabindex="-1"><a class="header-anchor" href="#_2-11-\u7530\u5FCC\u8D5B\u9A6C\u80CC\u540E\u7684\u7B97\u6CD5\u51B3\u7B56" aria-hidden="true">#</a> 2.11 \u7530\u5FCC\u8D5B\u9A6C\u80CC\u540E\u7684\u7B97\u6CD5\u51B3\u7B56</h3>`,17),ut={id:"_870-\u4F18\u52BF\u6D17\u724C",tabindex:"-1"},kt=n("a",{class:"header-anchor",href:"#_870-\u4F18\u52BF\u6D17\u724C","aria-hidden":"true"},"#",-1),rt=s(),dt={href:"https://leetcode.cn/problems/advantage-shuffle/",target:"_blank",rel:"noopener noreferrer"},vt=s("870. \u4F18\u52BF\u6D17\u724C"),mt=t(`<p>\u7ED9\u5B9A\u4E24\u4E2A\u5927\u5C0F\u76F8\u7B49\u7684\u6570\u7EC4 nums1 \u548C nums2\uFF0Cnums1 \u76F8\u5BF9\u4E8E nums \u7684\u4F18\u52BF\u53EF\u4EE5\u7528\u6EE1\u8DB3 nums1[i] &gt; nums2[i] \u7684\u7D22\u5F15 i \u7684\u6570\u76EE\u6765\u63CF\u8FF0\u3002</p><p>\u8FD4\u56DE nums1 \u7684\u4EFB\u610F\u6392\u5217\uFF0C\u4F7F\u5176\u76F8\u5BF9\u4E8E nums2 \u7684\u4F18\u52BF\u6700\u5927\u5316\u3002</p><p><strong>\u601D\u8DEF\uFF1A</strong></p><p>\u5BF9 num1 \u5347\u5E8F\u6392\u5217\uFF0C nums2 \u964D\u5E8F\u6392\u5217\uFF08\u4F7F\u7528\u4E8C\u53C9\u5806\uFF0C\u56E0\u4E3A\u6211\u4EEC\u4E0D\u80FD\u591F\u6539\u53D8 nums2 \u7684\u987A\u5E8F\uFF09\uFF0C\u63A5\u7740\u4F7F\u7528\u53CC\u6307\u9488\uFF0C\u80FD\u80DC\u5C31\u81EA\u5DF1\u4E0A\uFF0C\u4E0D\u80FD\u5C31\u9009\u4E00\u4E2A\u6700\u5C0F\u7684\u4E0A\u3002</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">advantageCount</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums1<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// \u5BF9 nums1 \u6392\u5E8F</span>
        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>nums1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// \u5BF9 nums2 \u964D\u5E8F\uFF0C\u5E76\u4E14\u4E0D\u80FD\u6539\u53D8\u987A\u5E8F</span>
        <span class="token class-name">PriorityQueue</span><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> maxpq <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">(</span>arr1<span class="token punctuation">,</span> arr2<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> arr2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> arr1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums2<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            maxpq<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>i<span class="token punctuation">,</span> nums2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">int</span> n <span class="token operator">=</span> nums1<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>maxpq<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums <span class="token operator">=</span> maxpq<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> index <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> maxVal <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums1<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">&gt;</span> maxVal<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// \u53EF\u4EE5\u6253\u8FC7</span>
                res<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> nums1<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token comment">// \u6307\u9488\u53F3\u79FB</span>
                right<span class="token operator">--</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>  <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token comment">// \u62FF\u6700\u5C0F\u7684\u4E0A</span>
                res<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> nums1<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>
                left<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> res<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-12-\u4E00\u9053\u6570\u7EC4\u53BB\u91CD\u7684\u7B97\u6CD5\u9898\u628A\u6211\u6574\u4E0D\u4F1A\u4E86" tabindex="-1"><a class="header-anchor" href="#_2-12-\u4E00\u9053\u6570\u7EC4\u53BB\u91CD\u7684\u7B97\u6CD5\u9898\u628A\u6211\u6574\u4E0D\u4F1A\u4E86" aria-hidden="true">#</a> 2.12 \u4E00\u9053\u6570\u7EC4\u53BB\u91CD\u7684\u7B97\u6CD5\u9898\u628A\u6211\u6574\u4E0D\u4F1A\u4E86</h3>`,6),bt={id:"_316-\u53BB\u9664\u91CD\u590D\u5B57\u6BCD",tabindex:"-1"},ht=n("a",{class:"header-anchor",href:"#_316-\u53BB\u9664\u91CD\u590D\u5B57\u6BCD","aria-hidden":"true"},"#",-1),wt=s(),yt={href:"https://leetcode.cn/problems/remove-duplicate-letters/",target:"_blank",rel:"noopener noreferrer"},gt=s("316. \u53BB\u9664\u91CD\u590D\u5B57\u6BCD"),ft=t(`<p>\u7ED9\u4F60\u4E00\u4E2A\u5B57\u7B26\u4E32 <code>s</code> \uFF0C\u8BF7\u4F60\u53BB\u9664\u5B57\u7B26\u4E32\u4E2D\u91CD\u590D\u7684\u5B57\u6BCD\uFF0C\u4F7F\u5F97\u6BCF\u4E2A\u5B57\u6BCD\u53EA\u51FA\u73B0\u4E00\u6B21\u3002\u9700\u4FDD\u8BC1 <strong>\u8FD4\u56DE\u7ED3\u679C\u7684\u5B57\u5178\u5E8F\u6700\u5C0F</strong>\uFF08\u8981\u6C42\u4E0D\u80FD\u6253\u4E71\u5176\u4ED6\u5B57\u7B26\u7684\u76F8\u5BF9\u4F4D\u7F6E\uFF09\u3002</p><p><strong>\u793A\u4F8B 1\uFF1A</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>\u8F93\u5165\uFF1As = &quot;bcabc&quot;
\u8F93\u51FA\uFF1A&quot;abc&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>\u793A\u4F8B 2\uFF1A</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>\u8F93\u5165\uFF1As = &quot;cbacdcbc&quot;
\u8F93\u51FA\uFF1A&quot;acdb&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>\u601D\u8DEF\uFF1A</strong></p><p>1.\u53BB\u91CD\u3002\u4F7F\u7528 <code>instack[256]</code> \u6570\u7EC4\u8BB0\u5F55\u51FA\u73B0\u8FC7\u7684\u5B57\u7B26</p><p>2.\u4FDD\u6301\u76F8\u5BF9\u4F4D\u7F6E\u3002\u4F7F\u7528 <code>stack</code>,\u5373\u53EF\u4FDD\u6301\u987A\u5E8F\uFF0C\u6700\u540E\u7ED3\u679C\u9700\u8981 <code>reverse()</code></p><p>3.\u5B57\u5178\u5E8F\u6700\u5C0F\u3002<code>peek()</code>\u4E00\u4E0B\uFF0C\u5982\u679C\u6808\u5185\u7684\u5143\u7D20\u6BD4\u5F53\u524D\u5143\u7D20\u8981\u5927\uFF0C\u53EF\u80FD\u5C31\u8981 <code>pop()</code>\u51FA\u6765\uFF08\u5F53\u6808\u5185\u7684\u8FD9\u4E2A\u5143\u7D20\u540E\u9762\u8FD8\u4F1A\u51FA\u73B0\u65F6\uFF0C\u5C31\u9700\u8981 pop\uFF09\uFF0C\u4F7F\u7528 <code>count[256]</code> \u6570\u7EC4\u6765\u8BB0\u5F55 \u5269\u4F59\u7684\u5143\u7D20\u4E2A\u6570</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">removeDuplicateLetters</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// \u5B58\u653E\u5143\u7D20\u7684\u6808</span>
        <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">&gt;</span></span> sta <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// \u8BB0\u5F55\u51FA\u73B0\u8FC7\u7684\u5B57\u7B26,ASCII\u7801 \u7528 256 \u8DB3\u591F\u4E86</span>
        <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> inStack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token comment">// \u8BB0\u5F55\u5B57\u7B26\u4E2A\u6570</span>
        <span class="token keyword">int</span> n <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> count <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            count<span class="token punctuation">[</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">char</span> c <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// \u4E2A\u6570\u51CF 1</span>
            count<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>
            <span class="token comment">// \u51FA\u73B0\u8FC7</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>inStack<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
            <span class="token comment">// \u5F53\u524D\u5143\u7D20 c \u5C0F\u4E8E\u6808\u5185\u7684\u5143\u7D20</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>sta<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> c <span class="token operator">&lt;</span> sta<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// \u540E\u9762\u4E0D\u4F1A\u518D\u51FA\u73B0\u8BE5\u5143\u7D20\u4E86\uFF0C\u4E0D\u80FD pop</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>count<span class="token punctuation">[</span>sta<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token keyword">char</span> ch <span class="token operator">=</span> sta<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                inStack<span class="token punctuation">[</span>ch<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// \u8FDB\u6808</span>
            sta<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// \u6807\u8BB0\u4E3A\u51FA\u73B0</span>
            inStack<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>sta<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>sta<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// \u7ED3\u679C\u9700\u8981\u53CD\u8F6C\uFF0C\u56E0\u4E3A\u662F\u6808</span>
        <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-13-\u5E38\u6570\u65F6\u95F4\u5220\u9664-\u67E5\u627E\u6570\u7EC4\u4E2D\u7684\u4EFB\u610F\u5143\u7D20" tabindex="-1"><a class="header-anchor" href="#_2-13-\u5E38\u6570\u65F6\u95F4\u5220\u9664-\u67E5\u627E\u6570\u7EC4\u4E2D\u7684\u4EFB\u610F\u5143\u7D20" aria-hidden="true">#</a> 2.13 \u5E38\u6570\u65F6\u95F4\u5220\u9664/\u67E5\u627E\u6570\u7EC4\u4E2D\u7684\u4EFB\u610F\u5143\u7D20</h3>`,11),_t={id:"_380-o-1-\u65F6\u95F4\u63D2\u5165\u3001\u5220\u9664\u548C\u83B7\u53D6\u968F\u673A\u5143\u7D20",tabindex:"-1"},xt=n("a",{class:"header-anchor",href:"#_380-o-1-\u65F6\u95F4\u63D2\u5165\u3001\u5220\u9664\u548C\u83B7\u53D6\u968F\u673A\u5143\u7D20","aria-hidden":"true"},"#",-1),jt=s(),Nt={href:"https://leetcode.cn/problems/insert-delete-getrandom-o1/",target:"_blank",rel:"noopener noreferrer"},St=s("380. O(1) \u65F6\u95F4\u63D2\u5165\u3001\u5220\u9664\u548C\u83B7\u53D6\u968F\u673A\u5143\u7D20"),Lt=t(`<p>\u5B9E\u73B0RandomizedSet \u7C7B\uFF1A</p><p>RandomizedSet() \u521D\u59CB\u5316 RandomizedSet \u5BF9\u8C61 bool insert(int val) \u5F53\u5143\u7D20 val \u4E0D\u5B58\u5728\u65F6\uFF0C\u5411\u96C6\u5408\u4E2D\u63D2\u5165\u8BE5\u9879\uFF0C\u5E76\u8FD4\u56DE true \uFF1B\u5426\u5219\uFF0C\u8FD4\u56DE false \u3002 bool remove(int val) \u5F53\u5143\u7D20 val \u5B58\u5728\u65F6\uFF0C\u4ECE\u96C6\u5408\u4E2D\u79FB\u9664\u8BE5\u9879\uFF0C\u5E76\u8FD4\u56DE true \uFF1B\u5426\u5219\uFF0C\u8FD4\u56DE false \u3002 int getRandom() \u968F\u673A\u8FD4\u56DE\u73B0\u6709\u96C6\u5408\u4E2D\u7684\u4E00\u9879\uFF08\u6D4B\u8BD5\u7528\u4F8B\u4FDD\u8BC1\u8C03\u7528\u6B64\u65B9\u6CD5\u65F6\u96C6\u5408\u4E2D\u81F3\u5C11\u5B58\u5728\u4E00\u4E2A\u5143\u7D20\uFF09\u3002\u6BCF\u4E2A\u5143\u7D20\u5E94\u8BE5\u6709 \u76F8\u540C\u7684\u6982\u7387 \u88AB\u8FD4\u56DE\u3002 \u4F60\u5FC5\u987B\u5B9E\u73B0\u7C7B\u7684\u6240\u6709\u51FD\u6570\uFF0C\u5E76\u6EE1\u8DB3\u6BCF\u4E2A\u51FD\u6570\u7684 \u5E73\u5747 \u65F6\u95F4\u590D\u6742\u5EA6\u4E3A O(1) \u3002</p><p><strong>\u601D\u8DEF\uFF1A</strong></p><p>\u56E0\u4E3A\u9700\u8981 O(1) \u65F6\u95F4\u83B7\u53D6\u968F\u673A\u5143\u7D20\uFF0C\u6240\u4EE5\u9700\u8981\u4F7F\u7528 <code>\u6570\u7EC4</code> \u6765\u5B58\u50A8\u503C\uFF0C\u63D2\u5165\u5728\u5C3E\u90E8\uFF0C\u5C06\u5F85\u5220\u9664\u7684\u503C\u79FB\u52A8\u5230\u5C3E\u90E8\u540E\u5220\u9664\uFF0C\u8FD9\u6837\u5C31\u662F O(1)\u4E86\uFF0C\u540C\u65F6\u8FD8\u9700\u8981\u5C06\u503C\u548C\u7D22\u5F15\u7528 map \u5B58\u8D77\u6765\uFF0C\u63D2\u5165\u548C\u5220\u9664\u4E5F\u8981\u7EF4\u62A4 map</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">RandomizedSet</span> <span class="token punctuation">{</span>

    <span class="token comment">// \u7528\u6570\u7EC4\u5B58\u50A8</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">;</span>
    <span class="token class-name">Random</span> rand<span class="token punctuation">;</span>
    <span class="token comment">// \u8BB0\u5F55\u5F53\u524D\u5143\u7D20\u5BF9\u5E94\u7684\u7D22\u5F15</span>
    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> valToIdx<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">RandomizedSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        rand <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        valToIdx <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// val \u5DF2\u7ECF\u5B58\u5728</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>valToIdx<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token comment">// \u8BB0\u5F55\u7D22\u5F15</span>
        valToIdx<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// \u63D2\u5165\u5230\u6570\u7EC4\u5C3E\u90E8</span>
        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>valToIdx<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token comment">// \u83B7\u53D6\u7D22\u5F15</span>
        <span class="token keyword">int</span> index <span class="token operator">=</span> valToIdx<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// \u83B7\u53D6\u6700\u540E\u4E00\u4E2A\u5143\u7D20</span>
        <span class="token keyword">int</span> last <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// \u5C06 last \u66FF\u6362\u6389\u539F\u6765\u7684\u503C</span>
        list<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> last<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// \u79FB\u9664\u6700\u540E\u4E00\u4E2A\u5143\u7D20</span>
        list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// \u7EF4\u62A4map</span>
        valToIdx<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>last<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>
        valToIdx<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getRandom</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>rand<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),qt={id:"_710-\u9ED1\u540D\u5355\u4E2D\u7684\u968F\u673A\u6570",tabindex:"-1"},Tt=n("a",{class:"header-anchor",href:"#_710-\u9ED1\u540D\u5355\u4E2D\u7684\u968F\u673A\u6570","aria-hidden":"true"},"#",-1),It=s(),At={href:"https://leetcode.cn/problems/random-pick-with-blacklist/",target:"_blank",rel:"noopener noreferrer"},Et=s("710. \u9ED1\u540D\u5355\u4E2D\u7684\u968F\u673A\u6570"),Ot=t(`<p>\u7ED9\u5B9A\u4E00\u4E2A\u6574\u6570 n \u548C\u4E00\u4E2A \u65E0\u91CD\u590D \u9ED1\u540D\u5355\u6574\u6570\u6570\u7EC4 blacklist \u3002\u8BBE\u8BA1\u4E00\u79CD\u7B97\u6CD5\uFF0C\u4ECE [0, n - 1] \u8303\u56F4\u5185\u7684\u4EFB\u610F\u6574\u6570\u4E2D\u9009\u53D6\u4E00\u4E2A \u672A\u52A0\u5165 \u9ED1\u540D\u5355 blacklist \u7684\u6574\u6570\u3002\u4EFB\u4F55\u5728\u4E0A\u8FF0\u8303\u56F4\u5185\u4E14\u4E0D\u5728\u9ED1\u540D\u5355 blacklist \u4E2D\u7684\u6574\u6570\u90FD\u5E94\u8BE5\u6709 \u540C\u7B49\u7684\u53EF\u80FD\u6027 \u88AB\u8FD4\u56DE\u3002</p><p>\u4F18\u5316\u4F60\u7684\u7B97\u6CD5\uFF0C\u4F7F\u5B83\u6700\u5C0F\u5316\u8C03\u7528\u8BED\u8A00 \u5185\u7F6E \u968F\u673A\u51FD\u6570\u7684\u6B21\u6570\u3002</p><p>\u5B9E\u73B0 Solution \u7C7B:</p><p>Solution(int n, int[] blacklist) \u521D\u59CB\u5316\u6574\u6570 n \u548C\u88AB\u52A0\u5165\u9ED1\u540D\u5355 blacklist \u7684\u6574\u6570 int pick() \u8FD4\u56DE\u4E00\u4E2A\u8303\u56F4\u4E3A [0, n - 1] \u4E14\u4E0D\u5728\u9ED1\u540D\u5355 blacklist \u4E2D\u7684\u968F\u673A\u6574\u6570</p><p><strong>\u601D\u8DEF\uFF1A</strong></p><p>\u628A\u6570\u7EC4\u770B\u6210\u903B\u8F91\u4E0A\u662F\u7D27\u51D1\u7684\uFF0C\u5373[0, sz) \u662F\u5408\u6CD5\u7684\uFF0C [sz, n) \u662F\u9ED1\u540D\u5355\u7684\u6570\u5B57(<code>\u903B\u8F91\u4E0A</code>)\uFF0C\u9700\u8981\u7EF4\u62A4\u4E00\u4E2A\u503C\u5230\u7D22\u5F15\u7684\u6620\u5C04\u8868</p><p>1.\u9700\u8981\u628A\u9ED1\u540D\u5355\u6570\u5B57\u7684\u7D22\u5F15\u6620\u5C04\u5230\u53F3\u8FB9\u7684\u5408\u6CD5\u6570\u5B57\uFF0C\u5373\u8DF3\u8FC7\u9ED1\u540D\u5355\u4E2D\u7684\u6570\u5B57</p><p>2.\u5982\u679C\u9ED1\u540D\u5355\u7684\u6570\u5B57\u5DF2\u7ECF\u5728\u53F3\u8FB9\u4E86\uFF0C\u5219\u53EF\u4EE5\u4E0D\u7528\u6620\u5C04</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/2541/image-20220721120245375.png" alt="image-20220721120245375"></p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>

    <span class="token comment">// \u503C\u5230\u7D22\u5F15\u7684\u6620\u5C04</span>
    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> map<span class="token punctuation">;</span>
    <span class="token comment">// \u5408\u6CD5\u6570\u5B57\u7684\u4E2A\u6570</span>
    <span class="token keyword">int</span> sz<span class="token punctuation">;</span>
    <span class="token class-name">Random</span> rand<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> blacklist<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        rand <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// \u5408\u6CD5\u6570\u5B57\u7684\u957F\u5EA6</span>
        sz <span class="token operator">=</span> n <span class="token operator">-</span> blacklist<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
        <span class="token keyword">int</span> last <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token comment">// \u628A\u6240\u6709\u7684\u9ED1\u540D\u5355\u6570\u5B57\u52A0\u5165 map</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> b <span class="token operator">:</span> blacklist<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// \u8FD9\u91CC\u503C\u662F\u591A\u5C11\u65E0\u6240\u8C13</span>
            <span class="token comment">// \u56E0\u4E3A\u6211\u4EEC\u7684\u76EE\u7684\u662F\u5224\u65AD\u6570\u5B57\u662F\u5426\u5728\u9ED1\u540D\u5355\u5185</span>
            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token number">666</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// \u5C06\u9ED1\u540D\u5355\u6570\u5B57\u7684\u7D22\u5F15\u5168\u90E8\u6620\u5C04\u5230\u6700\u540E</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> b <span class="token operator">:</span> blacklist<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// b \u5DF2\u7ECF\u5728 [sz,n)\u5185\uFF0C\u5219\u8DF3\u8FC7</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">&gt;=</span> sz<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
            <span class="token comment">// \u8DF3\u8FC7\u6240\u6709\u7684\u9ED1\u540D\u5355\u6570\u5B57</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>last<span class="token punctuation">)</span><span class="token punctuation">)</span> last<span class="token operator">--</span><span class="token punctuation">;</span>
            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> last<span class="token punctuation">)</span><span class="token punctuation">;</span>
            last<span class="token operator">--</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">pick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> index <span class="token operator">=</span> rand<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>sz<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// \u662F\u9ED1\u540D\u5355\u7684\u6570\u5B57</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// \u9700\u8981\u88AB\u6620\u5C04\u5230\u5176\u4ED6\u4F4D\u7F6E</span>
            <span class="token keyword">return</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// \u76F4\u63A5\u8FD4\u56DE</span>
        <span class="token keyword">return</span> index<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>\u5C0F\u7ED3\uFF1A</strong></p><p>1\u3001\u5982\u679C\u60F3\u9AD8\u6548\u5730\uFF0C\u7B49\u6982\u7387\u5730\u968F\u673A\u83B7\u53D6\u5143\u7D20\uFF0C\u5C31\u8981\u4F7F\u7528\u6570\u7EC4\u4F5C\u4E3A\u5E95\u5C42\u5BB9\u5668\u3002</p><p>2\u3001\u5982\u679C\u8981\u4FDD\u6301\u6570\u7EC4\u5143\u7D20\u7684\u7D27\u51D1\u6027\uFF0C\u53EF\u4EE5\u628A\u5F85\u5220\u9664\u5143\u7D20\u6362\u5230\u6700\u540E\uFF0C\u7136\u540E <code>pop</code> \u6389\u672B\u5C3E\u7684\u5143\u7D20\uFF0C\u8FD9\u6837\u65F6\u95F4\u590D\u6742\u5EA6\u5C31\u662F O(1) \u4E86\u3002\u5F53\u7136\uFF0C\u6211\u4EEC\u9700\u8981\u989D\u5916\u7684\u54C8\u5E0C\u8868\u8BB0\u5F55\u503C\u5230\u7D22\u5F15\u7684\u6620\u5C04\u3002</p><p>3\u3001\u5BF9\u4E8E\u7B2C\u4E8C\u9898\uFF0C\u6570\u7EC4\u4E2D\u542B\u6709\u300C\u7A7A\u6D1E\u300D\uFF08\u9ED1\u540D\u5355\u6570\u5B57\uFF09\uFF0C\u4E5F\u53EF\u4EE5\u5229\u7528\u54C8\u5E0C\u8868\u5DE7\u5999\u5904\u7406\u6620\u5C04\u5173\u7CFB\uFF0C\u8BA9\u6570\u7EC4\u5728\u903B\u8F91\u4E0A\u662F\u7D27\u51D1\u7684\uFF0C\u65B9\u4FBF\u968F\u673A\u53D6\u5143\u7D20\u3002</p><h2 id="_3-\u4E8C\u53C9\u6811\u7B97\u6CD5" tabindex="-1"><a class="header-anchor" href="#_3-\u4E8C\u53C9\u6811\u7B97\u6CD5" aria-hidden="true">#</a> 3.\u4E8C\u53C9\u6811\u7B97\u6CD5</h2><h3 id="_3-1-\u4E1C\u54E5\u5E26\u4F60\u5237\u4E8C\u53C9\u6811-\u7EB2\u9886\u7BC7" tabindex="-1"><a class="header-anchor" href="#_3-1-\u4E1C\u54E5\u5E26\u4F60\u5237\u4E8C\u53C9\u6811-\u7EB2\u9886\u7BC7" aria-hidden="true">#</a> 3.1 \u4E1C\u54E5\u5E26\u4F60\u5237\u4E8C\u53C9\u6811\uFF08\u7EB2\u9886\u7BC7\uFF09</h3><p>\u5C42\u5E8F\u904D\u5386\u6846\u67B6\uFF1A</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// \u8F93\u5165\u4E00\u68F5\u4E8C\u53C9\u6811\u7684\u6839\u8282\u70B9\uFF0C\u5C42\u5E8F\u904D\u5386\u8FD9\u68F5\u4E8C\u53C9\u6811</span>
<span class="token keyword">void</span> <span class="token function">levelTraverse</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">&gt;</span></span> q <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    q<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// \u4ECE\u4E0A\u5230\u4E0B\u904D\u5386\u4E8C\u53C9\u6811\u7684\u6BCF\u4E00\u5C42</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> sz <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// \u4ECE\u5DE6\u5230\u53F3\u904D\u5386\u6BCF\u4E00\u5C42\u7684\u6BCF\u4E2A\u8282\u70B9</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> sz<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">TreeNode</span> cur <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// \u5C06\u4E0B\u4E00\u5C42\u8282\u70B9\u653E\u5165\u961F\u5217</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                q<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                q<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,18),Mt={id:"_104-\u4E8C\u53C9\u6811\u7684\u6700\u5927\u6DF1\u5EA6",tabindex:"-1"},zt=n("a",{class:"header-anchor",href:"#_104-\u4E8C\u53C9\u6811\u7684\u6700\u5927\u6DF1\u5EA6","aria-hidden":"true"},"#",-1),Ct=s(),Dt={href:"https://leetcode.cn/problems/maximum-depth-of-binary-tree/",target:"_blank",rel:"noopener noreferrer"},Rt=s("104. \u4E8C\u53C9\u6811\u7684\u6700\u5927\u6DF1\u5EA6"),Bt=t(`<p>\u7ED9\u5B9A\u4E00\u4E2A\u4E8C\u53C9\u6811\uFF0C\u627E\u51FA\u5176\u6700\u5927\u6DF1\u5EA6\u3002</p><p>\u4E8C\u53C9\u6811\u7684\u6DF1\u5EA6\u4E3A\u6839\u8282\u70B9\u5230\u6700\u8FDC\u53F6\u5B50\u8282\u70B9\u7684\u6700\u957F\u8DEF\u5F84\u4E0A\u7684\u8282\u70B9\u6570\u3002</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/2541/202209161354144.png" alt="image-20220916135414991"></p><p><strong>\u8BF4\u660E:</strong> \u53F6\u5B50\u8282\u70B9\u662F\u6307\u6CA1\u6709\u5B50\u8282\u70B9\u7684\u8282\u70B9\u3002</p><p><strong>\u601D\u8DEF\uFF1A</strong></p><p>\u540E\u5E8F\u904D\u5386\uFF0C\u5148\u627E\u51FA\u5DE6\u5B50\u6811\u7684\u6700\u5927\u6DF1\u5EA6\uFF0C\u53F3\u5B50\u6811\u7684\u6700\u5927\u6DF1\u5EA6\uFF0C\u5DE6\u53F3\u5B50\u6811\u4E2D\u7684\u6700\u5927\u6DF1\u5EA6\u52A0 1 \u5C31\u662F \u4E8C\u53C9\u6811\u7684\u6700\u5927\u6DF1\u5EA6</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u5B9A\u4E49\uFF1A\u627E\u51FA\u4E8C\u53C9\u6811\u7684\u6700\u5927\u6DF1\u5EA6</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxDepth</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token comment">// \u5DE6\u5B50\u6811\u7684\u6700\u5927\u6DF1\u5EA6</span>
        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token function">maxDepth</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// \u53F3\u5B50\u6811\u7684\u6700\u5927\u6DF1\u5EA6</span>
        <span class="token keyword">int</span> right <span class="token operator">=</span> <span class="token function">maxDepth</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// \u6700\u5927\u6DF1\u5EA6</span>
        <span class="token keyword">return</span> left <span class="token operator">&gt;</span> right <span class="token operator">?</span> left <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">:</span> right <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7),Vt={id:"_144-\u4E8C\u53C9\u6811\u7684\u524D\u5E8F\u904D\u5386",tabindex:"-1"},Pt=n("a",{class:"header-anchor",href:"#_144-\u4E8C\u53C9\u6811\u7684\u524D\u5E8F\u904D\u5386","aria-hidden":"true"},"#",-1),Ut=s(),Ht={href:"https://leetcode.cn/problems/binary-tree-preorder-traversal/",target:"_blank",rel:"noopener noreferrer"},Kt=s("144. \u4E8C\u53C9\u6811\u7684\u524D\u5E8F\u904D\u5386"),Qt=t(`<p>\u7ED9\u4F60\u4E8C\u53C9\u6811\u7684\u6839\u8282\u70B9 <code>root</code> \uFF0C\u8FD4\u56DE\u5B83\u8282\u70B9\u503C\u7684 <strong>\u524D\u5E8F</strong> \u904D\u5386\u3002</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>

   <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

   <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> <span class="token function">preorderTraversal</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token function">traverse</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token keyword">return</span> res<span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">traverse</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
       <span class="token comment">// \u524D\u5E8F\u4F4D\u7F6E</span>
       res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token function">traverse</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token function">traverse</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u975E\u9012\u5F52\u5B9E\u73B0</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    
    <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> <span class="token function">preorderTraversal</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">preOrderNonCur</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> res<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">preorderNonCur</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">&gt;</span></span> sta <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// \u6839\u8282\u70B9\u5165\u6808</span>
        sta<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>sta<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">TreeNode</span> node <span class="token operator">=</span> sta<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// \u52A0\u5165\u5230\u7ED3\u679C\u96C6\u4E2D</span>
            res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// \u53F3\u8282\u70B9\u975E\u7A7A</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// \u53F3\u8282\u70B9\u5165\u6808</span>
                sta<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>   
            <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// \u5DE6\u8282\u70B9\u5165\u6808</span>
                sta<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),Gt={id:"_94-\u4E8C\u53C9\u6811\u7684\u4E2D\u5E8F\u904D\u5386",tabindex:"-1"},Ft=n("a",{class:"header-anchor",href:"#_94-\u4E8C\u53C9\u6811\u7684\u4E2D\u5E8F\u904D\u5386","aria-hidden":"true"},"#",-1),Wt=s(),Xt={href:"https://leetcode.cn/problems/binary-tree-inorder-traversal/",target:"_blank",rel:"noopener noreferrer"},Yt=s("94. \u4E8C\u53C9\u6811\u7684\u4E2D\u5E8F\u904D\u5386"),Jt=t(`<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/2541/image-20221126204308524.png" alt="image-20221126204308524"></p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>

    <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> <span class="token function">inorderTraversal</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">inorderNonCur</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> res<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">inorderNonCur</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">&gt;</span></span> sta <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// \u6307\u9488</span>
        <span class="token class-name">TreeNode</span> p <span class="token operator">=</span> root<span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token operator">!</span>sta<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// p != null \u8868\u793A\u8FD8\u6709\u8282\u70B9\u672A\u8BBF\u95EE\u8FC7</span>
            <span class="token comment">// !sta.isEmpty() \u8868\u793A\u5DF2\u7ECF\u8BBF\u95EE\u7B2C\u4E00\u6B21\uFF0C\u7B49\u5F85\u7B2C\u4E8C\u6B21\u8BBF\u95EE</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// \u7B2C\u4E00\u6B21\u8BBF\u95EE\uFF0C\u5165\u6808</span>
                sta<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// \u8BBF\u95EE\u5DE6\u8282\u70B9</span>
                p <span class="token operator">=</span> p<span class="token punctuation">.</span>left<span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token comment">// \u7B2C\u4E8C\u6B21\u8BBF\u95EE</span>
                <span class="token class-name">TreeNode</span> node <span class="token operator">=</span> sta<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// \u52A0\u5165\u7ED3\u679C\u96C6</span>
                res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// \u66F4\u65B0 p\uFF0C\u8BBF\u95EE\u53F3\u8282\u70B9</span>
                p <span class="token operator">=</span> node<span class="token punctuation">.</span>right<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),Zt={id:"_145-\u4E8C\u53C9\u6811\u7684\u540E\u5E8F\u904D\u5386",tabindex:"-1"},$t=n("a",{class:"header-anchor",href:"#_145-\u4E8C\u53C9\u6811\u7684\u540E\u5E8F\u904D\u5386","aria-hidden":"true"},"#",-1),ne=s(),se={href:"https://leetcode.cn/problems/binary-tree-postorder-traversal/description/",target:"_blank",rel:"noopener noreferrer"},ae=s("145. \u4E8C\u53C9\u6811\u7684\u540E\u5E8F\u904D\u5386"),pe=t(`<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/2541/image-20221126214151881.png" alt="image-20221126214151881"></p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    
    <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> <span class="token function">postorderTraversal</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">postorderNonCur</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> res<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postorderNonCur</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">&gt;</span></span> sta <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">TreeNode</span> p <span class="token operator">=</span> root<span class="token punctuation">;</span>
        <span class="token comment">// \u524D\u4E00\u4E2A\u8282\u70B9\uFF0C\u5224\u65AD\u662F\u7B2C\u4E8C\u6B21\u904D\u5386\u8FD8\u662F\u7B2C\u4E09\u6B21\u904D\u5386</span>
        <span class="token class-name">TreeNode</span> preNode <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token operator">!</span>sta<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// \u7B2C\u4E00\u6B21\u8BBF\u95EE</span>
                sta<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
                p <span class="token operator">=</span> p<span class="token punctuation">.</span>left<span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token comment">// \u7B2C\u4E8C\u6B21\u6216\u8005\u7B2C\u4E09\u6B21\u8BBF\u95EE</span>
                <span class="token comment">// \u67E5\u770B\u6808\u9876\u5143\u7D20</span>
                p <span class="token operator">=</span> sta<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span>right <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> p<span class="token punctuation">.</span>right <span class="token operator">==</span> preNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// \u7B2C\u4E09\u6B21</span>
                    res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    sta<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    preNode <span class="token operator">=</span> p<span class="token punctuation">;</span>
                    <span class="token comment">// \u4FDD\u8BC1\u4E0B\u4E00\u6B21\u5FAA\u574F\u5F80\u56DE\u8D70</span>
                    p <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    <span class="token comment">// \u7B2C\u4E8C\u6B21\uFF0C\u8BBF\u95EE\u53F3\u8282\u70B9</span>
                    p <span class="token operator">=</span> p<span class="token punctuation">.</span>right<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),te={id:"_543-\u4E8C\u53C9\u6811\u7684\u76F4\u5F84",tabindex:"-1"},ee=n("a",{class:"header-anchor",href:"#_543-\u4E8C\u53C9\u6811\u7684\u76F4\u5F84","aria-hidden":"true"},"#",-1),oe=s(),ce={href:"https://leetcode.cn/problems/diameter-of-binary-tree/",target:"_blank",rel:"noopener noreferrer"},le=s("543. \u4E8C\u53C9\u6811\u7684\u76F4\u5F84"),ie=t(`<p>\u7ED9\u5B9A\u4E00\u68F5\u4E8C\u53C9\u6811\uFF0C\u4F60\u9700\u8981\u8BA1\u7B97\u5B83\u7684\u76F4\u5F84\u957F\u5EA6\u3002\u4E00\u68F5\u4E8C\u53C9\u6811\u7684\u76F4\u5F84\u957F\u5EA6\u662F\u4EFB\u610F\u4E24\u4E2A\u7ED3\u70B9\u8DEF\u5F84\u957F\u5EA6\u4E2D\u7684\u6700\u5927\u503C\u3002\u8FD9\u6761\u8DEF\u5F84\u53EF\u80FD\u7A7F\u8FC7\u4E5F\u53EF\u80FD\u4E0D\u7A7F\u8FC7\u6839\u7ED3\u70B9\u3002</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/2541/202209161354376.png" alt="image-20220916135452248"></p><p><strong>\u601D\u8DEF\uFF1A</strong></p><p>\u4F7F\u7528\u540E\u5E8F\u904D\u5386\uFF0C\u5B9A\u4E49\u51FD\u6570\u6C42\u4E8C\u53C9\u6811\u7684\u6700\u5927\u6DF1\u5EA6\uFF0C<code>\u4E8C\u53C9\u6811\u7684\u6700\u5927\u6DF1\u5EA6 = \uFF08\u5DE6\u53F3\u5B50\u6811\u4E2D\u7684\u6700\u5927\u6DF1\u5EA6\uFF09+ 1</code>\uFF0C<code>\u4E8C\u53C9\u6811\u7684\u76F4\u5F84 = \u5DE6\u5B50\u6811\u7684\u6DF1\u5EA6 + \u53F3\u5B50\u6811\u7684\u6DF1\u5EA6</code>\uFF0C\u5728\u6C42\u6DF1\u5EA6\u7684\u540C\u65F6\u628A\u6700\u5927\u76F4\u5F84\u6C42\u51FA\u6765\u3002</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>

    <span class="token comment">// \u6700\u5927\u76F4\u5F84</span>
    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">diameterOfBinaryTree</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">maxDepth</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> res<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// \u5B9A\u4E49\uFF1A\u6C42\u4E8C\u53C9\u6811\u7684\u6700\u5927\u6DF1\u5EA6</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxDepth</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token function">maxDepth</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> right <span class="token operator">=</span> <span class="token function">maxDepth</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// \u4E8C\u53C9\u6811\u7684\u76F4\u5F84 = \u5DE6\u5B50\u6811\u7684\u6DF1\u5EA6 + \u53F3\u5B50\u6811\u7684\u6DF1\u5EA6</span>
        res <span class="token operator">=</span> res <span class="token operator">&gt;</span> left <span class="token operator">+</span> right <span class="token operator">?</span> res <span class="token operator">:</span> left <span class="token operator">+</span> right<span class="token punctuation">;</span>
        <span class="token comment">// \u4E8C\u53C9\u6811\u7684\u6700\u5927\u6DF1\u5EA6 = \uFF08\u5DE6\u53F3\u5B50\u6811\u4E2D\u7684\u6700\u5927\u6DF1\u5EA6\uFF09+ 1</span>
        <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>\u5C0F\u7ED3\uFF1A</strong></p><p><strong>1\u3001\u662F\u5426\u53EF\u4EE5\u901A\u8FC7\u904D\u5386\u4E00\u904D\u4E8C\u53C9\u6811\u5F97\u5230\u7B54\u6848</strong>\uFF1F\u5982\u679C\u53EF\u4EE5\uFF0C\u7528\u4E00\u4E2A <code>traverse</code> \u51FD\u6570\u914D\u5408\u5916\u90E8\u53D8\u91CF\u6765\u5B9E\u73B0\u3002</p><p><strong>2\u3001\u662F\u5426\u53EF\u4EE5\u5B9A\u4E49\u4E00\u4E2A\u9012\u5F52\u51FD\u6570\uFF0C\u901A\u8FC7\u5B50\u95EE\u9898\uFF08\u5B50\u6811\uFF09\u7684\u7B54\u6848\u63A8\u5BFC\u51FA\u539F\u95EE\u9898\u7684\u7B54\u6848</strong>\uFF1F\u5982\u679C\u53EF\u4EE5\uFF0C\u5199\u51FA\u8FD9\u4E2A\u9012\u5F52\u51FD\u6570\u7684\u5B9A\u4E49\uFF0C\u5E76\u5145\u5206\u5229\u7528\u8FD9\u4E2A\u51FD\u6570\u7684\u8FD4\u56DE\u503C\u3002</p><p><strong>3\u3001\u65E0\u8BBA\u4F7F\u7528\u54EA\u4E00\u79CD\u601D\u7EF4\u6A21\u5F0F\uFF0C\u4F60\u90FD\u8981\u660E\u767D\u4E8C\u53C9\u6811\u7684\u6BCF\u4E00\u4E2A\u8282\u70B9\u9700\u8981\u505A\u4EC0\u4E48\uFF0C\u9700\u8981\u5728\u4EC0\u4E48\u65F6\u5019\uFF08\u524D\u4E2D\u540E\u5E8F\uFF09\u505A</strong>\u3002</p><h3 id="_3-2-\u4E1C\u54E5\u5E26\u4F60\u5237\u4E8C\u53C9\u6811-\u601D\u8DEF\u7BC7" tabindex="-1"><a class="header-anchor" href="#_3-2-\u4E1C\u54E5\u5E26\u4F60\u5237\u4E8C\u53C9\u6811-\u601D\u8DEF\u7BC7" aria-hidden="true">#</a> 3.2 \u4E1C\u54E5\u5E26\u4F60\u5237\u4E8C\u53C9\u6811\uFF08\u601D\u8DEF\u7BC7\uFF09</h3>`,10),ue={id:"_226-\u7FFB\u8F6C\u4E8C\u53C9\u6811",tabindex:"-1"},ke=n("a",{class:"header-anchor",href:"#_226-\u7FFB\u8F6C\u4E8C\u53C9\u6811","aria-hidden":"true"},"#",-1),re=s(),de={href:"https://leetcode.cn/problems/invert-binary-tree/",target:"_blank",rel:"noopener noreferrer"},ve=s("226. \u7FFB\u8F6C\u4E8C\u53C9\u6811"),me=t(`<p>\u7ED9\u4F60\u4E00\u68F5\u4E8C\u53C9\u6811\u7684\u6839\u8282\u70B9 <code>root</code> \uFF0C\u7FFB\u8F6C\u8FD9\u68F5\u4E8C\u53C9\u6811\uFF0C\u5E76\u8FD4\u56DE\u5176\u6839\u8282\u70B9\u3002</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/2541/202209161355553.png" alt="image-20220916135510426"></p><p><strong>\u601D\u8DEF\uFF1A</strong></p><p>\u5206\u89E3\u601D\u8DEF\uFF0C\u628A\u5DE6\u53F3\u5B50\u6811\u7FFB\u8F6C\uFF0C\u5728\u540E\u5E8F\u4F4D\u7F6E\u4EA4\u6362\u5DE6\u53F3\u8282\u70B9</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u5B9A\u4E49\uFF1A\u7FFB\u8F6C\u4E8C\u53C9\u6811</span>
    <span class="token keyword">public</span> <span class="token class-name">TreeNode</span> <span class="token function">invertTree</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> root<span class="token punctuation">;</span>
        <span class="token class-name">TreeNode</span> left <span class="token operator">=</span> <span class="token function">invertTree</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">TreeNode</span> right <span class="token operator">=</span> <span class="token function">invertTree</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// \u540E\u5E8F\u4F4D\u7F6E\uFF0C\u4EA4\u6362\u5DE6\u53F3\u8282\u70B9</span>
        root<span class="token punctuation">.</span>right <span class="token operator">=</span> left<span class="token punctuation">;</span>
        root<span class="token punctuation">.</span>left <span class="token operator">=</span> right<span class="token punctuation">;</span>
        <span class="token keyword">return</span> root<span class="token punctuation">;</span>

    <span class="token punctuation">}</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u904D\u5386\u601D\u8DEF</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">TreeNode</span> <span class="token function">invertTree</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">traverse</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> root<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> 
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">traverse</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token comment">// \u524D\u5E8F\u4F4D\u7F6E\uFF0C\u4EA4\u6362\u5DE6\u53F3\u8282\u70B9</span>
        <span class="token class-name">TreeNode</span> temp <span class="token operator">=</span> root<span class="token punctuation">.</span>left<span class="token punctuation">;</span>
        root<span class="token punctuation">.</span>left <span class="token operator">=</span> root<span class="token punctuation">.</span>right<span class="token punctuation">;</span>
        root<span class="token punctuation">.</span>right <span class="token operator">=</span> temp<span class="token punctuation">;</span>
        <span class="token function">traverse</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">traverse</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7),be={id:"_116-\u586B\u5145\u6BCF\u4E2A\u8282\u70B9\u7684\u4E0B\u4E00\u4E2A\u53F3\u4FA7\u8282\u70B9\u6307\u9488",tabindex:"-1"},he=n("a",{class:"header-anchor",href:"#_116-\u586B\u5145\u6BCF\u4E2A\u8282\u70B9\u7684\u4E0B\u4E00\u4E2A\u53F3\u4FA7\u8282\u70B9\u6307\u9488","aria-hidden":"true"},"#",-1),we=s(),ye={href:"https://leetcode.cn/problems/populating-next-right-pointers-in-each-node/",target:"_blank",rel:"noopener noreferrer"},ge=s("116. \u586B\u5145\u6BCF\u4E2A\u8282\u70B9\u7684\u4E0B\u4E00\u4E2A\u53F3\u4FA7\u8282\u70B9\u6307\u9488"),fe=t(`<p>\u7ED9\u5B9A\u4E00\u4E2A \u5B8C\u7F8E\u4E8C\u53C9\u6811 \uFF0C\u5176\u6240\u6709\u53F6\u5B50\u8282\u70B9\u90FD\u5728\u540C\u4E00\u5C42\uFF0C\u6BCF\u4E2A\u7236\u8282\u70B9\u90FD\u6709\u4E24\u4E2A\u5B50\u8282\u70B9\u3002\u4E8C\u53C9\u6811\u5B9A\u4E49\u5982\u4E0B\uFF1A</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>struct <span class="token class-name">Node</span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span> val<span class="token punctuation">;</span>
  <span class="token class-name">Node</span> <span class="token operator">*</span>left<span class="token punctuation">;</span>
  <span class="token class-name">Node</span> <span class="token operator">*</span>right<span class="token punctuation">;</span>
  <span class="token class-name">Node</span> <span class="token operator">*</span>next<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u586B\u5145\u5B83\u7684\u6BCF\u4E2A next \u6307\u9488\uFF0C\u8BA9\u8FD9\u4E2A\u6307\u9488\u6307\u5411\u5176\u4E0B\u4E00\u4E2A\u53F3\u4FA7\u8282\u70B9\u3002\u5982\u679C\u627E\u4E0D\u5230\u4E0B\u4E00\u4E2A\u53F3\u4FA7\u8282\u70B9\uFF0C\u5219\u5C06 next \u6307\u9488\u8BBE\u7F6E\u4E3A NULL\u3002</p><p>\u521D\u59CB\u72B6\u6001\u4E0B\uFF0C\u6240\u6709 next \u6307\u9488\u90FD\u88AB\u8BBE\u7F6E\u4E3A NULL\u3002</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/2541/202209161339003.png" alt="image-20220916133949845"></p><p><strong>\u601D\u8DEF\uFF1A</strong></p><p>\u904D\u5386\uFF0Ctraverse() \u4F20\u5165\u4E24\u4E2A\u8282\u70B9\uFF0C\u9996\u5148\u8FDE\u63A5\u8FD9\u4E24\u4E2A\u8282\u70B9\uFF0C\u7136\u540E\u8C03\u7528 traverse() \u8FDE\u63A5\u76F8\u540C\u7236\u8282\u70B9\u7684\u8282\u70B9\uFF0C\u8FDE\u63A5\u4E0D\u540C\u7236\u8282\u70B9\u7684\u7684\u4E24\u4E2A\u8282\u70B9</p><p>\u770B\u6210\u662F\u4E09\u53C9\u6811\uFF0C\u4E09\u53C9\u6811\u7684\u6BCF\u4E2A\u8282\u70B9\u5C31\u662F\u539F\u5148\u4E8C\u53C9\u6811\u76F8\u90BB\u7684\u4E24\u4E2A\u8282\u70B9\uFF0C\u6211\u4EEC\u9700\u8981\u8FDE\u63A5\u8FD9\u4E24\u4E2A\u76F8\u90BB\u7684\u8282\u70B9</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/2541/image-20220722125002531.png" alt="image-20220722125002531"></p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">Node</span> <span class="token function">connect</span><span class="token punctuation">(</span><span class="token class-name">Node</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> root<span class="token punctuation">;</span>
        <span class="token function">traverse</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> root<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">traverse</span><span class="token punctuation">(</span><span class="token class-name">Node</span> left<span class="token punctuation">,</span> <span class="token class-name">Node</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token comment">// \u524D\u5E8F\u4F4D\u7F6E</span>
        <span class="token comment">// \u8FDE\u63A5\u4E24\u4E2A\u8282\u70B9</span>
        left<span class="token punctuation">.</span>next <span class="token operator">=</span> right<span class="token punctuation">;</span>
        <span class="token comment">// \u8FDE\u63A5\u76F8\u540C\u7236\u8282\u70B9\u7684\u4E24\u4E2A\u8282\u70B9</span>
        <span class="token function">traverse</span><span class="token punctuation">(</span>left<span class="token punctuation">.</span>left<span class="token punctuation">,</span> left<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">traverse</span><span class="token punctuation">(</span>right<span class="token punctuation">.</span>left<span class="token punctuation">,</span> right<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// \u8FDE\u63A5\u4E0D\u540C\u7236\u8282\u70B9\u7684\u4E24\u4E2A\u8282\u70B9</span>
        <span class="token function">traverse</span><span class="token punctuation">(</span>left<span class="token punctuation">.</span>right<span class="token punctuation">,</span> right<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,10),_e={id:"_114-\u4E8C\u53C9\u6811\u5C55\u5F00\u4E3A\u94FE\u8868",tabindex:"-1"},xe=n("a",{class:"header-anchor",href:"#_114-\u4E8C\u53C9\u6811\u5C55\u5F00\u4E3A\u94FE\u8868","aria-hidden":"true"},"#",-1),je=s(),Ne={href:"https://leetcode.cn/problems/flatten-binary-tree-to-linked-list/",target:"_blank",rel:"noopener noreferrer"},Se=s("114. \u4E8C\u53C9\u6811\u5C55\u5F00\u4E3A\u94FE\u8868"),Le=t(`<p>\u7ED9\u4F60\u4E8C\u53C9\u6811\u7684\u6839\u7ED3\u70B9 root \uFF0C\u8BF7\u4F60\u5C06\u5B83\u5C55\u5F00\u4E3A\u4E00\u4E2A\u5355\u94FE\u8868\uFF1A</p><p>\u5C55\u5F00\u540E\u7684\u5355\u94FE\u8868\u5E94\u8BE5\u540C\u6837\u4F7F\u7528 TreeNode \uFF0C\u5176\u4E2D right \u5B50\u6307\u9488\u6307\u5411\u94FE\u8868\u4E2D\u4E0B\u4E00\u4E2A\u7ED3\u70B9\uFF0C\u800C\u5DE6\u5B50\u6307\u9488\u59CB\u7EC8\u4E3A null \u3002</p><p>\u5C55\u5F00\u540E\u7684\u5355\u94FE\u8868\u5E94\u8BE5\u4E0E\u4E8C\u53C9\u6811 \u5148\u5E8F\u904D\u5386 \u987A\u5E8F\u76F8\u540C\u3002</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/2541/202209161353894.png" alt="image-20220916135310778"></p><p><strong>\u601D\u8DEF\uFF1A</strong></p><p>\u5C06\u5DE6\u53F3\u5B50\u6811\u5C55\u5F00\u4E3A\u94FE\u8868\uFF0C\u63A5\u5230\u6839\u8282\u70B9\u7684\u53F3\u5B50\u6811\u4E0A\uFF0C\u5C06\u539F\u6765\u7684\u53F3\u5B50\u6811\u63A5\u5230\u65B0\u53F3\u5B50\u6811\u7684\u6700\u53F3\u8FB9</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">flatten</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token comment">// \u5C06\u5DE6\u53F3\u5B50\u6811\u5C55\u5F00\u4E3A\u94FE\u8868</span>
        <span class="token function">flatten</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">flatten</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">TreeNode</span> left <span class="token operator">=</span> root<span class="token punctuation">.</span>left<span class="token punctuation">;</span>
        <span class="token class-name">TreeNode</span> right <span class="token operator">=</span> root<span class="token punctuation">.</span>right<span class="token punctuation">;</span>
        <span class="token comment">// \u5DE6\u5B50\u6811\u7F6E\u7A7A</span>
        root<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token comment">// \u5C06\u5DE6\u5B50\u6811\u63A5\u5230\u53F3\u5B50\u6811\u4E0A</span>
        root<span class="token punctuation">.</span>right <span class="token operator">=</span> left<span class="token punctuation">;</span>
        <span class="token class-name">TreeNode</span> p <span class="token operator">=</span> root<span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> p <span class="token operator">=</span> p<span class="token punctuation">.</span>right<span class="token punctuation">;</span>
        <span class="token comment">// \u5C06 \u539F\u6765\u7684\u53F3\u5B50\u6811 \u63A5\u5230\u65B0\u53F3\u5B50\u6811\u7684\u6700\u53F3\u8FB9</span>
        p<span class="token punctuation">.</span>right <span class="token operator">=</span> right<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-3-\u4E1C\u54E5\u5E26\u4F60\u5237\u4E8C\u53C9\u6811-\u6784\u9020\u7BC7" tabindex="-1"><a class="header-anchor" href="#_3-3-\u4E1C\u54E5\u5E26\u4F60\u5237\u4E8C\u53C9\u6811-\u6784\u9020\u7BC7" aria-hidden="true">#</a> 3.3 \u4E1C\u54E5\u5E26\u4F60\u5237\u4E8C\u53C9\u6811\uFF08\u6784\u9020\u7BC7\uFF09</h3>`,8),qe={id:"_654-\u6700\u5927\u4E8C\u53C9\u6811",tabindex:"-1"},Te=n("a",{class:"header-anchor",href:"#_654-\u6700\u5927\u4E8C\u53C9\u6811","aria-hidden":"true"},"#",-1),Ie=s(),Ae={href:"https://leetcode.cn/problems/maximum-binary-tree/",target:"_blank",rel:"noopener noreferrer"},Ee=s("654. \u6700\u5927\u4E8C\u53C9\u6811"),Oe=t(`<p>\u7ED9\u5B9A\u4E00\u4E2A\u4E0D\u91CD\u590D\u7684\u6574\u6570\u6570\u7EC4 nums \u3002 \u6700\u5927\u4E8C\u53C9\u6811 \u53EF\u4EE5\u7528\u4E0B\u9762\u7684\u7B97\u6CD5\u4ECE nums \u9012\u5F52\u5730\u6784\u5EFA:</p><p>\u521B\u5EFA\u4E00\u4E2A\u6839\u8282\u70B9\uFF0C\u5176\u503C\u4E3A nums \u4E2D\u7684\u6700\u5927\u503C\u3002 \u9012\u5F52\u5730\u5728\u6700\u5927\u503C \u5DE6\u8FB9 \u7684 \u5B50\u6570\u7EC4\u524D\u7F00\u4E0A \u6784\u5EFA\u5DE6\u5B50\u6811\u3002 \u9012\u5F52\u5730\u5728\u6700\u5927\u503C \u53F3\u8FB9 \u7684 \u5B50\u6570\u7EC4\u540E\u7F00\u4E0A \u6784\u5EFA\u53F3\u5B50\u6811\u3002 \u8FD4\u56DE nums \u6784\u5EFA\u7684 \u6700\u5927\u4E8C\u53C9\u6811 \u3002</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/2541/202209161402340.png" alt="image-20220916140217145"></p><p><strong>\u601D\u8DEF\uFF1A</strong></p><p>\u5148\u627E\u5230\u6570\u7EC4\u4E2D\u7684\u6700\u5927\u503C\u548C\u5BF9\u5E94\u7684\u7D22\u5F15\uFF0C\u7136\u540E\u6784\u9020\u5DE6\u5B50\u6811\uFF0C\u518D\u6784\u9020\u53F3\u5B50\u6811</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">TreeNode</span> <span class="token function">constructMaximumBinaryTree</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">build</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token class-name">TreeNode</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>start <span class="token operator">&gt;</span> end<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token comment">// \u627E\u5230\u6700\u5927\u503C</span>
        <span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">;</span>
        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> start<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> end<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>max <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                max <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
                index <span class="token operator">=</span> i<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// \u6784\u9020\u4E8C\u53C9\u6811</span>
        <span class="token class-name">TreeNode</span> root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>max<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// \u6784\u9020\u5DE6\u5B50\u6811</span>
        root<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">build</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> start<span class="token punctuation">,</span> index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// \u6784\u9020\u53F3\u5B50\u6811</span>
        root<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">build</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> root<span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),Me={id:"_105-\u4ECE\u524D\u5E8F\u4E0E\u4E2D\u5E8F\u904D\u5386\u5E8F\u5217\u6784\u9020\u4E8C\u53C9\u6811",tabindex:"-1"},ze=n("a",{class:"header-anchor",href:"#_105-\u4ECE\u524D\u5E8F\u4E0E\u4E2D\u5E8F\u904D\u5386\u5E8F\u5217\u6784\u9020\u4E8C\u53C9\u6811","aria-hidden":"true"},"#",-1),Ce=s(),De={href:"https://leetcode.cn/problems/construct-binary-tree-from-preorder-and-inorder-traversal/",target:"_blank",rel:"noopener noreferrer"},Re=s("105. \u4ECE\u524D\u5E8F\u4E0E\u4E2D\u5E8F\u904D\u5386\u5E8F\u5217\u6784\u9020\u4E8C\u53C9\u6811"),Be=t(`<p>\u7ED9\u5B9A\u4E24\u4E2A\u6574\u6570\u6570\u7EC4 preorder \u548C inorder \uFF0C\u5176\u4E2D preorder \u662F\u4E8C\u53C9\u6811\u7684\u5148\u5E8F\u904D\u5386\uFF0C inorder \u662F\u540C\u4E00\u68F5\u6811\u7684\u4E2D\u5E8F\u904D\u5386\uFF0C\u8BF7\u6784\u9020\u4E8C\u53C9\u6811\u5E76\u8FD4\u56DE\u5176\u6839\u8282\u70B9\u3002</p><p><strong>\u601D\u8DEF\uFF1A</strong></p><p>\u5148\u5728\u524D\u5E8F\u6570\u7EC4\u4E2D\u6839\u8282\u70B9\uFF0C\u7136\u540E\u5728\u4E2D\u5E8F\u6570\u7EC4\u4E2D\u627E\u5230\u6839\u8282\u70B9\u7684\u7D22\u5F15\uFF0C\u5F97\u5230\u5DE6\u5B50\u6811\u7684\u957F\u5EA6\uFF0C\u7136\u540E\u6784\u9020\u4E8C\u53C9\u6811\uFF0C\u5728\u6784\u9020\u5DE6\u5B50\u6811\uFF0C\u6784\u9020\u53F3\u5B50\u6811</p><p><strong>\u6CE8\u610F\uFF1A</strong></p><p>\u6839\u8282\u70B9 <code>preorder[preStart]</code></p><p>\u5DE6\u5B50\u6811\u7684\u957F\u5EA6 <code>index - inStart</code></p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>

    <span class="token comment">// \u503C\u5230\u7D22\u5F15\u7684\u6620\u5C04</span>
    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">TreeNode</span> <span class="token function">buildTree</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> preorder<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> inorder<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> inorder<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>inorder<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token function">build</span><span class="token punctuation">(</span>preorder<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> preorder<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> inorder<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> inorder<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token class-name">TreeNode</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> preorder<span class="token punctuation">,</span> <span class="token keyword">int</span> preStart<span class="token punctuation">,</span> <span class="token keyword">int</span> preEnd<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> inorder<span class="token punctuation">,</span> <span class="token keyword">int</span> inStart<span class="token punctuation">,</span> <span class="token keyword">int</span> inEnd<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// base case</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>preStart <span class="token operator">&gt;</span> preEnd<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token comment">// \u627E\u5230\u6839\u8282\u70B9\u5728\u4E2D\u5E8F\u904D\u5386\u6570\u7EC4\u4E2D\u7684\u7D22\u5F15</span>
        <span class="token comment">// int rootVal = preorder[0];</span>
        <span class="token keyword">int</span> rootVal <span class="token operator">=</span> preorder<span class="token punctuation">[</span>preStart<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> index <span class="token operator">=</span>  map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>rootVal<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// \u5DE6\u5B50\u6811\u7684\u957F\u5EA6</span>
        <span class="token keyword">int</span> len <span class="token operator">=</span> index <span class="token operator">-</span> inStart<span class="token punctuation">;</span>
        <span class="token comment">// \u6784\u9020\u4E8C\u53C9\u6811</span>
        <span class="token class-name">TreeNode</span> root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>rootVal<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// \u6784\u9020\u5DE6\u53F3\u5B50\u6811</span>
        root<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">build</span><span class="token punctuation">(</span>preorder<span class="token punctuation">,</span> preStart <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> preStart <span class="token operator">+</span> len<span class="token punctuation">,</span> inorder<span class="token punctuation">,</span> inStart<span class="token punctuation">,</span> index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        root<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">build</span><span class="token punctuation">(</span>preorder<span class="token punctuation">,</span> preStart <span class="token operator">+</span> len <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> preEnd<span class="token punctuation">,</span> inorder<span class="token punctuation">,</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> inEnd<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> root<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7),Ve={id:"_106-\u4ECE\u4E2D\u5E8F\u4E0E\u540E\u5E8F\u904D\u5386\u5E8F\u5217\u6784\u9020\u4E8C\u53C9\u6811",tabindex:"-1"},Pe=n("a",{class:"header-anchor",href:"#_106-\u4ECE\u4E2D\u5E8F\u4E0E\u540E\u5E8F\u904D\u5386\u5E8F\u5217\u6784\u9020\u4E8C\u53C9\u6811","aria-hidden":"true"},"#",-1),Ue=s(),He={href:"https://leetcode.cn/problems/construct-binary-tree-from-inorder-and-postorder-traversal/",target:"_blank",rel:"noopener noreferrer"},Ke=s("106. \u4ECE\u4E2D\u5E8F\u4E0E\u540E\u5E8F\u904D\u5386\u5E8F\u5217\u6784\u9020\u4E8C\u53C9\u6811"),Qe=t(`<p>\u7ED9\u5B9A\u4E24\u4E2A\u6574\u6570\u6570\u7EC4 inorder \u548C postorder \uFF0C\u5176\u4E2D inorder \u662F\u4E8C\u53C9\u6811\u7684\u4E2D\u5E8F\u904D\u5386\uFF0C postorder \u662F\u540C\u4E00\u68F5\u6811\u7684\u540E\u5E8F\u904D\u5386\uFF0C\u8BF7\u4F60\u6784\u9020\u5E76\u8FD4\u56DE\u8FD9\u9897 \u4E8C\u53C9\u6811 \u3002</p><p><strong>\u601D\u8DEF\uFF1A</strong></p><p>\u5728\u540E\u5E8F\u6570\u7EC4\u4E2D\u627E\u5230\u6839\u8282\u70B9 <code>postorder[postEnd]</code>\uFF0C\u7136\u540E\u5728\u4E2D\u5E8F\u6570\u7EC4\u4E2D\u627E\u5230\u6839\u8282\u70B9\u7684\u7D22\u5F15\uFF0C\u5F97\u5230\u5DE6\u5B50\u6811\u7684\u957F\u5EA6 <code>index - inStart</code>\uFF0C\u6784\u9020\u5DE6\u53F3\u5B50\u6811</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>

    <span class="token comment">// \u503C\u5230\u7D22\u5F15\u7684\u6620\u5C04</span>
    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">TreeNode</span> <span class="token function">buildTree</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> inorder<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> postorder<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> inorder<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>inorder<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token function">build</span><span class="token punctuation">(</span>inorder<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> inorder<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> postorder<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> postorder<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token class-name">TreeNode</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> inorder<span class="token punctuation">,</span> <span class="token keyword">int</span> inStart<span class="token punctuation">,</span> <span class="token keyword">int</span> inEnd<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> postorder<span class="token punctuation">,</span> <span class="token keyword">int</span> postStart<span class="token punctuation">,</span> <span class="token keyword">int</span> postEnd<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>inStart <span class="token operator">&gt;</span> inEnd<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> rootVal <span class="token operator">=</span> postorder<span class="token punctuation">[</span>postEnd<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> index <span class="token operator">=</span>  map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>rootVal<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// \u5DE6\u5B50\u6811\u7684\u957F\u5EA6</span>
        <span class="token keyword">int</span> len <span class="token operator">=</span> index <span class="token operator">-</span> inStart<span class="token punctuation">;</span>
        <span class="token class-name">TreeNode</span> root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>rootVal<span class="token punctuation">)</span><span class="token punctuation">;</span>
        root<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">build</span><span class="token punctuation">(</span>inorder<span class="token punctuation">,</span> inStart<span class="token punctuation">,</span> index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> postorder<span class="token punctuation">,</span> postStart<span class="token punctuation">,</span> postStart <span class="token operator">+</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        root<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">build</span><span class="token punctuation">(</span>inorder<span class="token punctuation">,</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> inEnd<span class="token punctuation">,</span> postorder<span class="token punctuation">,</span> postStart <span class="token operator">+</span> len<span class="token punctuation">,</span> postEnd <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> root<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),Ge={id:"_889-\u6839\u636E\u524D\u5E8F\u548C\u540E\u5E8F\u904D\u5386\u6784\u9020\u4E8C\u53C9\u6811",tabindex:"-1"},Fe=n("a",{class:"header-anchor",href:"#_889-\u6839\u636E\u524D\u5E8F\u548C\u540E\u5E8F\u904D\u5386\u6784\u9020\u4E8C\u53C9\u6811","aria-hidden":"true"},"#",-1),We=s(),Xe={href:"https://leetcode.cn/problems/construct-binary-tree-from-preorder-and-postorder-traversal/",target:"_blank",rel:"noopener noreferrer"},Ye=s("889. \u6839\u636E\u524D\u5E8F\u548C\u540E\u5E8F\u904D\u5386\u6784\u9020\u4E8C\u53C9\u6811"),Je=t(`<p>\u7ED9\u5B9A\u4E24\u4E2A\u6574\u6570\u6570\u7EC4\uFF0Cpreorder \u548C postorder \uFF0C\u5176\u4E2D preorder \u662F\u4E00\u4E2A\u5177\u6709 \u65E0\u91CD\u590D \u503C\u7684\u4E8C\u53C9\u6811\u7684\u524D\u5E8F\u904D\u5386\uFF0Cpostorder \u662F\u540C\u4E00\u68F5\u6811\u7684\u540E\u5E8F\u904D\u5386\uFF0C\u91CD\u6784\u5E76\u8FD4\u56DE\u4E8C\u53C9\u6811\u3002</p><p>\u5982\u679C\u5B58\u5728\u591A\u4E2A\u7B54\u6848\uFF0C\u60A8\u53EF\u4EE5\u8FD4\u56DE\u5176\u4E2D \u4EFB\u4F55 \u4E00\u4E2A\u3002</p><p><strong>\u601D\u8DEF\uFF1A</strong></p><p>\u5C06\u524D\u5E8F\u6570\u7EC4\u7684\u7B2C\u4E8C\u4E2A\u5143\u7D20\u4F5C\u4E3A\u5DE6\u5B50\u6811\u7684\u6839\u8282\u70B9\uFF0C\u5728\u540E\u5E8F\u6570\u7EC4\u4E2D\u627E\u5230\u8FD9\u4E2A\u8282\u70B9\u7684\u7D22\u5F15\uFF0C\u6C42\u51FA\u5DE6\u5B50\u6811\u7684\u957F\u5EA6\uFF0C\u9012\u5F52\u6784\u9020\u5DE6\u53F3\u5B50\u6811</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>

    <span class="token comment">// \u503C\u5230\u7D22\u5F15\u7684\u6620\u5C04</span>
    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">TreeNode</span> <span class="token function">constructFromPrePost</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> preorder<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> postorder<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> postorder<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>postorder<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token function">build</span><span class="token punctuation">(</span>preorder<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> preorder<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> postorder<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> postorder<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token class-name">TreeNode</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> preorder<span class="token punctuation">,</span> <span class="token keyword">int</span> preStart<span class="token punctuation">,</span> <span class="token keyword">int</span> preEnd<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> postorder<span class="token punctuation">,</span> <span class="token keyword">int</span> postStart<span class="token punctuation">,</span> <span class="token keyword">int</span> postEnd<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>preStart <span class="token operator">&gt;</span> preEnd<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token comment">// \u5F53 preStart == preEnd \u65F6\uFF0C\u5C31\u6CA1\u6709\u7B2C\u4E8C\u4E2A\u8282\u70B9\u4E86\uFF0C\u76F4\u63A5\u8FD4\u56DE\u8FD9\u4E2A\u8282\u70B9</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>preStart <span class="token operator">==</span> preEnd<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>preorder<span class="token punctuation">[</span>preStart<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> rootVal <span class="token operator">=</span> preorder<span class="token punctuation">[</span>preStart<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token comment">// \u5C06\u524D\u5E8F\u904D\u5386\u7684\u7B2C\u4E8C\u4E2A\u8282\u70B9\u4F5C\u4E3A\u5DE6\u5B50\u6811\u7684\u6839\u8282\u70B9</span>
        <span class="token comment">// \u8FD9\u4E2A\u8282\u70B9\u4E5F\u6709\u53EF\u80FD\u662F\u53F3\u5B50\u6811\u7684\u6839\u8282\u70B9</span>
        <span class="token keyword">int</span> leftRootVal <span class="token operator">=</span> preorder<span class="token punctuation">[</span>preStart <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> index <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>leftRootVal<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// \u5DE6\u5B50\u6811\u7684\u957F\u5EA6</span>
        <span class="token keyword">int</span> leftLen <span class="token operator">=</span> index <span class="token operator">-</span> postStart <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token class-name">TreeNode</span> root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>rootVal<span class="token punctuation">)</span><span class="token punctuation">;</span>
        root<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">build</span><span class="token punctuation">(</span>preorder<span class="token punctuation">,</span> preStart <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> preStart <span class="token operator">+</span> leftLen<span class="token punctuation">,</span> postorder<span class="token punctuation">,</span> postStart<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>
        root<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">build</span><span class="token punctuation">(</span>preorder<span class="token punctuation">,</span> preStart <span class="token operator">+</span> leftLen <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> preEnd<span class="token punctuation">,</span> postorder<span class="token punctuation">,</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> postEnd <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> root<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-4-\u4E1C\u54E5\u5E26\u4F60\u5237\u4E8C\u53C9\u6811-\u5E8F\u5217\u5316\u7BC7" tabindex="-1"><a class="header-anchor" href="#_3-4-\u4E1C\u54E5\u5E26\u4F60\u5237\u4E8C\u53C9\u6811-\u5E8F\u5217\u5316\u7BC7" aria-hidden="true">#</a> 3.4 \u4E1C\u54E5\u5E26\u4F60\u5237\u4E8C\u53C9\u6811\uFF08\u5E8F\u5217\u5316\u7BC7\uFF09</h3>`,6),Ze={id:"_297-\u4E8C\u53C9\u6811\u7684\u5E8F\u5217\u5316\u4E0E\u53CD\u5E8F\u5217\u5316",tabindex:"-1"},$e=n("a",{class:"header-anchor",href:"#_297-\u4E8C\u53C9\u6811\u7684\u5E8F\u5217\u5316\u4E0E\u53CD\u5E8F\u5217\u5316","aria-hidden":"true"},"#",-1),no=s(),so={href:"https://leetcode.cn/problems/serialize-and-deserialize-binary-tree/",target:"_blank",rel:"noopener noreferrer"},ao=s("297. \u4E8C\u53C9\u6811\u7684\u5E8F\u5217\u5316\u4E0E\u53CD\u5E8F\u5217\u5316"),po=t(`<p>\u5E8F\u5217\u5316\u662F\u5C06\u4E00\u4E2A\u6570\u636E\u7ED3\u6784\u6216\u8005\u5BF9\u8C61\u8F6C\u6362\u4E3A\u8FDE\u7EED\u7684\u6BD4\u7279\u4F4D\u7684\u64CD\u4F5C\uFF0C\u8FDB\u800C\u53EF\u4EE5\u5C06\u8F6C\u6362\u540E\u7684\u6570\u636E\u5B58\u50A8\u5728\u4E00\u4E2A\u6587\u4EF6\u6216\u8005\u5185\u5B58\u4E2D\uFF0C\u540C\u65F6\u4E5F\u53EF\u4EE5\u901A\u8FC7\u7F51\u7EDC\u4F20\u8F93\u5230\u53E6\u4E00\u4E2A\u8BA1\u7B97\u673A\u73AF\u5883\uFF0C\u91C7\u53D6\u76F8\u53CD\u65B9\u5F0F\u91CD\u6784\u5F97\u5230\u539F\u6570\u636E\u3002</p><p>\u8BF7\u8BBE\u8BA1\u4E00\u4E2A\u7B97\u6CD5\u6765\u5B9E\u73B0\u4E8C\u53C9\u6811\u7684\u5E8F\u5217\u5316\u4E0E\u53CD\u5E8F\u5217\u5316\u3002\u8FD9\u91CC\u4E0D\u9650\u5B9A\u4F60\u7684\u5E8F\u5217 / \u53CD\u5E8F\u5217\u5316\u7B97\u6CD5\u6267\u884C\u903B\u8F91\uFF0C\u4F60\u53EA\u9700\u8981\u4FDD\u8BC1\u4E00\u4E2A\u4E8C\u53C9\u6811\u53EF\u4EE5\u88AB\u5E8F\u5217\u5316\u4E3A\u4E00\u4E2A\u5B57\u7B26\u4E32\u5E76\u4E14\u5C06\u8FD9\u4E2A\u5B57\u7B26\u4E32\u53CD\u5E8F\u5217\u5316\u4E3A\u539F\u59CB\u7684\u6811\u7ED3\u6784\u3002</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/2541/202209171102295.png" alt="image-20220917110257195"></p><p><strong>\u601D\u8DEF\uFF1A</strong></p><p>\u5E8F\u5217\u5316\uFF1A\u5B9A\u4E49 <code>SEP NULL</code>\uFF0C\u524D\u5E8F\u904D\u5386\u52A0\u4E0A\u8F85\u52A9\u53D8\u91CF\u5C06\u4E8C\u53C9\u6811\u5E8F\u5217\u5316</p><p>\u53CD\u5E8F\u5217\u5316\uFF1A\u5C06\u5B57\u7B26\u4E32\u6210\u6570\u7EC4\uFF0C\u7136\u540E\u9012\u5F52\u6784\u9020\u5DE6\u53F3\u5B50\u6811</p><p><code>\u524D\u5E8F\u904D\u5386</code></p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Codec</span> <span class="token punctuation">{</span>

    <span class="token class-name">String</span> SEP <span class="token operator">=</span> <span class="token string">&quot;,&quot;</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> NULL <span class="token operator">=</span> <span class="token string">&quot;#&quot;</span><span class="token punctuation">;</span>

    <span class="token comment">// Encodes a tree to a single string.</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">serialize</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> sb<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">,</span> <span class="token class-name">StringBuilder</span> sb<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// \u7A7A\u8282\u70B9</span>
            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>NULL<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>SEP<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// \u524D\u5E8F\u4F4D\u7F6E</span>
        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>SEP<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">serialize</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> sb<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">serialize</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> sb<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// Decodes your encoded data to tree.</span>
    <span class="token keyword">public</span> <span class="token class-name">TreeNode</span> <span class="token function">deserialize</span><span class="token punctuation">(</span><span class="token class-name">String</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> nodes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> s <span class="token operator">:</span> data<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>SEP<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            nodes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token function">deserialize</span><span class="token punctuation">(</span>nodes<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
     <span class="token keyword">public</span> <span class="token class-name">TreeNode</span> <span class="token function">deserialize</span><span class="token punctuation">(</span><span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> nodes<span class="token punctuation">)</span> <span class="token punctuation">{</span>
         <span class="token keyword">if</span> <span class="token punctuation">(</span>nodes<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
         <span class="token class-name">String</span> rootVal <span class="token operator">=</span> nodes<span class="token punctuation">.</span><span class="token function">removeFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token keyword">if</span> <span class="token punctuation">(</span>rootVal<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>NULL<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
         <span class="token comment">// \u6784\u9020\u6839\u8282\u70B9</span>
         <span class="token class-name">TreeNode</span> root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>rootVal<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token comment">// \u6784\u9020\u5DE6\u53F3\u8282\u70B9</span>
         root<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">deserialize</span><span class="token punctuation">(</span>nodes<span class="token punctuation">)</span><span class="token punctuation">;</span>
         root<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">deserialize</span><span class="token punctuation">(</span>nodes<span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token keyword">return</span> root<span class="token punctuation">;</span>
     <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>\u540E\u5E8F\u904D\u5386</code></p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Codec</span> <span class="token punctuation">{</span>

    <span class="token class-name">String</span> SEP <span class="token operator">=</span> <span class="token string">&quot;,&quot;</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> NULL <span class="token operator">=</span> <span class="token string">&quot;#&quot;</span><span class="token punctuation">;</span>

    <span class="token comment">// Encodes a tree to a single string.</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">serialize</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> sb<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">,</span> <span class="token class-name">StringBuilder</span> sb<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// \u7A7A\u8282\u70B9</span>
            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>NULL<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>SEP<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// \u524D\u5E8F\u4F4D\u7F6E</span>
        <span class="token function">serialize</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> sb<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">serialize</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> sb<span class="token punctuation">)</span><span class="token punctuation">;</span>
        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>SEP<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// Decodes your encoded data to tree.</span>
    <span class="token keyword">public</span> <span class="token class-name">TreeNode</span> <span class="token function">deserialize</span><span class="token punctuation">(</span><span class="token class-name">String</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> nodes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> s <span class="token operator">:</span> data<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>SEP<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            nodes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token function">deserialize</span><span class="token punctuation">(</span>nodes<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
     <span class="token keyword">public</span> <span class="token class-name">TreeNode</span> <span class="token function">deserialize</span><span class="token punctuation">(</span><span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> nodes<span class="token punctuation">)</span> <span class="token punctuation">{</span>
         <span class="token keyword">if</span> <span class="token punctuation">(</span>nodes<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
         <span class="token class-name">String</span> rootVal <span class="token operator">=</span> nodes<span class="token punctuation">.</span><span class="token function">removeLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token keyword">if</span> <span class="token punctuation">(</span>rootVal<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>NULL<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
         <span class="token comment">// \u6784\u9020\u6839\u8282\u70B9</span>
         <span class="token class-name">TreeNode</span> root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>rootVal<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token comment">// \u5148\u6784\u9020\u53F3\u5B50\u6811\u518D\u6784\u9020\u5DE6\u5B50\u6811</span>
         root<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">deserialize</span><span class="token punctuation">(</span>nodes<span class="token punctuation">)</span><span class="token punctuation">;</span>
         root<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">deserialize</span><span class="token punctuation">(</span>nodes<span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token keyword">return</span> root<span class="token punctuation">;</span>
     <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-5-\u4E1C\u54E5\u5E26\u4F60\u5237\u4E8C\u53C9\u6811-\u540E\u5E8F\u7BC7" tabindex="-1"><a class="header-anchor" href="#_3-5-\u4E1C\u54E5\u5E26\u4F60\u5237\u4E8C\u53C9\u6811-\u540E\u5E8F\u7BC7" aria-hidden="true">#</a> 3.5 \u4E1C\u54E5\u5E26\u4F60\u5237\u4E8C\u53C9\u6811\uFF08\u540E\u5E8F\u7BC7\uFF09</h3>`,11),to={id:"_652-\u5BFB\u627E\u91CD\u590D\u7684\u5B50\u6811",tabindex:"-1"},eo=n("a",{class:"header-anchor",href:"#_652-\u5BFB\u627E\u91CD\u590D\u7684\u5B50\u6811","aria-hidden":"true"},"#",-1),oo=s(),co={href:"https://leetcode.cn/problems/find-duplicate-subtrees/",target:"_blank",rel:"noopener noreferrer"},lo=s("652. \u5BFB\u627E\u91CD\u590D\u7684\u5B50\u6811"),io=t(`<p>\u7ED9\u5B9A\u4E00\u68F5\u4E8C\u53C9\u6811 root\uFF0C\u8FD4\u56DE\u6240\u6709\u91CD\u590D\u7684\u5B50\u6811\u3002</p><p>\u5BF9\u4E8E\u540C\u4E00\u7C7B\u7684\u91CD\u590D\u5B50\u6811\uFF0C\u4F60\u53EA\u9700\u8981\u8FD4\u56DE\u5176\u4E2D\u4EFB\u610F\u4E00\u68F5\u7684\u6839\u7ED3\u70B9\u5373\u53EF\u3002</p><p>\u5982\u679C\u4E24\u68F5\u6811\u5177\u6709\u76F8\u540C\u7684\u7ED3\u6784\u548C\u76F8\u540C\u7684\u7ED3\u70B9\u503C\uFF0C\u5219\u5B83\u4EEC\u662F\u91CD\u590D\u7684\u3002</p><p><strong>\u601D\u8DEF\uFF1A</strong></p><p>1.\u9996\u5148\u8981\u77E5\u9053\u81EA\u5DF1\u957F\u4EC0\u4E48\u6837\u5B50\uFF0C\u4E5F\u5C31\u662F\u8981\u5E8F\u5217\u5316\u4E8C\u53C9\u6811\uFF0C\u4F7F\u7528<code>\u540E\u5E8F\u904D\u5386</code></p><p>2.\u63A5\u7740\u8981\u77E5\u9053\u522B\u4EBA\u957F\u4EC0\u4E48\u6837\u5B50\uFF0C\u501F\u52A9\u5916\u90E8\u53D8\u91CF <code>HashMap \u6216 HashSet</code>\uFF0C\u8FD9\u9053\u9898\u9700\u8981\u4F7F\u7528 <code>HashMap</code>\uFF0C\u9632\u6B62\u91CD\u590D\u7684\u5B50\u6811\u52A0\u5165\u7ED3\u679C\u96C6\u591A\u6B21</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>

    <span class="token comment">// \u8BB0\u5F55\u5B50\u6811\u51FA\u73B0\u7684\u6B21\u6570</span>
    <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> memo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">&gt;</span></span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">&gt;</span></span> <span class="token function">findDuplicateSubtrees</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">serialize</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> res<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// \u5E8F\u5217\u5316\u4E8C\u53C9\u6811</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">&quot;#&quot;</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> left <span class="token operator">=</span> <span class="token function">serialize</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> right <span class="token operator">=</span> <span class="token function">serialize</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// \u5DE6\u53F3\u5B50\u6811\u7684\u5E8F\u5217\u5316\u7ED3\u679C\u52A0\u4E0A\u5F53\u524D\u8282\u70B9\u5C31\u662F\u4E8C\u53C9\u6811\u5E8F\u5217\u5316\u7ED3\u679C</span>
        <span class="token class-name">String</span> tree <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token string">&quot;,&quot;</span> <span class="token operator">+</span> right <span class="token operator">+</span> <span class="token string">&quot;,&quot;</span> <span class="token operator">+</span> root<span class="token punctuation">.</span>val<span class="token punctuation">;</span>
        <span class="token keyword">int</span> count <span class="token operator">=</span> memo<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>tree<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// \u7B2C\u4E8C\u6B21\u51FA\u73B0</span>
            res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> 
        <span class="token comment">// \u51FA\u73B0\u6B21\u6570 + 1</span>
        memo<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>tree<span class="token punctuation">,</span> count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> tree<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-6-\u5F52\u5E76\u6392\u5E8F\u8BE6\u89E3\u53CA\u5E94\u7528" tabindex="-1"><a class="header-anchor" href="#_3-6-\u5F52\u5E76\u6392\u5E8F\u8BE6\u89E3\u53CA\u5E94\u7528" aria-hidden="true">#</a> 3.6 \u5F52\u5E76\u6392\u5E8F\u8BE6\u89E3\u53CA\u5E94\u7528</h3>`,8),uo={id:"_912-\u6392\u5E8F\u6570\u7EC4",tabindex:"-1"},ko=n("a",{class:"header-anchor",href:"#_912-\u6392\u5E8F\u6570\u7EC4","aria-hidden":"true"},"#",-1),ro=s(),vo={href:"https://leetcode.cn/problems/sort-an-array/",target:"_blank",rel:"noopener noreferrer"},mo=s("912. \u6392\u5E8F\u6570\u7EC4"),bo=n("p",null,[s("\u7ED9\u4F60\u4E00\u4E2A\u6574\u6570\u6570\u7EC4 "),n("code",null,"nums"),s("\uFF0C\u8BF7\u4F60\u5C06\u8BE5\u6570\u7EC4\u5347\u5E8F\u6392\u5217\u3002")],-1),ho={href:"https://leetcode.cn/problems/sort-an-array/solutions/179489/fu-xi-ji-chu-pai-xu-suan-fa-java-by-liweiwei1419/",target:"_blank",rel:"noopener noreferrer"},wo=s("https://leetcode.cn/problems/sort-an-array/solutions/179489/fu-xi-ji-chu-pai-xu-suan-fa-java-by-liweiwei1419/"),yo=t(`<p><strong>\u601D\u8DEF\uFF1A</strong></p><p>\u5F52\u5E76\u6392\u5E8F\uFF0C\u540E\u5E8F\u904D\u5386\uFF0C\u5148\u5C06\u5DE6\u8FB9\u6392\u597D\u5E8F\uFF0C\u518D\u5C06\u53F3\u8FB9\u6392\u597D\u5E8F\uFF0C\u6700\u540E\u4E24\u4E2A\u6570\u7EC4\u5408\u5E76\u5728\u4E00\u8D77\uFF0C\u4F7F\u7528 \u4E34\u65F6\u6570\u7EC4 <code>temp</code></p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// \u65F6\u95F4\u590D\u6742\u5EA6 O(NlogN)\uFF0C\u65F6\u95F4\u590D\u6742\u5EA6 O(N)</span>
<span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">sortArray</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Merge</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// \u5F52\u5E76\u6392\u5E8F</span>
<span class="token keyword">class</span> <span class="token class-name">Merge</span> <span class="token punctuation">{</span>

    <span class="token comment">// \u7528\u4E8E\u5408\u5E76\u7684\u4E34\u65F6\u6570\u7EC4</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> temp<span class="token punctuation">;</span>
    
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// \u521D\u59CB\u5316\u6570\u7EC4 temp</span>
        temp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token comment">// \u6392\u5E8F</span>
        <span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// \u5B9A\u4E49\uFF1A\u5BF9 nums[lo, hi] \u6392\u5E8F</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> lo<span class="token punctuation">,</span> <span class="token keyword">int</span> hi<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>lo <span class="token operator">&gt;=</span> hi<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// \u5355\u4E2A\u5143\u7D20\u4E0D\u7528\u6392</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">int</span> mid <span class="token operator">=</span> lo <span class="token operator">+</span> <span class="token punctuation">(</span>hi <span class="token operator">-</span> lo<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token comment">// \u5BF9 nums[lo, mid] \u6392\u5E8F</span>
        <span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> lo<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// \u5BF9 nums[mid+1, hi] \u6392\u5E8F</span>
        <span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> hi<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// \u5408\u5E76 nums[lo, mid] \u548C nums[mid+1, hi] </span>
        <span class="token function">merge</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> lo<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> hi<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// \u5B9A\u4E49\uFF1A\u5408\u5E76 nums[lo, mid] \u548C nums[mid+1, hi]</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> lo<span class="token punctuation">,</span> <span class="token keyword">int</span> mid<span class="token punctuation">,</span> <span class="token keyword">int</span> hi<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// \u5148\u5C06\u6570\u7EC4 nums \u8D4B\u503C\u7ED9 \u6570\u7EC4 temp</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> lo<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> hi<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// \u4F7F\u7528\u53CC\u6307\u9488\u5C06 nums[] \u6392\u597D\u5E8F</span>
        <span class="token keyword">int</span> i <span class="token operator">=</span> lo<span class="token punctuation">,</span> j <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> lo<span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> hi<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// \u5DE6\u8FB9\u6570\u7EC4\u5DF2\u7ECF\u6392\u597D\u5E8F</span>
                nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> hi <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// \u53F3\u8FB9\u7684\u6570\u7EC4\u5DF2\u7ECF\u6392\u597D\u5E8F</span>
                nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> temp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),go={id:"_315-\u8BA1\u7B97\u53F3\u4FA7\u5C0F\u4E8E\u5F53\u524D\u5143\u7D20\u7684\u4E2A\u6570",tabindex:"-1"},fo=n("a",{class:"header-anchor",href:"#_315-\u8BA1\u7B97\u53F3\u4FA7\u5C0F\u4E8E\u5F53\u524D\u5143\u7D20\u7684\u4E2A\u6570","aria-hidden":"true"},"#",-1),_o=s(),xo={href:"https://leetcode.cn/problems/count-of-smaller-numbers-after-self/",target:"_blank",rel:"noopener noreferrer"},jo=s("315. \u8BA1\u7B97\u53F3\u4FA7\u5C0F\u4E8E\u5F53\u524D\u5143\u7D20\u7684\u4E2A\u6570"),No=t(`<p>\u7ED9\u4F60\u4E00\u4E2A\u6574\u6570\u6570\u7EC4 nums \uFF0C\u6309\u8981\u6C42\u8FD4\u56DE\u4E00\u4E2A\u65B0\u6570\u7EC4 counts \u3002\u6570\u7EC4 counts \u6709\u8BE5\u6027\u8D28\uFF1A counts[i] \u7684\u503C\u662F nums[i] \u53F3\u4FA7\u5C0F\u4E8E nums[i] \u7684\u5143\u7D20\u7684\u6570\u91CF\u3002</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/2541/202209171125616.png" alt="image-20220917112531535"></p><p><strong>\u601D\u8DEF\uFF1A</strong></p><p>\u5F52\u5E76\u6392\u5E8F\uFF0C\u5B9A\u4E49\u65B0\u7C7B <code>Pair</code> \u53EF\u4EE5\u8BB0\u5F55\u6570\u7EC4\u5143\u7D20\u503C\u548C\u7D22\u5F15\uFF0C\u6BCF\u6B21\u6267\u884C <code>nums[k] == temp[i]</code> \u65F6\uFF0C\u53EF\u4EE5\u77E5\u9053\uFF0C nums[k] \u540E\u9762\u6BD4 nums[k] \u5C0F\u7684\u5143\u7D20\u6709 <code>j - mid - 1</code> \u4E2A\uFF0C\u4F7F\u7528 \u5916\u90E8\u53D8\u91CF <code>count[]</code> \u7D2F\u52A0\u8D77\u6765</p><p><strong>\u6CE8\u610F\uFF1A</strong></p><p>\u5F53 <code>temp[i].val == temp[j].val</code> \u65F6\uFF0C\u9700\u8981\u66F4\u65B0 count</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/2541/image-20220726102331027.png" alt="image-20220726102331027"></p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">Pair</span> <span class="token punctuation">{</span>  
        <span class="token keyword">private</span> <span class="token keyword">int</span> val<span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token keyword">int</span> index<span class="token punctuation">;</span>
        <span class="token keyword">public</span> <span class="token class-name">Pair</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// \u8BB0\u5F55\u5143\u7D20\u503C</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>val <span class="token operator">=</span> val<span class="token punctuation">;</span>
            <span class="token comment">// \u8BB0\u5F55\u5143\u7D20\u7D22\u5F15</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>index <span class="token operator">=</span> index<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// \u7528\u4E8E\u5F52\u5E76\u6392\u5E8F\u7684\u4E34\u65F6\u6570\u7EC4</span>
    <span class="token keyword">private</span> <span class="token class-name">Pair</span><span class="token punctuation">[</span><span class="token punctuation">]</span> temp<span class="token punctuation">;</span>
    <span class="token comment">// \u8BB0\u5F55\u6BCF\u4E2A\u5143\u7D20\u540E\u9762\u6BD4\u5B83\u5C0F\u7684\u5143\u7D20\u4E2A\u6570</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> count<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> <span class="token function">countSmaller</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
        count <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token class-name">Pair</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Pair</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>
        temp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Pair</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// \u8BB0\u5F55\u5143\u7D20\u548C\u7D22\u5F15\u7684\u5BF9\u5E94\u5173\u7CFB</span>
            arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Pair</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> c <span class="token operator">:</span> count<span class="token punctuation">)</span> res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> res<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token class-name">Pair</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> lo<span class="token punctuation">,</span> <span class="token keyword">int</span> hi<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>lo <span class="token operator">==</span> hi<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> mid <span class="token operator">=</span> lo <span class="token operator">+</span> <span class="token punctuation">(</span>hi <span class="token operator">-</span> lo<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> lo<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> hi<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">merge</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> lo<span class="token punctuation">,</span> mid <span class="token punctuation">,</span> hi<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token class-name">Pair</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> lo<span class="token punctuation">,</span> <span class="token keyword">int</span> mid<span class="token punctuation">,</span> <span class="token keyword">int</span> hi<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// \u521D\u59CB\u5316 temp</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> lo<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> hi<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">int</span> i <span class="token operator">=</span> lo<span class="token punctuation">,</span> j <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token comment">// \u53CC\u6307\u9488</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> lo<span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> hi<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                arr<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> hi <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                arr<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token comment">// \u66F4\u65B0 count</span>
                count<span class="token punctuation">[</span>arr<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>index<span class="token punctuation">]</span> <span class="token operator">+=</span> j <span class="token operator">-</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>val <span class="token operator">&gt;</span> temp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                arr<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>val <span class="token operator">&lt;=</span> temp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                arr<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token comment">// \u66F4\u65B0 count</span>
                count<span class="token punctuation">[</span>arr<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>index<span class="token punctuation">]</span> <span class="token operator">+=</span> j <span class="token operator">-</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-7-\u4E1C\u54E5\u5E26\u4F60\u5237\u4E8C\u53C9\u641C\u7D22\u6811-\u7279\u6027\u7BC7" tabindex="-1"><a class="header-anchor" href="#_3-7-\u4E1C\u54E5\u5E26\u4F60\u5237\u4E8C\u53C9\u641C\u7D22\u6811-\u7279\u6027\u7BC7" aria-hidden="true">#</a> 3.7 \u4E1C\u54E5\u5E26\u4F60\u5237\u4E8C\u53C9\u641C\u7D22\u6811\uFF08\u7279\u6027\u7BC7\uFF09</h3>`,9),So={id:"_230-\u4E8C\u53C9\u641C\u7D22\u6811\u4E2D\u7B2Ck\u5C0F\u7684\u5143\u7D20",tabindex:"-1"},Lo=n("a",{class:"header-anchor",href:"#_230-\u4E8C\u53C9\u641C\u7D22\u6811\u4E2D\u7B2Ck\u5C0F\u7684\u5143\u7D20","aria-hidden":"true"},"#",-1),qo=s(),To={href:"https://leetcode.cn/problems/kth-smallest-element-in-a-bst/",target:"_blank",rel:"noopener noreferrer"},Io=s("230. \u4E8C\u53C9\u641C\u7D22\u6811\u4E2D\u7B2CK\u5C0F\u7684\u5143\u7D20"),Ao=t(`<p>\u7ED9\u5B9A\u4E00\u4E2A\u4E8C\u53C9\u641C\u7D22\u6811\u7684\u6839\u8282\u70B9 <code>root</code> \uFF0C\u548C\u4E00\u4E2A\u6574\u6570 <code>k</code> \uFF0C\u8BF7\u4F60\u8BBE\u8BA1\u4E00\u4E2A\u7B97\u6CD5\u67E5\u627E\u5176\u4E2D\u7B2C <code>k</code> \u4E2A\u6700\u5C0F\u5143\u7D20\uFF08\u4ECE 1 \u5F00\u59CB\u8BA1\u6570\uFF09\u3002</p><p><strong>\u601D\u8DEF\uFF1A</strong></p><p>\u4E2D\u5E8F\u904D\u5386\uFF0C\u7528 <code>count</code> \u53D8\u91CF\u6765\u8BB0\u5F55\u5F53\u524D\u662F\u7B2C\u51E0\u4E2A\u5143\u7D20\uFF0C<code>res</code> \u6765\u5B58\u653E\u7ED3\u679C</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>

    <span class="token comment">// \u8BB0\u5F55\u5F53\u524D\u662F\u7B2C\u51E0\u4E2A\u5143\u7D20</span>
    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment">// \u7ED3\u679C</span>
    <span class="token keyword">int</span> res<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">kthSmallest</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">traverse</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> res<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">traverse</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token function">traverse</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// \u4E2D\u5E8F\u4F4D\u7F6E</span>
        count<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">==</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            res <span class="token operator">=</span> root<span class="token punctuation">.</span>val<span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">traverse</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),Eo={id:"_538-\u628A\u4E8C\u53C9\u641C\u7D22\u6811\u8F6C\u6362\u4E3A\u7D2F\u52A0\u6811",tabindex:"-1"},Oo=n("a",{class:"header-anchor",href:"#_538-\u628A\u4E8C\u53C9\u641C\u7D22\u6811\u8F6C\u6362\u4E3A\u7D2F\u52A0\u6811","aria-hidden":"true"},"#",-1),Mo=s(),zo={href:"https://leetcode.cn/problems/convert-bst-to-greater-tree/",target:"_blank",rel:"noopener noreferrer"},Co=s("538. \u628A\u4E8C\u53C9\u641C\u7D22\u6811\u8F6C\u6362\u4E3A\u7D2F\u52A0\u6811"),Do=t(`<p>\u7ED9\u51FA\u4E8C\u53C9 \u641C\u7D22 \u6811\u7684\u6839\u8282\u70B9\uFF0C\u8BE5\u6811\u7684\u8282\u70B9\u503C\u5404\u4E0D\u76F8\u540C\uFF0C\u8BF7\u4F60\u5C06\u5176\u8F6C\u6362\u4E3A\u7D2F\u52A0\u6811\uFF08Greater Sum Tree\uFF09\uFF0C\u4F7F\u6BCF\u4E2A\u8282\u70B9 node \u7684\u65B0\u503C\u7B49\u4E8E\u539F\u6811\u4E2D\u5927\u4E8E\u6216\u7B49\u4E8E node.val \u7684\u503C\u4E4B\u548C\u3002</p><p>\u63D0\u9192\u4E00\u4E0B\uFF0C\u4E8C\u53C9\u641C\u7D22\u6811\u6EE1\u8DB3\u4E0B\u5217\u7EA6\u675F\u6761\u4EF6\uFF1A</p><p>\u8282\u70B9\u7684\u5DE6\u5B50\u6811\u4EC5\u5305\u542B\u952E \u5C0F\u4E8E \u8282\u70B9\u952E\u7684\u8282\u70B9\u3002 \u8282\u70B9\u7684\u53F3\u5B50\u6811\u4EC5\u5305\u542B\u952E \u5927\u4E8E \u8282\u70B9\u952E\u7684\u8282\u70B9\u3002 \u5DE6\u53F3\u5B50\u6811\u4E5F\u5FC5\u987B\u662F\u4E8C\u53C9\u641C\u7D22\u6811</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/2541/202209181027276.png" alt="image-20220918102705187"></p><p><strong>\u601D\u8DEF\uFF1A</strong></p><p>\u4E2D\u5E8F\u904D\u5386\u5F97\u5230\u9006\u5E8F\u7684\u7ED3\u679C\uFF0C\u4F7F\u7528\u5916\u90E8\u53D8\u91CF <code>sum</code> \u6765\u8BB0\u5F55\u7D2F\u52A0\u548C\uFF0C\u8D4B\u503C\u7ED9\u5F53\u524D\u7684\u8282\u70B9</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u8BB0\u5F55\u7D2F\u52A0\u548C</span>
    <span class="token keyword">int</span> sum<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">TreeNode</span> <span class="token function">convertBST</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">traverse</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> root<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">traverse</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token function">traverse</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// \u7EF4\u62A4\u7D2F\u52A0\u548C</span>
        sum <span class="token operator">+=</span> root<span class="token punctuation">.</span>val<span class="token punctuation">;</span>
        root<span class="token punctuation">.</span>val <span class="token operator">=</span> sum<span class="token punctuation">;</span>
        <span class="token function">traverse</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-8-\u4E1C\u54E5\u5E26\u4F60\u5237\u4E8C\u53C9\u641C\u7D22\u6811-\u57FA\u64CD\u7BC7" tabindex="-1"><a class="header-anchor" href="#_3-8-\u4E1C\u54E5\u5E26\u4F60\u5237\u4E8C\u53C9\u641C\u7D22\u6811-\u57FA\u64CD\u7BC7" aria-hidden="true">#</a> 3.8 \u4E1C\u54E5\u5E26\u4F60\u5237\u4E8C\u53C9\u641C\u7D22\u6811\uFF08\u57FA\u64CD\u7BC7\uFF09</h3>`,8),Ro={id:"_98-\u9A8C\u8BC1\u4E8C\u53C9\u641C\u7D22\u6811",tabindex:"-1"},Bo=n("a",{class:"header-anchor",href:"#_98-\u9A8C\u8BC1\u4E8C\u53C9\u641C\u7D22\u6811","aria-hidden":"true"},"#",-1),Vo=s(),Po={href:"https://leetcode.cn/problems/validate-binary-search-tree/",target:"_blank",rel:"noopener noreferrer"},Uo=s("98. \u9A8C\u8BC1\u4E8C\u53C9\u641C\u7D22\u6811"),Ho=t(`<p>\u7ED9\u4F60\u4E00\u4E2A\u4E8C\u53C9\u6811\u7684\u6839\u8282\u70B9 root \uFF0C\u5224\u65AD\u5176\u662F\u5426\u662F\u4E00\u4E2A\u6709\u6548\u7684\u4E8C\u53C9\u641C\u7D22\u6811\u3002</p><p>\u6709\u6548 \u4E8C\u53C9\u641C\u7D22\u6811\u5B9A\u4E49\u5982\u4E0B\uFF1A</p><p>\u8282\u70B9\u7684\u5DE6\u5B50\u6811\u53EA\u5305\u542B \u5C0F\u4E8E \u5F53\u524D\u8282\u70B9\u7684\u6570\u3002 \u8282\u70B9\u7684\u53F3\u5B50\u6811\u53EA\u5305\u542B \u5927\u4E8E \u5F53\u524D\u8282\u70B9\u7684\u6570\u3002 \u6240\u6709\u5DE6\u5B50\u6811\u548C\u53F3\u5B50\u6811\u81EA\u8EAB\u5FC5\u987B\u4E5F\u662F\u4E8C\u53C9\u641C\u7D22\u6811\u3002</p><p><strong>\u601D\u8DEF\uFF1A</strong></p><p>\u4E0D\u4EC5\u6BCF\u4E2A\u8282\u70B9\u9700\u8981\u5927\u4E8E\u5DE6\u5B50\u6811\u5C0F\u4E8E\u53F3\u5B50\u6811\uFF0C\u800C\u4E14 root \u7684\u6574\u4E2A\u5DE6\u5B50\u6811\u9700\u8981\u5C0F\u4E8E root.val\uFF0C root \u7684\u6574\u4E2A\u53F3\u5B50\u6811\u9700\u8981 \u5927\u4E8E root.val\uFF0C\u4E8C\u53C9\u641C\u7D22\u6811\u9700\u8981\u6EE1\u8DB3 <code>min.val &lt; root.val &lt; max.val</code></p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isValidBST</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">isValidBST</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// \u4E8C\u53C9\u641C\u7D22\u6811\u9700\u8981\u6EE1\u8DB3 min.val &lt; root.val &lt; max.val</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isValidBST</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">,</span> <span class="token class-name">TreeNode</span> min<span class="token punctuation">,</span> <span class="token class-name">TreeNode</span> max<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>min <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> root<span class="token punctuation">.</span>val <span class="token operator">&lt;=</span> min<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>max <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> root<span class="token punctuation">.</span>val <span class="token operator">&gt;=</span> max<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token function">isValidBST</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> min<span class="token punctuation">,</span> root<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isValidBST</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> root<span class="token punctuation">,</span> max<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),Ko={id:"_700-\u4E8C\u53C9\u641C\u7D22\u6811\u4E2D\u7684\u641C\u7D22",tabindex:"-1"},Qo=n("a",{class:"header-anchor",href:"#_700-\u4E8C\u53C9\u641C\u7D22\u6811\u4E2D\u7684\u641C\u7D22","aria-hidden":"true"},"#",-1),Go=s(),Fo={href:"https://leetcode.cn/problems/search-in-a-binary-search-tree/",target:"_blank",rel:"noopener noreferrer"},Wo=s("700. \u4E8C\u53C9\u641C\u7D22\u6811\u4E2D\u7684\u641C\u7D22"),Xo=t(`<p>\u7ED9\u5B9A\u4E8C\u53C9\u641C\u7D22\u6811\uFF08BST\uFF09\u7684\u6839\u8282\u70B9 root \u548C\u4E00\u4E2A\u6574\u6570\u503C val\u3002</p><p>\u4F60\u9700\u8981\u5728 BST \u4E2D\u627E\u5230\u8282\u70B9\u503C\u7B49\u4E8E val \u7684\u8282\u70B9\u3002 \u8FD4\u56DE\u4EE5\u8BE5\u8282\u70B9\u4E3A\u6839\u7684\u5B50\u6811\u3002 \u5982\u679C\u8282\u70B9\u4E0D\u5B58\u5728\uFF0C\u5219\u8FD4\u56DE null \u3002</p><p><strong>\u601D\u8DEF\uFF1A</strong></p><p>\u6839\u636E <code>\u5DE6\u5C0F\u53F3\u5927</code></p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">TreeNode</span> <span class="token function">searchBST</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>val <span class="token operator">&lt;</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// \u5F80\u53F3\u5B50\u6811\u627E</span>
            <span class="token keyword">return</span> <span class="token function">searchBST</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>val <span class="token operator">&gt;</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token function">searchBST</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// \u627E\u5230\u8282\u70B9</span>
        <span class="token keyword">return</span> root<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),Yo={id:"_701-\u4E8C\u53C9\u641C\u7D22\u6811\u4E2D\u7684\u63D2\u5165\u64CD\u4F5C",tabindex:"-1"},Jo=n("a",{class:"header-anchor",href:"#_701-\u4E8C\u53C9\u641C\u7D22\u6811\u4E2D\u7684\u63D2\u5165\u64CD\u4F5C","aria-hidden":"true"},"#",-1),Zo=s(),$o={href:"https://leetcode.cn/problems/insert-into-a-binary-search-tree/",target:"_blank",rel:"noopener noreferrer"},nc=s("701. \u4E8C\u53C9\u641C\u7D22\u6811\u4E2D\u7684\u63D2\u5165\u64CD\u4F5C"),sc=t(`<p>\u7ED9\u5B9A\u4E8C\u53C9\u641C\u7D22\u6811\uFF08BST\uFF09\u7684\u6839\u8282\u70B9 root \u548C\u8981\u63D2\u5165\u6811\u4E2D\u7684\u503C value \uFF0C\u5C06\u503C\u63D2\u5165\u4E8C\u53C9\u641C\u7D22\u6811\u3002 \u8FD4\u56DE\u63D2\u5165\u540E\u4E8C\u53C9\u641C\u7D22\u6811\u7684\u6839\u8282\u70B9\u3002 \u8F93\u5165\u6570\u636E \u4FDD\u8BC1 \uFF0C\u65B0\u503C\u548C\u539F\u59CB\u4E8C\u53C9\u641C\u7D22\u6811\u4E2D\u7684\u4EFB\u610F\u8282\u70B9\u503C\u90FD\u4E0D\u540C\u3002</p><p>\u6CE8\u610F\uFF0C\u53EF\u80FD\u5B58\u5728\u591A\u79CD\u6709\u6548\u7684\u63D2\u5165\u65B9\u5F0F\uFF0C\u53EA\u8981\u6811\u5728\u63D2\u5165\u540E\u4ECD\u4FDD\u6301\u4E3A\u4E8C\u53C9\u641C\u7D22\u6811\u5373\u53EF\u3002 \u4F60\u53EF\u4EE5\u8FD4\u56DE \u4EFB\u610F\u6709\u6548\u7684\u7ED3\u679C \u3002</p><p><strong>\u601D\u8DEF\uFF1A</strong></p><p>root == null \u65F6\uFF0C\u627E\u5230\u4E86\u63D2\u5165\u4F4D\u7F6E\uFF0C\u7528 root.left\u3001root.right \u63A5\u6536\u8FD4\u56DE\u7ED3\u679C</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u5B9A\u4E49\uFF1A\u5728\u4EE5 root \u4E3A\u6839\u8282\u70B9\u7684\u6811\u4E2D\u63D2\u5165 val\uFF0C\u8FD4\u56DE root</span>
    <span class="token keyword">public</span> <span class="token class-name">TreeNode</span> <span class="token function">insertIntoBST</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>val <span class="token operator">&gt;</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            root<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">insertIntoBST</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>val <span class="token operator">&lt;</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            root<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">insertIntoBST</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> root<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),ac={id:"_450-\u5220\u9664\u4E8C\u53C9\u641C\u7D22\u6811\u4E2D\u7684\u8282\u70B9",tabindex:"-1"},pc=n("a",{class:"header-anchor",href:"#_450-\u5220\u9664\u4E8C\u53C9\u641C\u7D22\u6811\u4E2D\u7684\u8282\u70B9","aria-hidden":"true"},"#",-1),tc=s(),ec={href:"https://leetcode.cn/problems/delete-node-in-a-bst/",target:"_blank",rel:"noopener noreferrer"},oc=s("450. \u5220\u9664\u4E8C\u53C9\u641C\u7D22\u6811\u4E2D\u7684\u8282\u70B9"),cc=t(`<p>\u7ED9\u5B9A\u4E00\u4E2A\u4E8C\u53C9\u641C\u7D22\u6811\u7684\u6839\u8282\u70B9 root \u548C\u4E00\u4E2A\u503C key\uFF0C\u5220\u9664\u4E8C\u53C9\u641C\u7D22\u6811\u4E2D\u7684 key \u5BF9\u5E94\u7684\u8282\u70B9\uFF0C\u5E76\u4FDD\u8BC1\u4E8C\u53C9\u641C\u7D22\u6811\u7684\u6027\u8D28\u4E0D\u53D8\u3002\u8FD4\u56DE\u4E8C\u53C9\u641C\u7D22\u6811\uFF08\u6709\u53EF\u80FD\u88AB\u66F4\u65B0\uFF09\u7684\u6839\u8282\u70B9\u7684\u5F15\u7528\u3002</p><p>\u4E00\u822C\u6765\u8BF4\uFF0C\u5220\u9664\u8282\u70B9\u53EF\u5206\u4E3A\u4E24\u4E2A\u6B65\u9AA4\uFF1A</p><p>\u9996\u5148\u627E\u5230\u9700\u8981\u5220\u9664\u7684\u8282\u70B9\uFF1B \u5982\u679C\u627E\u5230\u4E86\uFF0C\u5220\u9664\u5B83\u3002</p><p><strong>\u601D\u8DEF\uFF1A</strong></p><p>1.\u627E\u5230\u5F85\u5220\u9664\u7684\u8282\u70B9</p><p>2.\u5224\u65AD\u8BE5\u8282\u70B9\u7684\u5B69\u5B50\u8282\u70B9\u6570</p><p>\u200B 2.1 \u6CA1\u6709\u5DE6\u53F3\u5B69\u5B50\uFF0C\u76F4\u63A5\u5220\u9664\u5373\u53EF</p><p>\u200B 2.2 \u53EA\u6709\u5DE6\u5B69\u5B50\uFF0C\u5DE6\u5B69\u5B50\u9876\u66FF\u4E0A\u53BB\uFF1B\u53EA\u6709\u53F3\u5B69\u5B50\u4E5F\u540C\u7406</p><p>\u200B 2.3 \u5DE6\u53F3\u5B69\u5B50\u90FD\u6709\uFF0C\u627E\u5230\u53F3\u5B50\u6811\u4E2D\u8282\u70B9\u7684\u6700\u5C0F\u503C\uFF0C\u5728\u53F3\u5B50\u6811\u4E2D\u5220\u9664\u8FD9\u4E2A\u6700\u5C0F\u8282\u70B9\uFF0C\u6362\u5230\u5F53\u524D\u8282\u70B9</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">TreeNode</span> <span class="token function">deleteNode</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// \u627E\u4E0D\u5230\u5F85\u5220\u9664\u8282\u70B9</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> root<span class="token punctuation">;</span>
        <span class="token comment">// 1.\u627E\u5230\u5F85\u5220\u9664\u7684\u8282\u70B9</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>val <span class="token operator">==</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 2.\u5224\u65AD\u8BE5\u8282\u70B9\u7684\u5B69\u5B50\u8282\u70B9\u6570</span>
            <span class="token comment">// 	2.1 \u6CA1\u6709\u5DE6\u53F3\u5B69\u5B50\uFF0C\u76F4\u63A5\u5220\u9664\u5373\u53EF</span>
            <span class="token comment">// 	2.2 \u53EA\u6709\u5DE6\u5B69\u5B50\uFF0C\u5DE6\u5B69\u5B50\u9876\u66FF\u4E0A\u53BB\uFF1B\u53EA\u6709\u53F3\u5B69\u5B50\u4E5F\u540C\u7406</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>left <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> root<span class="token punctuation">.</span>right<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>right <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> root<span class="token punctuation">.</span>left<span class="token punctuation">;</span>
            <span class="token comment">// 	2.3 \u5DE6\u53F3\u5B69\u5B50\u90FD\u6709\uFF0C\u627E\u5230\u53F3\u5B50\u6811\u4E2D\u8282\u70B9\u7684\u6700\u5C0F\u503C\uFF0C\u5728\u53F3\u5B50\u6811\u4E2D\u5220\u9664\u8FD9\u4E2A\u6700\u5C0F\u8282\u70B9\uFF0C\u7528\u6700\u5C0F\u8282\u70B9\u66FF\u6362\u5F53\u524D\u8282\u70B9</span>
            <span class="token class-name">TreeNode</span> minNode <span class="token operator">=</span> <span class="token function">getMin</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
            root<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">deleteNode</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> minNode<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// \u7528\u6700\u5C0F\u8282\u70B9\u66FF\u6362\u5F53\u524D\u8282\u70B9</span>
            minNode<span class="token punctuation">.</span>left <span class="token operator">=</span> root<span class="token punctuation">.</span>left<span class="token punctuation">;</span>
            minNode<span class="token punctuation">.</span>right <span class="token operator">=</span> root<span class="token punctuation">.</span>right<span class="token punctuation">;</span>
            root <span class="token operator">=</span> minNode<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>val <span class="token operator">&gt;</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            root<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">deleteNode</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>val <span class="token operator">&lt;</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            root<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">deleteNode</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> root<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// \u627E\u5230\u6700\u5C0F\u8282\u70B9</span>
    <span class="token keyword">public</span> <span class="token class-name">TreeNode</span> <span class="token function">getMin</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// \u6700\u5DE6\u8FB9\u5C31\u662F\u6700\u5C0F\u8282\u70B9</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> root <span class="token operator">=</span> root<span class="token punctuation">.</span>left<span class="token punctuation">;</span>
        <span class="token keyword">return</span> root<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-9-\u4E1C\u54E5\u5E26\u4F60\u5237\u4E8C\u53C9\u641C\u7D22\u6811-\u6784\u9020\u7BC7" tabindex="-1"><a class="header-anchor" href="#_3-9-\u4E1C\u54E5\u5E26\u4F60\u5237\u4E8C\u53C9\u641C\u7D22\u6811-\u6784\u9020\u7BC7" aria-hidden="true">#</a> 3.9 \u4E1C\u54E5\u5E26\u4F60\u5237\u4E8C\u53C9\u641C\u7D22\u6811\uFF08\u6784\u9020\u7BC7\uFF09</h3>`,11),lc={id:"_96-\u4E0D\u540C\u7684\u4E8C\u53C9\u641C\u7D22\u6811",tabindex:"-1"},ic=n("a",{class:"header-anchor",href:"#_96-\u4E0D\u540C\u7684\u4E8C\u53C9\u641C\u7D22\u6811","aria-hidden":"true"},"#",-1),uc=s(),kc={href:"https://leetcode.cn/problems/unique-binary-search-trees/",target:"_blank",rel:"noopener noreferrer"},rc=s("96. \u4E0D\u540C\u7684\u4E8C\u53C9\u641C\u7D22\u6811"),dc=t(`<p>\u7ED9\u4F60\u4E00\u4E2A\u6574\u6570 <code>n</code> \uFF0C\u6C42\u6070\u7531 <code>n</code> \u4E2A\u8282\u70B9\u7EC4\u6210\u4E14\u8282\u70B9\u503C\u4ECE <code>1</code> \u5230 <code>n</code> \u4E92\u4E0D\u76F8\u540C\u7684 <strong>\u4E8C\u53C9\u641C\u7D22\u6811</strong> \u6709\u591A\u5C11\u79CD\uFF1F\u8FD4\u56DE\u6EE1\u8DB3\u9898\u610F\u7684\u4E8C\u53C9\u641C\u7D22\u6811\u7684\u79CD\u6570\u3002</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/2541/202209181043891.png" alt="image-20220918104342813"></p><p><strong>\u601D\u8DEF\uFF1A</strong> \u5B9A\u4E49 count(lo, hi) \u8BA1\u7B97\u4ECE [lo,hi] \u533A\u95F4\u7EC4\u6210\u7684\u4E8C\u53C9\u641C\u7D22\u6811\u4E2A\u6570</p><p>1.\u6BCF\u4E2A\u8282\u70B9\u90FD\u53EF\u4EE5\u4F5C\u4E3A\u6839\u8282\u70B9</p><p>2.\u8BA1\u7B97\u5DE6\u5B50\u6811\u7EC4\u6210\u7684 BST \u4E2A\u6570</p><p>3.\u8BA1\u7B97\u53F3\u5B50\u6811\u7EC4\u6210\u7684 BST \u4E2A\u6570</p><p>4.\u603B\u4E2A\u6570\u7B49\u4E8E \u5DE6\u5B50\u6811\u548C\u53F3\u5B50\u6811\u7684\u4E58\u79EF</p><p>5.\u7528 \u5907\u5FD8\u5F55 \u89E3\u51B3\u91CD\u590D\u5B50\u95EE\u9898</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>

    <span class="token comment">// \u5907\u5FD8\u5F55</span>
    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> memo<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">numTrees</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        memo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> count <span class="token punctuation">(</span><span class="token keyword">int</span> lo<span class="token punctuation">,</span> <span class="token keyword">int</span> hi<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// base case</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>lo <span class="token operator">&gt;</span> hi<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// \u7A7A\u8282\u70B9\u4E5F\u7B97\u4E00\u79CD\u60C5\u51B5</span>
            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// \u5907\u5FD8\u5F55\u6709\u503C</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>memo<span class="token punctuation">[</span>lo<span class="token punctuation">]</span><span class="token punctuation">[</span>hi<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> memo<span class="token punctuation">[</span>lo<span class="token punctuation">]</span><span class="token punctuation">[</span>hi<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token comment">// 1.\u6BCF\u4E2A\u8282\u70B9\u90FD\u53EF\u4EE5\u4F5C\u4E3A\u6839\u8282\u70B9</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> lo<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> hi<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 2.\u8BA1\u7B97\u5DE6\u5B50\u6811\u7EC4\u6210\u7684 BST \u4E2A\u6570</span>
            <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token function">count</span><span class="token punctuation">(</span>lo<span class="token punctuation">,</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 3.\u8BA1\u7B97\u53F3\u5B50\u6811\u7EC4\u6210\u7684  BST \u4E2A\u6570</span>
            <span class="token keyword">int</span> right <span class="token operator">=</span> <span class="token function">count</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> hi<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 4.\u603B\u4E2A\u6570 += \u5DE6\u5B50\u6811\u548C\u53F3\u5B50\u6811\u7684\u4E58\u79EF</span>
            res <span class="token operator">+=</span> left <span class="token operator">*</span> right<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 5.\u7528 \u5907\u5FD8\u5F55 \u89E3\u51B3\u91CD\u590D\u5B50\u95EE\u9898</span>
        memo<span class="token punctuation">[</span>lo<span class="token punctuation">]</span><span class="token punctuation">[</span>hi<span class="token punctuation">]</span> <span class="token operator">=</span> res<span class="token punctuation">;</span>
        <span class="token keyword">return</span> res<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9),vc={id:"_95-\u4E0D\u540C\u7684\u4E8C\u53C9\u641C\u7D22\u6811-ii",tabindex:"-1"},mc=n("a",{class:"header-anchor",href:"#_95-\u4E0D\u540C\u7684\u4E8C\u53C9\u641C\u7D22\u6811-ii","aria-hidden":"true"},"#",-1),bc=s(),hc={href:"https://leetcode.cn/problems/unique-binary-search-trees-ii/",target:"_blank",rel:"noopener noreferrer"},wc=s("95. \u4E0D\u540C\u7684\u4E8C\u53C9\u641C\u7D22\u6811 II"),yc=t(`<p>\u7ED9\u4F60\u4E00\u4E2A\u6574\u6570 <code>n</code> \uFF0C\u8BF7\u4F60\u751F\u6210\u5E76\u8FD4\u56DE\u6240\u6709\u7531 <code>n</code> \u4E2A\u8282\u70B9\u7EC4\u6210\u4E14\u8282\u70B9\u503C\u4ECE <code>1</code> \u5230 <code>n</code> \u4E92\u4E0D\u76F8\u540C\u7684\u4E0D\u540C <strong>\u4E8C\u53C9\u641C\u7D22\u6811</strong> \u3002\u53EF\u4EE5\u6309 <strong>\u4EFB\u610F\u987A\u5E8F</strong> \u8FD4\u56DE\u7B54\u6848\u3002</p><p><strong>\u601D\u8DEF\uFF1A</strong></p><p>\u5B9A\u4E49\u51FD\u6570 <code>List&lt;TreeNode&gt; count(int lo, int hi)</code>\uFF1A\u8BA1\u7B97 [lo, hi] \u533A\u95F4\u6784\u6210\u7684 BST \u6811</p><p>1.\u904D\u5386\u6240\u6709\u7684\u6839\u8282\u70B9</p><p>2.\u904D\u5386\u6240\u6709\u7684\u5DE6\u5B50\u6811</p><p>3.\u904D\u5386\u6240\u6709\u7684\u53F3\u5B50\u6811</p><p>4.\u6784\u9020 BST \u6811\uFF0C\u52A0\u5165\u7ED3\u679C</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>  

    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">&gt;</span></span> <span class="token function">generateTrees</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// \u5B9A\u4E49\uFF1A\u8BA1\u7B97 [lo, hi] \u533A\u95F4\u6784\u6210\u7684 BST \u6811</span>
    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">&gt;</span></span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">int</span> lo<span class="token punctuation">,</span> <span class="token keyword">int</span> hi<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">// \u6CE8\u610F\uFF1Ares \u7684\u4F4D\u7F6E</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">&gt;</span></span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// base case</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>lo <span class="token operator">&gt;</span> hi<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> res<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 1.\u904D\u5386\u6240\u6709\u7684\u6839\u8282\u70B9</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> lo<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> hi<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">&gt;</span></span> left <span class="token operator">=</span> <span class="token function">count</span><span class="token punctuation">(</span>lo<span class="token punctuation">,</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">&gt;</span></span> right <span class="token operator">=</span> <span class="token function">count</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> hi<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 2.\u904D\u5386\u6240\u6709\u7684\u5DE6\u5B50\u6811</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">TreeNode</span> l <span class="token operator">:</span> left<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 3.\u904D\u5386\u6240\u6709\u7684\u53F3\u5B50\u6811</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">TreeNode</span> r <span class="token operator">:</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// 4.\u6784\u9020 BST \u6811\uFF0C\u52A0\u5165\u7ED3\u679C</span>
                    <span class="token class-name">TreeNode</span> root  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    root<span class="token punctuation">.</span>left <span class="token operator">=</span> l<span class="token punctuation">;</span>
                    root<span class="token punctuation">.</span>right <span class="token operator">=</span> r<span class="token punctuation">;</span>
                    res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> res<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-10-\u5FEB\u901F\u6392\u5E8F\u8BE6\u89E3\u53CA\u5E94\u7528" tabindex="-1"><a class="header-anchor" href="#_3-10-\u5FEB\u901F\u6392\u5E8F\u8BE6\u89E3\u53CA\u5E94\u7528" aria-hidden="true">#</a> 3.10 \u5FEB\u901F\u6392\u5E8F\u8BE6\u89E3\u53CA\u5E94\u7528</h3>`,9),gc={id:"_912-\u6392\u5E8F\u6570\u7EC4-1",tabindex:"-1"},fc=n("a",{class:"header-anchor",href:"#_912-\u6392\u5E8F\u6570\u7EC4-1","aria-hidden":"true"},"#",-1),_c=s(),xc={href:"https://leetcode.cn/problems/sort-an-array/",target:"_blank",rel:"noopener noreferrer"},jc=s("912. \u6392\u5E8F\u6570\u7EC4"),Nc=t(`<p>\u7ED9\u4F60\u4E00\u4E2A\u6574\u6570\u6570\u7EC4 <code>nums</code>\uFF0C\u8BF7\u4F60\u5C06\u8BE5\u6570\u7EC4\u5347\u5E8F\u6392\u5217\u3002</p><p>\u601D\u8DEF\uFF1A</p><p><strong>\u5FEB\u901F\u6392\u5E8F</strong></p><blockquote><p>\u5FEB\u901F\u6392\u5E8F\u7406\u60F3\u60C5\u51B5\u7684\u65F6\u95F4\u590D\u6742\u5EA6\u662F <code>O(NlogN)</code>\uFF0C\u7A7A\u95F4\u590D\u6742\u5EA6 <code>O(logN)</code>\uFF0C\u6781\u7AEF\u60C5\u51B5\u4E0B\u7684\u6700\u574F\u65F6\u95F4\u590D\u6742\u5EA6\u662F <code>O(N^2)</code>\uFF0C\u7A7A\u95F4\u590D\u6742\u5EA6\u662F <code>O(N)</code>\u3002</p></blockquote><p>1.\u6D17\u724C\u7B97\u6CD5 shuffle \u968F\u673A\u6253\u4E71\u6570\u7EC4\uFF0C\u907F\u514D\u51FA\u73B0\u6781\u7AEF\u60C5\u51B5</p><p>2.\u7F16\u5199 partition() \u51FD\u6570\uFF0C\u627E\u5230\u5206\u754C\u70B9 p\uFF0Cnums[lo...p-1] &lt;= p &lt; nums[p+1...hi]</p><p>\u200B 2.1 \u7EF4\u62A4\u4E00\u4E2A\u533A\u95F4 [lo,i) &lt;= pivot(\u4E2D\u95F4\u70B9)\uFF0C(j,hi] &gt; pivot</p><p>\u200B 2.2 i &gt; pivot\uFF0Cj &lt;= pivot\uFF0Ci &lt;= j \u65F6\uFF0C\u4EA4\u6362\u4E24\u4E2A\u5143\u7D20</p><p>\u200B 2.3 \u6700\u540E\u5C06 pivot \u653E\u5230\u5408\u9002\u7684\u4F4D\u7F6E</p><p>3.\u5206\u754C\u70B9\u5DE6\u8FB9\u6392\u5E8F</p><p>4.\u5206\u754C\u70B9\u53F3\u8FB9\u6392\u5E8F</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">sortArray</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Quick</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// \u5FEB\u6392</span>
<span class="token keyword">class</span> <span class="token class-name">Quick</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 1.\u6D17\u724C\u7B97\u6CD5 shuffle \u968F\u673A\u6253\u4E71\u6570\u7EC4\uFF0C\u907F\u514D\u51FA\u73B0\u6781\u7AEF\u60C5\u51B5</span>
        <span class="token function">shuffle</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// \u5BF9\u6574\u4E2A\u6570\u7EC4\u6392\u5E8F</span>
        <span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// \u5BF9 nums[lo,hi] \u6392\u5E8F</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> lo<span class="token punctuation">,</span> <span class="token keyword">int</span> hi<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// \u6CE8\u610F: \u5F53 lo &gt;= hi \u65F6\uFF0C\u76F4\u63A5\u8FD4\u56DE</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>lo <span class="token operator">&gt;=</span> hi<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">int</span> p <span class="token operator">=</span> <span class="token function">partition</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> lo<span class="token punctuation">,</span> hi<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 3.\u5206\u754C\u70B9\u5DE6\u8FB9\u6392\u5E8F</span>
        <span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> lo<span class="token punctuation">,</span> p <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 4.\u5206\u754C\u70B9\u53F3\u8FB9\u6392\u5E8F</span>
        <span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> p <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> hi<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 2.\u7F16\u5199 partition() \u51FD\u6570\uFF0C\u627E\u5230\u5206\u754C\u70B9 p\uFF0Cnums[lo...p-1] &lt;= p &lt; nums[p+1...hi]</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">partition</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> lo<span class="token punctuation">,</span> <span class="token keyword">int</span> hi<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 2.1 \u7EF4\u62A4\u4E00\u4E2A\u533A\u95F4 [lo,i) &lt;= pivot(\u4E2D\u95F4\u70B9)\uFF0C(j,hi] &gt; pivot</span>
        <span class="token keyword">int</span> pivot <span class="token operator">=</span> nums<span class="token punctuation">[</span>lo<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> i <span class="token operator">=</span> lo <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">=</span> hi<span class="token punctuation">;</span>
        <span class="token comment">// i &lt;= j \u76EE\u7684\u662F\u4E3A\u4E86\u5224\u65AD nums[i] \u662F\u5C5E\u4E8E\u54EA\u4E2A</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 2.2 i &gt; pivot\uFF0Cj &lt;= pivot\uFF0Ci &lt;= j \u65F6\uFF0C\u4EA4\u6362\u4E24\u4E2A\u5143\u7D20</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> hi <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> pivot<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                i<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&gt;=</span> lo <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> pivot<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                j<span class="token operator">--</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// \u6CE8\u610F\uFF1A i &gt;= j \u65F6\u4E0D\u7528\u4EA4\u6362</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;=</span> j<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 2.3 \u6700\u540E\u5C06 pivot \u653E\u5230\u5408\u9002\u7684\u4F4D\u7F6E</span>
        <span class="token comment">// \u6CE8\u610F\uFF1A\u8FD9\u91CC\u662F\u653E\u5728 j \u7684\u4F4D\u7F6E\uFF0C pivot \u5C5E\u4E8E [lo, i)</span>
        <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> lo<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> j<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// \u6D17\u724C\u7B97\u6CD5</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">shuffle</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Random</span> rand <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// \u751F\u6210 [0, n - 1]\u7684\u968F\u673A\u6570</span>
            <span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> rand<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>n <span class="token operator">-</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// \u4EA4\u6362\u4E24\u4E2A\u5143\u7D20</span>
            <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// \u4EA4\u6362\u4E24\u4E2A\u5143\u7D20</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> temp <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
        nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,12),Sc={id:"_215-\u6570\u7EC4\u4E2D\u7684\u7B2Ck\u4E2A\u6700\u5927\u5143\u7D20",tabindex:"-1"},Lc=n("a",{class:"header-anchor",href:"#_215-\u6570\u7EC4\u4E2D\u7684\u7B2Ck\u4E2A\u6700\u5927\u5143\u7D20","aria-hidden":"true"},"#",-1),qc=s(),Tc={href:"https://leetcode.cn/problems/kth-largest-element-in-an-array/",target:"_blank",rel:"noopener noreferrer"},Ic=s("215. \u6570\u7EC4\u4E2D\u7684\u7B2CK\u4E2A\u6700\u5927\u5143\u7D20"),Ac=t(`<p>\u7ED9\u5B9A\u6574\u6570\u6570\u7EC4 <code>nums</code> \u548C\u6574\u6570 <code>k</code>\uFF0C\u8BF7\u8FD4\u56DE\u6570\u7EC4\u4E2D\u7B2C <code>k</code> \u4E2A\u6700\u5927\u7684\u5143\u7D20\u3002</p><p>\u8BF7\u6CE8\u610F\uFF0C\u4F60\u9700\u8981\u627E\u7684\u662F\u6570\u7EC4\u6392\u5E8F\u540E\u7684\u7B2C <code>k</code> \u4E2A\u6700\u5927\u7684\u5143\u7D20\uFF0C\u800C\u4E0D\u662F\u7B2C <code>k</code> \u4E2A\u4E0D\u540C\u7684\u5143\u7D20\u3002</p><p><strong>\u601D\u8DEF\uFF1A</strong></p><p>\u5FEB\u6392\uFF0C\u7B2C k \u4E2A\u6700\u5927\u5143\u7D20\uFF0C\u6392\u5E8F\u540E\u4E5F\u5C31\u662F\u7B2C n - k \u4E2A\u5143\u7D20</p><p>1.\u627E\u5230\u5206\u754C\u70B9\u7684\u4E0B\u6807 p</p><p>2.\u5982\u679C p &lt; n - k\uFF0C\u90A3\u4E48\u7B2C k \u5927\u5143\u7D20\u5728 [p+1...hi] \u4E2D</p><p>3.\u5982\u679C p &gt; n - k\uFF0C\u90A3\u4E48\u7B2C k \u5927\u5143\u7D20\u5728 [lo...p-1] \u4E2D</p><p>4.\u627E\u5230\u76F4\u63A5\u8FD4\u56DE</p><p>\u5FEB\u901F\u9009\u62E9\u7B97\u6CD5\uFF1A</p><ul><li>\u65F6\u95F4\u590D\u6742\u5EA6\uFF1A\u671F\u671B O(n)</li><li>\u7A7A\u95F4\u590D\u6742\u5EA6\uFF1A\u5FFD\u7565\u9012\u5F52\u5E26\u6765\u7684\u989D\u5916\u7A7A\u95F4\u5F00\u9500\uFF0C\u590D\u6742\u5EA6\u4E3A O(1)</li></ul><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u5FEB\u901F\u9009\u62E9\u7B97\u6CD5</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">findKthLargest</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// \u968F\u673A\u6253\u4E71\u6570\u7EC4</span>
        <span class="token function">shuffle</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
        <span class="token keyword">int</span> lo <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> hi <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token comment">// \u8F6C\u5316\u4E3A \u7B2C k \u4E2A\u5143\u7D20</span>
        k <span class="token operator">=</span> n <span class="token operator">-</span> k<span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>lo <span class="token operator">&lt;=</span> hi<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> p <span class="token operator">=</span> <span class="token function">partition</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> lo<span class="token punctuation">,</span> hi<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">&lt;</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// \u7B2C k \u5927\u5143\u7D20\u5728 [p+1...hi] \u4E2D</span>
                lo <span class="token operator">=</span> p <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">&gt;</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// \u7B2C k \u5927\u5143\u7D20\u5728 [lo...p-1] \u4E2D</span>
                hi <span class="token operator">=</span> p <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token comment">// \u627E\u5230\u7B2C k \u5927\u5143\u7D20</span>
                <span class="token keyword">return</span> nums<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// \u5BF9 nums[lo..hi] \u8FDB\u884C\u5207\u5206</span>
    <span class="token keyword">int</span> <span class="token function">partition</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> lo<span class="token punctuation">,</span> <span class="token keyword">int</span> hi<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> pivot <span class="token operator">=</span> nums<span class="token punctuation">[</span>lo<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> i <span class="token operator">=</span> lo <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">=</span> hi<span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> hi <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> pivot<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                i<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&gt;=</span> lo <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> pivot<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                j<span class="token operator">--</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;=</span> j<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> lo<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> j<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
        

    <span class="token comment">// \u6D17\u724C\u7B97\u6CD5\uFF0C\u5C06\u8F93\u5165\u7684\u6570\u7EC4\u968F\u673A\u6253\u4E71</span>
    <span class="token keyword">void</span> <span class="token function">shuffle</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Random</span> rand <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> rand<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>n <span class="token operator">-</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// \u539F\u5730\u4EA4\u6362\u6570\u7EC4\u4E2D\u7684\u4E24\u4E2A\u5143\u7D20</span>
    <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> temp <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
        nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u4F18\u5148\u961F\u5217\uFF1A</p><ul><li>\u65F6\u95F4\u590D\u6742\u5EA6 O(nlogk)</li><li>\u7A7A\u95F4\u590D\u6742\u5EA6 O(k)</li></ul><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">findKthLargest</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> pq <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> a <span class="token operator">-</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// \u5143\u7D20\u4E2A\u6570\u5C0F\u4E8E k\uFF0C\u76F4\u63A5\u52A0\u5165</span>
            <span class="token comment">// \u5143\u7D20\u4E2A\u6570\u8FBE\u5230 k\uFF0C\u5E76\u4E14\u6808\u9876\u7684\u5143\u7D20\u6BD4\u5F53\u524D\u5143\u7D20\u5C0F\uFF0C\u5FC5\u5B9A\u4E0D\u662F\u7B2C k \u5927\u5143\u7D20\uFF0C\u5F39\u51FA</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>pq<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> k <span class="token operator">||</span> pq<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> pq<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>pq<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> k<span class="token punctuation">)</span> pq<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> pq<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-11-\u9898\u76EE\u4E0D\u8BA9\u6211\u5E72\u4EC0\u4E48-\u6211\u504F\u8981\u5E72\u4EC0\u4E48" tabindex="-1"><a class="header-anchor" href="#_3-11-\u9898\u76EE\u4E0D\u8BA9\u6211\u5E72\u4EC0\u4E48-\u6211\u504F\u8981\u5E72\u4EC0\u4E48" aria-hidden="true">#</a> 3.11 \u9898\u76EE\u4E0D\u8BA9\u6211\u5E72\u4EC0\u4E48\uFF0C\u6211\u504F\u8981\u5E72\u4EC0\u4E48</h3>`,15),Ec={id:"_341-\u6241\u5E73\u5316\u5D4C\u5957\u5217\u8868\u8FED\u4EE3\u5668",tabindex:"-1"},Oc=n("a",{class:"header-anchor",href:"#_341-\u6241\u5E73\u5316\u5D4C\u5957\u5217\u8868\u8FED\u4EE3\u5668","aria-hidden":"true"},"#",-1),Mc=s(),zc={href:"https://leetcode.cn/problems/flatten-nested-list-iterator/",target:"_blank",rel:"noopener noreferrer"},Cc=s("341. \u6241\u5E73\u5316\u5D4C\u5957\u5217\u8868\u8FED\u4EE3\u5668"),Dc=t(`<p>\u7ED9\u4F60\u4E00\u4E2A\u5D4C\u5957\u7684\u6574\u6570\u5217\u8868 nestedList \u3002\u6BCF\u4E2A\u5143\u7D20\u8981\u4E48\u662F\u4E00\u4E2A\u6574\u6570\uFF0C\u8981\u4E48\u662F\u4E00\u4E2A\u5217\u8868\uFF1B\u8BE5\u5217\u8868\u7684\u5143\u7D20\u4E5F\u53EF\u80FD\u662F\u6574\u6570\u6216\u8005\u662F\u5176\u4ED6\u5217\u8868\u3002\u8BF7\u4F60\u5B9E\u73B0\u4E00\u4E2A\u8FED\u4EE3\u5668\u5C06\u5176\u6241\u5E73\u5316\uFF0C\u4F7F\u4E4B\u80FD\u591F\u904D\u5386\u8FD9\u4E2A\u5217\u8868\u4E2D\u7684\u6240\u6709\u6574\u6570\u3002</p><p>\u5B9E\u73B0\u6241\u5E73\u8FED\u4EE3\u5668\u7C7B NestedIterator \uFF1A</p><p><code>NestedIterator(List&lt;NestedInteger&gt; nestedList)</code> \u7528\u5D4C\u5957\u5217\u8868 nestedList \u521D\u59CB\u5316\u8FED\u4EE3\u5668\u3002 int next() \u8FD4\u56DE\u5D4C\u5957\u5217\u8868\u7684\u4E0B\u4E00\u4E2A\u6574\u6570\u3002 boolean hasNext() \u5982\u679C\u4ECD\u7136\u5B58\u5728\u5F85\u8FED\u4EE3\u7684\u6574\u6570\uFF0C\u8FD4\u56DE true \uFF1B\u5426\u5219\uFF0C\u8FD4\u56DE false \u3002</p><p><strong>\u601D\u8DEF\uFF1A</strong></p><p>1.\u4E0D\u65AD\u62C6\u5206\u76F4\u5230\u7B2C\u4E00\u4E2A\u5143\u7D20\u662F\u6574\u6570</p><p>2.\u5F53\u7B2C\u4E00\u4E2A\u5143\u7D20\u662F\u5217\u8868\u65F6\uFF0C\u62C6\u5206\u5217\u8868\uFF0C\u6309\u987A\u5E8F\u6DFB\u52A0\u8FDB list \u4E2D</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NestedIterator</span> <span class="token keyword">implements</span> <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

    <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">NestedInteger</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">NestedIterator</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">NestedInteger</span><span class="token punctuation">&gt;</span></span> nestedList<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token punctuation">(</span>nestedList<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// hasNext() \u5DF2\u7ECF\u4FDD\u8BC1\u4E86\u7B2C\u4E00\u4E2A\u5143\u7D20\u662F\u6574\u6570</span>
        <span class="token keyword">return</span> list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInteger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 1.\u4E0D\u65AD\u62C6\u5206\u76F4\u5230\u7B2C\u4E00\u4E2A\u5143\u7D20\u662F\u6574\u6570</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>list<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isInteger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 2.\u5F53\u7B2C\u4E00\u4E2A\u5143\u7D20\u662F\u5217\u8868\u65F6\uFF0C\u62C6\u5206\u5217\u8868\uFF0C\u6309\u987A\u5E8F\u6DFB\u52A0\u8FDB list \u4E2D</span>
            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">NestedInteger</span><span class="token punctuation">&gt;</span></span> nestedList <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> nestedList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                list<span class="token punctuation">.</span><span class="token function">addFirst</span><span class="token punctuation">(</span>nestedList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token operator">!</span>list<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-12-git\u539F\u7406\u4E4B\u6700\u8FD1\u516C\u5171\u7956\u5148" tabindex="-1"><a class="header-anchor" href="#_3-12-git\u539F\u7406\u4E4B\u6700\u8FD1\u516C\u5171\u7956\u5148" aria-hidden="true">#</a> 3.12 GIT\u539F\u7406\u4E4B\u6700\u8FD1\u516C\u5171\u7956\u5148</h3>`,8),Rc={id:"_236-\u4E8C\u53C9\u6811\u7684\u6700\u8FD1\u516C\u5171\u7956\u5148",tabindex:"-1"},Bc=n("a",{class:"header-anchor",href:"#_236-\u4E8C\u53C9\u6811\u7684\u6700\u8FD1\u516C\u5171\u7956\u5148","aria-hidden":"true"},"#",-1),Vc=s(),Pc={href:"https://leetcode.cn/problems/lowest-common-ancestor-of-a-binary-tree/",target:"_blank",rel:"noopener noreferrer"},Uc=s("236. \u4E8C\u53C9\u6811\u7684\u6700\u8FD1\u516C\u5171\u7956\u5148"),Hc=t(`<p>\u7ED9\u5B9A\u4E00\u4E2A\u4E8C\u53C9\u6811, \u627E\u5230\u8BE5\u6811\u4E2D\u4E24\u4E2A\u6307\u5B9A\u8282\u70B9\u7684\u6700\u8FD1\u516C\u5171\u7956\u5148\u3002</p><p>\u767E\u5EA6\u767E\u79D1\u4E2D\u6700\u8FD1\u516C\u5171\u7956\u5148\u7684\u5B9A\u4E49\u4E3A\uFF1A\u201C\u5BF9\u4E8E\u6709\u6839\u6811 T \u7684\u4E24\u4E2A\u8282\u70B9 p\u3001q\uFF0C\u6700\u8FD1\u516C\u5171\u7956\u5148\u8868\u793A\u4E3A\u4E00\u4E2A\u8282\u70B9 x\uFF0C\u6EE1\u8DB3 x \u662F p\u3001q \u7684\u7956\u5148\u4E14 x \u7684\u6DF1\u5EA6\u5C3D\u53EF\u80FD\u5927\uFF08\u4E00\u4E2A\u8282\u70B9\u4E5F\u53EF\u4EE5\u662F\u5B83\u81EA\u5DF1\u7684\u7956\u5148\uFF09\u3002\u201D</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/2541/202209191513956.png" alt="image-20220919151304862"></p><p><strong>\u601D\u8DEF\uFF1A</strong></p><p>1.\u524D\u5E8F\u4F4D\u7F6E\u5224\u65AD\u662F\u5426\u627E\u5230</p><p>2.\u5F80\u5DE6\u5B50\u6811\u627E</p><p>3.\u5F80\u53F3\u5B50\u6811\u627E</p><p>4.\u5DE6\u53F3\u5B50\u6811\u90FD\u53EF\u4EE5\u627E\u5230\uFF0C\u8BE5\u8282\u70B9\u662F lca \u8282\u70B9</p><p>5.\u5DE6\u53F3\u5B50\u6811\u5176\u4E2D\u4E00\u4E2A\u53EF\u4EE5\u627E\u5230\uFF0C\u90A3\u4E48\u5DE6\u53F3\u5B50\u6811\u4E2D\u6709\u4E00\u4E2A\u662F lca \u8282\u70B9</p><p>\u590D\u6742\u5EA6\u5206\u6790</p><ul><li>\u65F6\u95F4\u590D\u6742\u5EA6\uFF1AO(N),\u5176\u4E2DN\u662F\u4E8C\u53C9\u6811\u7684\u8282\u70B9\u6570\u3002\u4E8C\u53C9\u6811\u7684\u6240\u6709\u8282\u70B9\u6709\u4E14\u53EA\u4F1A\u88AB\u8BBF\u95EE\u4E00\u6B21\uFF0C\u56E0\u6B64\u65F6\u95F4\u590D\u6742\u5EA6\u4E3AO(N)\u3002</li><li>\u7A7A\u95F4\u590D\u6742\u5EA6\uFF1AO(),\u5176\u4E2DN\u662F\u4E8C\u53C9\u5BF9\u7684\u7684\u8282\u70B9\u6570\u3002\u9012\u5F52\u8C03\u7528\u7684\u6D45\u6DF1\u5EA6\u53D6\u51B3\u4E8E\u4E8C\u53C9\u6811\u7684\u9AD8\u5EA6\uFF0C\u4E8C\u53C9\u6811\u6700\u574F\u60C5\u51B5\u4E0B\u4E3A\u4E00\u6761\u94FE\uFF0C\u6B64\u65F6\u9AD8\u5EA6\u4E3AN,\u56E0\u6BD4\u7A7A\u95F4\u590D\u6742\u5EA6\u4E3AO(N)\u3002</li></ul><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">TreeNode</span> <span class="token function">lowestCommonAncestor</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">,</span> <span class="token class-name">TreeNode</span> p<span class="token punctuation">,</span> <span class="token class-name">TreeNode</span> q<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">traverse</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> p<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// \u5B9A\u4E49\uFF1A\u8FD4\u56DE\u4E8C\u53C9\u6811\u4E2D p,q \u7684\u6700\u8FD1\u516C\u5171\u7956\u5148</span>
    <span class="token keyword">public</span> <span class="token class-name">TreeNode</span> <span class="token function">traverse</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">,</span> <span class="token class-name">TreeNode</span> p<span class="token punctuation">,</span> <span class="token class-name">TreeNode</span> q<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token comment">// 1.\u524D\u5E8F\u4F4D\u7F6E\u5224\u65AD\u662F\u5426\u627E\u5230</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>val <span class="token operator">==</span> p<span class="token punctuation">.</span>val <span class="token operator">||</span> root<span class="token punctuation">.</span>val <span class="token operator">==</span> q<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> root<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 2.\u5F80\u5DE6\u5B50\u6811\u627E</span>
        <span class="token class-name">TreeNode</span> left <span class="token operator">=</span> <span class="token function">traverse</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> p<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 3.\u5F80\u53F3\u5B50\u6811\u627E</span>
        <span class="token class-name">TreeNode</span> right <span class="token operator">=</span> <span class="token function">traverse</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> p <span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 4.\u5DE6\u53F3\u5B50\u6811\u90FD\u53EF\u4EE5\u627E\u5230\uFF0C\u8BE5\u8282\u70B9\u662F lca \u8282\u70B9</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> right <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> root<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 5.\u5DE6\u53F3\u5B50\u6811\u5176\u4E2D\u4E00\u4E2A\u53EF\u4EE5\u627E\u5230\uFF0C\u90A3\u4E48\u5DE6\u53F3\u5B50\u6811\u4E2D\u6709\u4E00\u4E2A\u662F lca \u8282\u70B9</span>
        <span class="token keyword">return</span> left <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> left <span class="token operator">:</span> right<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,12),Kc={id:"_235-\u4E8C\u53C9\u641C\u7D22\u6811\u7684\u6700\u8FD1\u516C\u5171\u7956\u5148",tabindex:"-1"},Qc=n("a",{class:"header-anchor",href:"#_235-\u4E8C\u53C9\u641C\u7D22\u6811\u7684\u6700\u8FD1\u516C\u5171\u7956\u5148","aria-hidden":"true"},"#",-1),Gc=s(),Fc={href:"https://leetcode.cn/problems/lowest-common-ancestor-of-a-binary-search-tree/",target:"_blank",rel:"noopener noreferrer"},Wc=s("235. \u4E8C\u53C9\u641C\u7D22\u6811\u7684\u6700\u8FD1\u516C\u5171\u7956\u5148"),Xc=t(`<p>\u7ED9\u5B9A\u4E00\u4E2A\u4E8C\u53C9\u641C\u7D22\u6811, \u627E\u5230\u8BE5\u6811\u4E2D\u4E24\u4E2A\u6307\u5B9A\u8282\u70B9\u7684\u6700\u8FD1\u516C\u5171\u7956\u5148\u3002</p><p>\u767E\u5EA6\u767E\u79D1\u4E2D\u6700\u8FD1\u516C\u5171\u7956\u5148\u7684\u5B9A\u4E49\u4E3A\uFF1A\u201C\u5BF9\u4E8E\u6709\u6839\u6811 T \u7684\u4E24\u4E2A\u7ED3\u70B9 p\u3001q\uFF0C\u6700\u8FD1\u516C\u5171\u7956\u5148\u8868\u793A\u4E3A\u4E00\u4E2A\u7ED3\u70B9 x\uFF0C\u6EE1\u8DB3 x \u662F p\u3001q \u7684\u7956\u5148\u4E14 x \u7684\u6DF1\u5EA6\u5C3D\u53EF\u80FD\u5927\uFF08\u4E00\u4E2A\u8282\u70B9\u4E5F\u53EF\u4EE5\u662F\u5B83\u81EA\u5DF1\u7684\u7956\u5148\uFF09\u3002\u201D</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/2541/202209191519479.png" alt="image-20220919151920393"></p><p><strong>\u601D\u8DEF\uFF1A</strong></p><p>1.\u5F53\u524D\u8282\u70B9\u6BD4\u6700\u5C0F\u8282\u70B9\u5C0F\uFF0C\u5F80\u53F3\u5B50\u6811\u627E</p><p>2.\u5F53\u524D\u8282\u70B9\u6BD4\u6700\u5927\u8282\u70B9\u5927\uFF0C\u5F80\u5DE6\u5B50\u6811\u627E</p><p>3.min.val &lt;= root.val &lt;= max.val \uFF0C \u8BE5\u8282\u70B9\u5373\u662F lca \u8282\u70B9</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">TreeNode</span> <span class="token function">lowestCommonAncestor</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">,</span> <span class="token class-name">TreeNode</span> p<span class="token punctuation">,</span> <span class="token class-name">TreeNode</span> q<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> min <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>val<span class="token punctuation">,</span> q<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>val<span class="token punctuation">,</span> q<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token function">traverse</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> min<span class="token punctuation">,</span> max<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// \u5B9A\u4E49\uFF1A\u8FD4\u56DE BST \u6811\u4E2D min,max \u7684 lca \u8282\u70B9</span>
    <span class="token keyword">public</span> <span class="token class-name">TreeNode</span> <span class="token function">traverse</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> min<span class="token punctuation">,</span> <span class="token keyword">int</span> max<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token comment">// 1.\u5F53\u524D\u8282\u70B9\u6BD4\u6700\u5C0F\u8282\u70B9\u5C0F\uFF0C\u5F80\u53F3\u5B50\u6811\u627E</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>val <span class="token operator">&lt;</span> min<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token function">traverse</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> min<span class="token punctuation">,</span> max<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 2.\u5F53\u524D\u8282\u70B9\u6BD4\u6700\u5927\u8282\u70B9\u5927\uFF0C\u5F80\u5DE6\u5B50\u6811\u627E</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>val <span class="token operator">&gt;</span> max<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token function">traverse</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> min<span class="token punctuation">,</span> max<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 3.min &lt;= root.val &lt;= max\uFF0C \u8BE5\u8282\u70B9\u5373\u662F lca \u8282\u70B9        </span>
        <span class="token keyword">return</span> root<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1676-\u4E8C\u53C9\u6811\u7684\u6700\u8FD1\u516C\u5171\u7956\u5148-iv" tabindex="-1"><a class="header-anchor" href="#_1676-\u4E8C\u53C9\u6811\u7684\u6700\u8FD1\u516C\u5171\u7956\u5148-iv" aria-hidden="true">#</a> 1676. \u4E8C\u53C9\u6811\u7684\u6700\u8FD1\u516C\u5171\u7956\u5148 IV</h4><p>\u4F9D\u7136\u7ED9\u4F60\u8F93\u5165\u4E00\u68F5\u4E0D\u542B\u91CD\u590D\u503C\u7684\u4E8C\u53C9\u6811\uFF0C\u4F46\u8FD9\u6B21\u4E0D\u662F\u7ED9\u4F60\u8F93\u5165<code>p</code>\u548C<code>q</code>\u4E24\u4E2A\u8282\u70B9\u4E86\uFF0C\u800C\u662F\u7ED9\u4F60\u8F93\u5165\u4E00\u4E2A\u5305\u542B\u82E5\u5E72\u8282\u70B9\u7684\u5217\u8868<code>nodes</code>\uFF08\u8FD9\u4E9B\u8282\u70B9\u90FD\u5B58\u5728\u4E8E\u4E8C\u53C9\u6811\u4E2D\uFF09\uFF0C\u8BA9\u4F60\u7B97\u8FD9\u4E9B\u8282\u70B9\u7684\u6700\u8FD1\u516C\u5171\u7956\u5148\u3002</p><p>\u51FD\u6570\u7B7E\u540D\u5982\u4E0B\uFF1A</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">TreeNode</span> <span class="token function">lowestCommonAncestor</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">,</span> <span class="token class-name">TreeNode</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nodes<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>\u601D\u8DEF\uFF1A</strong></p><p>\u628A nodes \u6570\u7EC4\u8F6C\u5316\u4E3A set\uFF0C\u5728\u524D\u5E8F\u4F4D\u7F6E\u5224\u65AD set \u662F\u5426\u5305\u542B root.val</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">TreeNode</span> <span class="token function">lowestCommonAncestor</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">,</span> <span class="token class-name">TreeNode</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nodes<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u5C06\u5217\u8868\u8F6C\u5316\u6210\u54C8\u5E0C\u96C6\u5408\uFF0C\u4FBF\u4E8E\u5224\u65AD\u5143\u7D20\u662F\u5426\u5B58\u5728</span>
    <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> values <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">TreeNode</span> node <span class="token operator">:</span> nodes<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        values<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token function">find</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> values<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// \u5728\u4E8C\u53C9\u6811\u4E2D\u5BFB\u627E values \u7684\u6700\u8FD1\u516C\u5171\u7956\u5148\u8282\u70B9</span>
<span class="token class-name">TreeNode</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">,</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> values<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// \u524D\u5E8F\u4F4D\u7F6E</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>values<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> root<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token class-name">TreeNode</span> left <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> values<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">TreeNode</span> right <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> values<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// \u540E\u5E8F\u4F4D\u7F6E\uFF0C\u5DF2\u7ECF\u77E5\u9053\u5DE6\u53F3\u5B50\u6811\u662F\u5426\u5B58\u5728\u76EE\u6807\u503C</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> right <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// \u5F53\u524D\u8282\u70B9\u662F LCA \u8282\u70B9</span>
        <span class="token keyword">return</span> root<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> left <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> left <span class="token operator">:</span> right<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1644-\u4E8C\u53C9\u6811\u7684\u6700\u8FD1\u516C\u5171\u7956\u5148-ii" tabindex="-1"><a class="header-anchor" href="#_1644-\u4E8C\u53C9\u6811\u7684\u6700\u8FD1\u516C\u5171\u7956\u5148-ii" aria-hidden="true">#</a> 1644. \u4E8C\u53C9\u6811\u7684\u6700\u8FD1\u516C\u5171\u7956\u5148 II</h4><p>\u7ED9\u4F60\u8F93\u5165\u4E00\u68F5<strong>\u4E0D\u542B\u91CD\u590D\u503C</strong>\u7684\u4E8C\u53C9\u6811\u7684\uFF0C\u4EE5\u53CA\u4E24\u4E2A\u8282\u70B9<code>p</code>\u548C<code>q</code>\uFF0C\u5982\u679C<code>p</code>\u6216<code>q</code>\u4E0D\u5B58\u5728\u4E8E\u6811\u4E2D\uFF0C\u5219\u8FD4\u56DE\u7A7A\u6307\u9488\uFF0C\u5426\u5219\u7684\u8BDD\u8FD4\u56DE<code>p</code>\u548C<code>q</code>\u7684\u6700\u8FD1\u516C\u5171\u7956\u5148\u8282\u70B9\u3002</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// \u7528\u4E8E\u8BB0\u5F55 p \u548C q \u662F\u5426\u5B58\u5728\u4E8E\u4E8C\u53C9\u6811\u4E2D</span>
<span class="token keyword">boolean</span> foundP <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span> foundQ <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

<span class="token class-name">TreeNode</span> <span class="token function">lowestCommonAncestor</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">,</span> <span class="token class-name">TreeNode</span> p<span class="token punctuation">,</span> <span class="token class-name">TreeNode</span> q<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">TreeNode</span> res <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> p<span class="token punctuation">.</span>val<span class="token punctuation">,</span> q<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>foundP <span class="token operator">||</span> <span class="token operator">!</span>foundQ<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// p \u548C q \u90FD\u5B58\u5728\u4E8C\u53C9\u6811\u4E2D\uFF0C\u624D\u6709\u516C\u5171\u7956\u5148</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// \u5728\u4E8C\u53C9\u6811\u4E2D\u5BFB\u627E val1 \u548C val2 \u7684\u6700\u8FD1\u516C\u5171\u7956\u5148\u8282\u70B9</span>
<span class="token class-name">TreeNode</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> val1<span class="token punctuation">,</span> <span class="token keyword">int</span> val2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">TreeNode</span> left <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> val1<span class="token punctuation">,</span> val2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">TreeNode</span> right <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> val1<span class="token punctuation">,</span> val2<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// \u540E\u5E8F\u4F4D\u7F6E\uFF0C\u5224\u65AD\u5F53\u524D\u8282\u70B9\u662F\u4E0D\u662F LCA \u8282\u70B9</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> right <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> root<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// \u540E\u5E8F\u4F4D\u7F6E\uFF0C\u5224\u65AD\u5F53\u524D\u8282\u70B9\u662F\u4E0D\u662F\u76EE\u6807\u503C</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>val <span class="token operator">==</span> val1 <span class="token operator">||</span> root<span class="token punctuation">.</span>val <span class="token operator">==</span> val2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// \u627E\u5230\u4E86\uFF0C\u8BB0\u5F55\u4E00\u4E0B</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>val <span class="token operator">==</span> val1<span class="token punctuation">)</span> foundP <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>val <span class="token operator">==</span> val2<span class="token punctuation">)</span> foundQ <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> root<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> left <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> left <span class="token operator">:</span> right<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1650-\u4E8C\u53C9\u6811\u7684\u6700\u8FD1\u516C\u5171\u7956\u5148-iii" tabindex="-1"><a class="header-anchor" href="#_1650-\u4E8C\u53C9\u6811\u7684\u6700\u8FD1\u516C\u5171\u7956\u5148-iii" aria-hidden="true">#</a> 1650. \u4E8C\u53C9\u6811\u7684\u6700\u8FD1\u516C\u5171\u7956\u5148 III</h4><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> val<span class="token punctuation">;</span>
    <span class="token class-name">Node</span> left<span class="token punctuation">;</span>
    <span class="token class-name">Node</span> right<span class="token punctuation">;</span>
    <span class="token class-name">Node</span> parent<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u7ED9\u4F60\u8F93\u5165\u4E00\u68F5\u5B58\u5728\u4E8E\u4E8C\u53C9\u6811\u4E2D\u7684\u4E24\u4E2A\u8282\u70B9<code>p</code>\u548C<code>q</code>\uFF0C\u8BF7\u4F60\u8FD4\u56DE\u5B83\u4EEC\u7684\u6700\u8FD1\u516C\u5171\u7956\u5148\uFF0C\u51FD\u6570\u7B7E\u540D\u5982\u4E0B\uFF1A</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Node</span> <span class="token function">lowestCommonAncestor</span><span class="token punctuation">(</span><span class="token class-name">Node</span> p<span class="token punctuation">,</span> <span class="token class-name">Node</span> q<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>\u5355\u94FE\u8868\u76F8\u4EA4\u95EE\u9898</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Node</span> <span class="token function">lowestCommonAncestor</span><span class="token punctuation">(</span><span class="token class-name">Node</span> p<span class="token punctuation">,</span> <span class="token class-name">Node</span> q<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u65BD\u5C55\u94FE\u8868\u53CC\u6307\u9488\u6280\u5DE7</span>
    <span class="token class-name">Node</span> a <span class="token operator">=</span> p<span class="token punctuation">,</span> b <span class="token operator">=</span> q<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>a <span class="token operator">!=</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// a \u8D70\u4E00\u6B65\uFF0C\u5982\u679C\u8D70\u5230\u6839\u8282\u70B9\uFF0C\u8F6C\u5230 q \u8282\u70B9</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> a <span class="token operator">=</span> q<span class="token punctuation">;</span>
        <span class="token keyword">else</span>           a <span class="token operator">=</span> a<span class="token punctuation">.</span>parent<span class="token punctuation">;</span>
        <span class="token comment">// b \u8D70\u4E00\u6B65\uFF0C\u5982\u679C\u8D70\u5230\u6839\u8282\u70B9\uFF0C\u8F6C\u5230 p \u8282\u70B9</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> b <span class="token operator">=</span> p<span class="token punctuation">;</span>
        <span class="token keyword">else</span>           b <span class="token operator">=</span> b<span class="token punctuation">.</span>parent<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> a<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-13-\u5982\u4F55\u8BA1\u7B97\u5B8C\u5168\u4E8C\u53C9\u6811\u7684\u8282\u70B9\u6570" tabindex="-1"><a class="header-anchor" href="#_3-13-\u5982\u4F55\u8BA1\u7B97\u5B8C\u5168\u4E8C\u53C9\u6811\u7684\u8282\u70B9\u6570" aria-hidden="true">#</a> 3.13 \u5982\u4F55\u8BA1\u7B97\u5B8C\u5168\u4E8C\u53C9\u6811\u7684\u8282\u70B9\u6570</h3>`,25),Yc={id:"_222-\u5B8C\u5168\u4E8C\u53C9\u6811\u7684\u8282\u70B9\u4E2A\u6570",tabindex:"-1"},Jc=n("a",{class:"header-anchor",href:"#_222-\u5B8C\u5168\u4E8C\u53C9\u6811\u7684\u8282\u70B9\u4E2A\u6570","aria-hidden":"true"},"#",-1),Zc=s(),$c={href:"https://leetcode.cn/problems/count-complete-tree-nodes/",target:"_blank",rel:"noopener noreferrer"},nl=s("222. \u5B8C\u5168\u4E8C\u53C9\u6811\u7684\u8282\u70B9\u4E2A\u6570"),sl=t(`<p>\u7ED9\u4F60\u4E00\u68F5 \u5B8C\u5168\u4E8C\u53C9\u6811 \u7684\u6839\u8282\u70B9 root \uFF0C\u6C42\u51FA\u8BE5\u6811\u7684\u8282\u70B9\u4E2A\u6570\u3002</p><p>\u5B8C\u5168\u4E8C\u53C9\u6811 \u7684\u5B9A\u4E49\u5982\u4E0B\uFF1A\u5728\u5B8C\u5168\u4E8C\u53C9\u6811\u4E2D\uFF0C\u9664\u4E86\u6700\u5E95\u5C42\u8282\u70B9\u53EF\u80FD\u6CA1\u586B\u6EE1\u5916\uFF0C\u5176\u4F59\u6BCF\u5C42\u8282\u70B9\u6570\u90FD\u8FBE\u5230\u6700\u5927\u503C\uFF0C\u5E76\u4E14\u6700\u4E0B\u9762\u4E00\u5C42\u7684\u8282\u70B9\u90FD\u96C6\u4E2D\u5728\u8BE5\u5C42\u6700\u5DE6\u8FB9\u7684\u82E5\u5E72\u4F4D\u7F6E\u3002\u82E5\u6700\u5E95\u5C42\u4E3A\u7B2C h \u5C42\uFF0C\u5219\u8BE5\u5C42\u5305\u542B 1~ 2h \u4E2A\u8282\u70B9\u3002</p><p><strong>\u601D\u8DEF</strong>\uFF1A</p><p>1.\u8BA1\u7B97\u5DE6\u5B50\u6811\u7684\u9AD8\u5EA6</p><p>2.\u8BA1\u7B97\u53F3\u5B50\u6811\u7684\u9AD8\u5EA6</p><p>3.\u76F8\u7B49\uFF0C\u8BC1\u660E\u662F\u6EE1\u4E8C\u53C9\u6811\uFF0C\u8282\u70B9\u4E2A\u6570 = 2 ^ h - 1</p><p>4.\u4E0D\u76F8\u7B49\uFF0C\u6309\u666E\u901A\u4E8C\u53C9\u6811\u7B97</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">countNodes</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">TreeNode</span> l <span class="token operator">=</span> root<span class="token punctuation">,</span> r <span class="token operator">=</span> root<span class="token punctuation">;</span>
        <span class="token keyword">int</span> hl <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> hr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token comment">// 1.\u8BA1\u7B97\u5DE6\u5B50\u6811\u7684\u9AD8\u5EA6</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>l <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            hl<span class="token operator">++</span><span class="token punctuation">;</span>
            l <span class="token operator">=</span> l<span class="token punctuation">.</span>left<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 2.\u8BA1\u7B97\u53F3\u5B50\u6811\u7684\u9AD8\u5EA6</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>r <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            hr<span class="token operator">++</span><span class="token punctuation">;</span>
            r <span class="token operator">=</span> r<span class="token punctuation">.</span>right<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 3.\u76F8\u7B49\uFF0C\u8BC1\u660E\u662F\u6EE1\u4E8C\u53C9\u6811\uFF0C\u8282\u70B9\u4E2A\u6570 = 2 ^ h - 1</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>hr <span class="token operator">==</span> hl<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>hl<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 4.\u4E0D\u76F8\u7B49\uFF0C\u6309\u666E\u901A\u4E8C\u53C9\u6811\u7B97   </span>
        <span class="token keyword">return</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token function">countNodes</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">countNodes</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>     
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>\u603B\u4F53\u7684\u65F6\u95F4\u590D\u6742\u5EA6\u662F <code>O(logN*logN)</code></p><p>\u7531\u4E8E\u5B8C\u5168\u4E8C\u53C9\u6811\u7684\u6027\u8D28\uFF0C\u5176\u5B50\u6811\u4E00\u5B9A\u6709\u4E00\u68F5\u662F\u6EE1\u7684\uFF0C\u6240\u4EE5\u4E00\u5B9A\u4F1A\u89E6\u53D1 <code>hl == hr</code>\uFF0C\u53EA\u6D88\u8017 O(logN) \u7684\u590D\u6742\u5EA6\u800C\u4E0D\u4F1A\u7EE7\u7EED\u9012\u5F52\u3002</p><p>\u7EFC\u4E0A\uFF0C\u7B97\u6CD5\u7684\u9012\u5F52\u6DF1\u5EA6\u5C31\u662F\u6811\u7684\u9AD8\u5EA6 O(logN)\uFF0C\u6BCF\u6B21\u9012\u5F52\u6240\u82B1\u8D39\u7684\u65F6\u95F4\u5C31\u662F while \u5FAA\u73AF\uFF0C\u9700\u8981 O(logN)\uFF0C\u6240\u4EE5\u603B\u4F53\u7684\u65F6\u95F4\u590D\u6742\u5EA6\u662F O(logN*logN)\u3002</p></blockquote><h2 id="_4-\u6570\u636E\u7ED3\u6784" tabindex="-1"><a class="header-anchor" href="#_4-\u6570\u636E\u7ED3\u6784" aria-hidden="true">#</a> 4.\u6570\u636E\u7ED3\u6784</h2><h3 id="_4-1-\u5E26\u4F60\u624B\u64B8-lru-\u7B97\u6CD5" tabindex="-1"><a class="header-anchor" href="#_4-1-\u5E26\u4F60\u624B\u64B8-lru-\u7B97\u6CD5" aria-hidden="true">#</a> 4.1 \u5E26\u4F60\u624B\u64B8 LRU \u7B97\u6CD5</h3>`,11),al={id:"_146-lru-\u7F13\u5B58",tabindex:"-1"},pl=n("a",{class:"header-anchor",href:"#_146-lru-\u7F13\u5B58","aria-hidden":"true"},"#",-1),tl=s(),el={href:"https://leetcode.cn/problems/lru-cache/",target:"_blank",rel:"noopener noreferrer"},ol=s("146. LRU \u7F13\u5B58"),cl=t(`<p>\u8BF7\u4F60\u8BBE\u8BA1\u5E76\u5B9E\u73B0\u4E00\u4E2A\u6EE1\u8DB3 LRU (\u6700\u8FD1\u6700\u5C11\u4F7F\u7528) \u7F13\u5B58 \u7EA6\u675F\u7684\u6570\u636E\u7ED3\u6784\u3002 \u5B9E\u73B0 LRUCache \u7C7B\uFF1A LRUCache(int capacity) \u4EE5 \u6B63\u6574\u6570 \u4F5C\u4E3A\u5BB9\u91CF capacity \u521D\u59CB\u5316 LRU \u7F13\u5B58 int get(int key) \u5982\u679C\u5173\u952E\u5B57 key \u5B58\u5728\u4E8E\u7F13\u5B58\u4E2D\uFF0C\u5219\u8FD4\u56DE\u5173\u952E\u5B57\u7684\u503C\uFF0C\u5426\u5219\u8FD4\u56DE -1 \u3002 void put(int key, int value) \u5982\u679C\u5173\u952E\u5B57 key \u5DF2\u7ECF\u5B58\u5728\uFF0C\u5219\u53D8\u66F4\u5176\u6570\u636E\u503C value \uFF1B\u5982\u679C\u4E0D\u5B58\u5728\uFF0C\u5219\u5411\u7F13\u5B58\u4E2D\u63D2\u5165\u8BE5\u7EC4 key-value \u3002\u5982\u679C\u63D2\u5165\u64CD\u4F5C\u5BFC\u81F4\u5173\u952E\u5B57\u6570\u91CF\u8D85\u8FC7 capacity \uFF0C\u5219\u5E94\u8BE5 \u9010\u51FA \u6700\u4E45\u672A\u4F7F\u7528\u7684\u5173\u952E\u5B57\u3002 \u51FD\u6570 get \u548C put \u5FC5\u987B\u4EE5 O(1) \u7684\u5E73\u5747\u65F6\u95F4\u590D\u6742\u5EA6\u8FD0\u884C\u3002</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">LRUCache</span> <span class="token punctuation">{</span>

    <span class="token comment">// \u5BB9\u91CF</span>
    <span class="token keyword">int</span> cap<span class="token punctuation">;</span>
    <span class="token comment">// \u53CC\u5411\u94FE\u8868 + map</span>
    <span class="token class-name">LinkedHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">LRUCache</span><span class="token punctuation">(</span><span class="token keyword">int</span> capacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>cap <span class="token operator">=</span> capacity<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 1.\u5224\u65AD\u662F\u5426\u5B58\u5728</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cache<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 2.\u4E0D\u5B58\u5728\u8FD4\u56DE-1</span>
            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 3.\u5B58\u5728</span>
        <span class="token comment">// 3.1 \u53D8\u4E3A\u6700\u8FD1\u4F7F\u7528</span>
        <span class="token function">makeRecently</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 3.2 \u8FD4\u56DE\u7ED3\u679C</span>
        <span class="token keyword">return</span> cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 1.\u5224\u65AD\u662F\u5426\u5B58\u5728</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>cache<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 2.\u5B58\u5728</span>
            <span class="token comment">// 2.1 \u4FEE\u6539\u65E7\u503C</span>
            cache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 2.2 \u53D8\u4E3A\u6700\u8FD1\u4F7F\u7528</span>
            <span class="token function">makeRecently</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 3.\u4E0D\u5B58\u5728</span>
        <span class="token comment">// 3.1 \u5224\u65AD\u662F\u5426\u8D85\u8FC7\u5BB9\u91CF</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>cache<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> cap<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 3.2 \u5220\u9664\u961F\u5934\u7684\u503C</span>
            <span class="token keyword">int</span> oldestKey <span class="token operator">=</span> cache<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            cache<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>oldestKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 3.3 \u63D2\u5165\u5230\u961F\u5C3E</span>
        cache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">makeRecently</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 1.\u6839\u636E key \u5F97\u5230\u503C</span>
        <span class="token keyword">int</span> val <span class="token operator">=</span> cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 2.\u5220\u9664\u539F\u6765\u7684\u503C</span>
        cache<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 3.\u5C06\u539F\u6765\u7684\u503C\u63D2\u5165\u5230\u961F\u5C3E</span>
        cache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache obj = new LRUCache(capacity);
 * int param_1 = obj.get(key);
 * obj.put(key,value);
 */</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u624B\u64B8LRU</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// \u53CC\u5411\u94FE\u8868\u8282\u70B9</span>
<span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> key<span class="token punctuation">;</span>
    <span class="token keyword">int</span> val<span class="token punctuation">;</span>
    <span class="token class-name">Node</span> prev<span class="token punctuation">;</span>
    <span class="token class-name">Node</span> next<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>key <span class="token operator">=</span> key<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>val <span class="token operator">=</span> val<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// \u53CC\u5411\u94FE\u8868</span>
<span class="token keyword">class</span> <span class="token class-name">DoubleList</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u865A\u62DF\u5934\u5C3E\u8282\u70B9</span>
    <span class="token class-name">Node</span> head<span class="token punctuation">;</span>
    <span class="token class-name">Node</span> tail<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">DoubleList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        head <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        tail <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        head<span class="token punctuation">.</span>next <span class="token operator">=</span> tail<span class="token punctuation">;</span>
        tail<span class="token punctuation">.</span>prev <span class="token operator">=</span> head<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// \u6DFB\u52A0\u5230\u94FE\u8868\u5C3E\u90E8</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addLast</span><span class="token punctuation">(</span><span class="token class-name">Node</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        n<span class="token punctuation">.</span>prev <span class="token operator">=</span> tail<span class="token punctuation">.</span>prev<span class="token punctuation">;</span>
        n<span class="token punctuation">.</span>next <span class="token operator">=</span> tail<span class="token punctuation">;</span>
        tail<span class="token punctuation">.</span>prev<span class="token punctuation">.</span>next <span class="token operator">=</span> n<span class="token punctuation">;</span>
        tail<span class="token punctuation">.</span>prev <span class="token operator">=</span> n<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// \u5220\u9664\u8282\u70B9\uFF0C\u8282\u70B9\u4E00\u5B9A\u5B58\u5728</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token class-name">Node</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// \u8FD9\u4E5F\u662F\u8981\u8BBE\u8BA1\u6210\u53CC\u5411\u94FE\u8868\u7684\u539F\u56E0\uFF0C\u83B7\u53D6\u5230\u524D\u9A71\u8282\u70B9</span>
        n<span class="token punctuation">.</span>prev<span class="token punctuation">.</span>next <span class="token operator">=</span> n<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        n<span class="token punctuation">.</span>next<span class="token punctuation">.</span>prev <span class="token operator">=</span> n<span class="token punctuation">.</span>prev<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// \u5220\u9664\u5934\u8282\u70B9</span>
    <span class="token keyword">public</span> <span class="token class-name">Node</span> <span class="token function">removeFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// \u6CA1\u6709\u8282\u70B9</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>head<span class="token punctuation">.</span>next <span class="token operator">==</span> tail<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">Node</span> first <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        <span class="token function">remove</span><span class="token punctuation">(</span>first<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> first<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">LRUCache</span> <span class="token punctuation">{</span>

    <span class="token keyword">int</span> cap<span class="token punctuation">;</span>
    <span class="token class-name">DoubleList</span> cache<span class="token punctuation">;</span>
    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Node</span><span class="token punctuation">&gt;</span></span> map<span class="token punctuation">;</span>
    
    <span class="token keyword">public</span> <span class="token class-name">LRUCache</span><span class="token punctuation">(</span><span class="token keyword">int</span> capacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>cap <span class="token operator">=</span> capacity<span class="token punctuation">;</span>
        cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DoubleList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// \u6DFB\u52A0\u5143\u7D20</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addRecently</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Node</span> n <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 1.\u52A0\u5165\u5230\u94FE\u8868\u5C3E\u90E8</span>
        cache<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 2.\u52A0\u5165\u5230map\u4E2D</span>
        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">// \u5220\u9664\u5143\u7D20</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Node</span> n <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 1.\u5220\u9664\u94FE\u8868\u4E2D\u7684\u8282\u70B9</span>
        cache<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 2.\u5728map\u5220\u9664\u8BE5\u5143\u7D20</span>
        map<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// \u5220\u9664\u6700\u4E45\u672A\u4F7F\u7528\u5143\u7D20</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">removeLeastRecently</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 1.\u5220\u9664\u5934\u8282\u70B9</span>
        <span class="token class-name">Node</span> first <span class="token operator">=</span> cache<span class="token punctuation">.</span><span class="token function">removeFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 2.\u5F97\u5230key</span>
        <span class="token keyword">int</span> key <span class="token operator">=</span> first<span class="token punctuation">.</span>key<span class="token punctuation">;</span>
        <span class="token comment">// 3.\u5728map\u4E2D\u5220\u9664\u8BE5\u5143\u7D20</span>
        map<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    <span class="token comment">// \u53D8\u4E3A\u6700\u8FD1\u4F7F\u7528</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">makeRecently</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Node</span> n <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 1.\u9996\u5148\u5220\u9664\u8282\u70B9</span>
        cache<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 2.\u6DFB\u52A0\u5230\u94FE\u8868\u5C3E\u90E8</span>
        cache<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">makeRecently</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">.</span>val<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// \u6CE8\u610F\u4E0D\u80FD\u8FD9\u6837\u5199\uFF0C\u7A7A\u6307\u9488</span>
            <span class="token comment">// Node n = new Node(key, value);</span>
            <span class="token comment">// map.put(key, n);</span>
            <span class="token comment">// makeRecently(key);</span>
            <span class="token comment">// return;</span>
            <span class="token function">remove</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">addRecently</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> cap<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">removeLeastRecently</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">addRecently</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache obj = new LRUCache(capacity);
 * int param_1 = obj.get(key);
 * obj.put(key,value);
 */</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-2-\u5355\u8C03\u6808\u7ED3\u6784\u89E3\u51B3\u4E09\u9053\u7B97\u6CD5\u9898" tabindex="-1"><a class="header-anchor" href="#_4-2-\u5355\u8C03\u6808\u7ED3\u6784\u89E3\u51B3\u4E09\u9053\u7B97\u6CD5\u9898" aria-hidden="true">#</a> 4.2 \u5355\u8C03\u6808\u7ED3\u6784\u89E3\u51B3\u4E09\u9053\u7B97\u6CD5\u9898</h3>`,5),ll={id:"_496-\u4E0B\u4E00\u4E2A\u66F4\u5927\u5143\u7D20-i",tabindex:"-1"},il=n("a",{class:"header-anchor",href:"#_496-\u4E0B\u4E00\u4E2A\u66F4\u5927\u5143\u7D20-i","aria-hidden":"true"},"#",-1),ul=s(),kl={href:"https://leetcode.cn/problems/next-greater-element-i/",target:"_blank",rel:"noopener noreferrer"},rl=s("496. \u4E0B\u4E00\u4E2A\u66F4\u5927\u5143\u7D20 I"),dl=t(`<p>nums1 \u4E2D\u6570\u5B57 x \u7684 \u4E0B\u4E00\u4E2A\u66F4\u5927\u5143\u7D20 \u662F\u6307 x \u5728 nums2 \u4E2D\u5BF9\u5E94\u4F4D\u7F6E \u53F3\u4FA7 \u7684 \u7B2C\u4E00\u4E2A \u6BD4 x \u5927\u7684\u5143\u7D20\u3002</p><p>\u7ED9\u4F60\u4E24\u4E2A \u6CA1\u6709\u91CD\u590D\u5143\u7D20 \u7684\u6570\u7EC4 nums1 \u548C nums2 \uFF0C\u4E0B\u6807\u4ECE 0 \u5F00\u59CB\u8BA1\u6570\uFF0C\u5176\u4E2Dnums1 \u662F nums2 \u7684\u5B50\u96C6\u3002</p><p>\u5BF9\u4E8E\u6BCF\u4E2A 0 &lt;= i &lt; nums1.length \uFF0C\u627E\u51FA\u6EE1\u8DB3 nums1[i] == nums2[j] \u7684\u4E0B\u6807 j \uFF0C\u5E76\u4E14\u5728 nums2 \u786E\u5B9A nums2[j] \u7684 \u4E0B\u4E00\u4E2A\u66F4\u5927\u5143\u7D20 \u3002\u5982\u679C\u4E0D\u5B58\u5728\u4E0B\u4E00\u4E2A\u66F4\u5927\u5143\u7D20\uFF0C\u90A3\u4E48\u672C\u6B21\u67E5\u8BE2\u7684\u7B54\u6848\u662F -1 \u3002</p><p>\u8FD4\u56DE\u4E00\u4E2A\u957F\u5EA6\u4E3A nums1.length \u7684\u6570\u7EC4 ans \u4F5C\u4E3A\u7B54\u6848\uFF0C\u6EE1\u8DB3 ans[i] \u662F\u5982\u4E0A\u6240\u8FF0\u7684 \u4E0B\u4E00\u4E2A\u66F4\u5927\u5143\u7D20 \u3002</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/2541/image-20221102111145411.png" alt="image-20221102111145411"></p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">nextGreaterElement</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums1<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> next <span class="token operator">=</span> <span class="token function">nextGreaterElement</span><span class="token punctuation">(</span>nums2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// \u6620\u5C04\uFF1A x -&gt; x \u7684\u4E0B\u4E00\u4E2A\u66F4\u5927\u5143\u7D20</span>
        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> nextMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums2<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            nextMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>nums2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> next<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">int</span> n <span class="token operator">=</span> nums1<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nextMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>nums1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> res<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// \u67E5\u627E\u6570\u7EC4\u4E2D\u6BCF\u4E00\u4E2A\u5143\u6570\u7684\u4E0B\u4E00\u4E2A\u66F4\u5927\u5143\u7D20</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">nextGreaterElement</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> sta <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// \u4ECE\u540E\u5F80\u524D\u5165\u6808\uFF0C\u56E0\u4E3A\u662F\u627E\u4E0B\u4E00\u4E2A\u66F4\u5927\u5143\u7D20</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// \u5224\u65AD\u4E2A\u5B50\u9AD8\u77EE</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>sta<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> sta<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// \u77EE\u4E2A\u5B50\u51FA\u6808</span>
                sta<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// \u6808\u4E2D\u7684\u7B2C\u4E00\u4E2A\u5143\u7D20\u5C31\u662F\u4E0B\u4E00\u4E2A\u66F4\u5927\u5143\u7D20</span>
            res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> sta<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">:</span> sta<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            sta<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> res<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),vl={id:"_739-\u6BCF\u65E5\u6E29\u5EA6",tabindex:"-1"},ml=n("a",{class:"header-anchor",href:"#_739-\u6BCF\u65E5\u6E29\u5EA6","aria-hidden":"true"},"#",-1),bl=s(),hl={href:"https://leetcode.cn/problems/daily-temperatures/",target:"_blank",rel:"noopener noreferrer"},wl=s("739. \u6BCF\u65E5\u6E29\u5EA6"),yl=t(`<p>\u7ED9\u5B9A\u4E00\u4E2A\u6574\u6570\u6570\u7EC4 temperatures \uFF0C\u8868\u793A\u6BCF\u5929\u7684\u6E29\u5EA6\uFF0C\u8FD4\u56DE\u4E00\u4E2A\u6570\u7EC4 answer \uFF0C\u5176\u4E2D answer[i] \u662F\u6307\u5BF9\u4E8E\u7B2C i \u5929\uFF0C\u4E0B\u4E00\u4E2A\u66F4\u9AD8\u6E29\u5EA6\u51FA\u73B0\u5728\u51E0\u5929\u540E\u3002\u5982\u679C\u6C14\u6E29\u5728\u8FD9\u4E4B\u540E\u90FD\u4E0D\u4F1A\u5347\u9AD8\uFF0C\u8BF7\u5728\u8BE5\u4F4D\u7F6E\u7528 0 \u6765\u4EE3\u66FF\u3002</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/2541/image-20221102122642688.png" alt="image-20221102122642688"></p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">dailyTemperatures</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> temperatures<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> n <span class="token operator">=</span> temperatures<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token comment">// \u5355\u8C03\u6808\u5B58\u7684\u662F\u7D22\u5F15\uFF0C\u800C\u4E0D\u662F\u5143\u7D20</span>
        <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> sta <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>sta<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> temperatures<span class="token punctuation">[</span>sta<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> temperatures<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                sta<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// \u5F97\u5230\u7D22\u5F15\u95F4\u8DDD</span>
            res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> sta<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> sta<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> i<span class="token punctuation">;</span>
            sta<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> res<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),gl={id:"_503-\u4E0B\u4E00\u4E2A\u66F4\u5927\u5143\u7D20-ii",tabindex:"-1"},fl=n("a",{class:"header-anchor",href:"#_503-\u4E0B\u4E00\u4E2A\u66F4\u5927\u5143\u7D20-ii","aria-hidden":"true"},"#",-1),_l=s(),xl={href:"https://leetcode.cn/problems/next-greater-element-ii/",target:"_blank",rel:"noopener noreferrer"},jl=s("503. \u4E0B\u4E00\u4E2A\u66F4\u5927\u5143\u7D20 II"),Nl=t(`<p>\u7ED9\u5B9A\u4E00\u4E2A\u5FAA\u73AF\u6570\u7EC4 nums \uFF08 nums[nums.length - 1] \u7684\u4E0B\u4E00\u4E2A\u5143\u7D20\u662F nums[0] \uFF09\uFF0C\u8FD4\u56DE nums \u4E2D\u6BCF\u4E2A\u5143\u7D20\u7684 \u4E0B\u4E00\u4E2A\u66F4\u5927\u5143\u7D20 \u3002</p><p>\u6570\u5B57 x \u7684 \u4E0B\u4E00\u4E2A\u66F4\u5927\u7684\u5143\u7D20 \u662F\u6309\u6570\u7EC4\u904D\u5386\u987A\u5E8F\uFF0C\u8FD9\u4E2A\u6570\u5B57\u4E4B\u540E\u7684\u7B2C\u4E00\u4E2A\u6BD4\u5B83\u66F4\u5927\u7684\u6570\uFF0C\u8FD9\u610F\u5473\u7740\u4F60\u5E94\u8BE5\u5FAA\u73AF\u5730\u641C\u7D22\u5B83\u7684\u4E0B\u4E00\u4E2A\u66F4\u5927\u7684\u6570\u3002\u5982\u679C\u4E0D\u5B58\u5728\uFF0C\u5219\u8F93\u51FA -1 \u3002</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/2541/image-20221102122708958.png" alt="image-20221102122708958"></p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">nextGreaterElements</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>

        <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> sta <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// \u4F7F\u7528\u5FAA\u574F\u6570\u7EC4\u6765\u6A21\u62DF\u6570\u7EC4\u957F\u5EA6\u7FFB\u500D\u7684\u6548\u679C</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// \u5224\u65AD\u4E2A\u5B50\u9AD8\u77EE</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>sta<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> sta<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> nums<span class="token punctuation">[</span>i <span class="token operator">%</span> n<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// \u77EE\u4E2A\u5B50\u51FA\u6808</span>
                sta<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// \u6808\u4E2D\u7684\u7B2C\u4E00\u4E2A\u5143\u7D20\u5C31\u662F\u4E0B\u4E00\u4E2A\u66F4\u5927\u5143\u7D20</span>
            res<span class="token punctuation">[</span>i <span class="token operator">%</span> n<span class="token punctuation">]</span> <span class="token operator">=</span> sta<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">:</span> sta<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            sta<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i <span class="token operator">%</span> n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> res<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4);function Sl(Ll,ql){const a=l("ExternalLinkIcon");return o(),c("div",null,[u,n("h4",k,[r,d,n("a",v,[m,p(a)])]),b,n("h4",h,[w,y,n("a",g,[f,p(a)])]),_,n("h4",x,[j,N,n("a",S,[L,p(a)])]),q,n("h4",T,[I,A,n("a",E,[O,p(a)])]),M,n("h4",z,[C,D,n("a",R,[B,p(a)])]),V,n("h4",P,[U,H,n("a",K,[Q,p(a)])]),G,n("h4",F,[W,X,n("a",Y,[J,p(a)])]),Z,n("h4",$,[nn,sn,n("a",an,[pn,p(a)])]),tn,n("h4",en,[on,cn,n("a",ln,[un,p(a)])]),kn,n("h4",rn,[dn,vn,n("a",mn,[bn,p(a)])]),hn,n("h4",wn,[yn,gn,n("a",fn,[_n,p(a)])]),xn,n("h4",jn,[Nn,Sn,n("a",Ln,[qn,p(a)])]),Tn,n("h4",In,[An,En,n("a",On,[Mn,p(a)])]),zn,n("h4",Cn,[Dn,Rn,n("a",Bn,[Vn,p(a)])]),Pn,n("h4",Un,[Hn,Kn,n("a",Qn,[Gn,p(a)])]),Fn,n("h4",Wn,[Xn,Yn,n("a",Jn,[Zn,p(a)])]),$n,n("h4",ns,[ss,as,n("a",ps,[ts,p(a)])]),es,n("h4",os,[cs,ls,n("a",is,[us,p(a)])]),ks,n("h4",rs,[ds,vs,n("a",ms,[bs,p(a)])]),hs,n("h4",ws,[ys,gs,n("a",fs,[_s,p(a)])]),xs,n("h4",js,[Ns,Ss,n("a",Ls,[qs,p(a)])]),Ts,n("h4",Is,[As,Es,n("a",Os,[Ms,p(a)])]),zs,n("h4",Cs,[Ds,Rs,n("a",Bs,[Vs,p(a)])]),n("p",null,[Ps,Us,Hs,Ks,Qs,n("a",Gs,[Fs,p(a)]),Ws,Xs,Ys]),Js,n("h4",Zs,[$s,na,n("a",sa,[aa,p(a)])]),pa,n("h4",ta,[ea,oa,n("a",ca,[la,p(a)])]),ia,n("h4",ua,[ka,ra,n("a",da,[va,p(a)])]),ma,n("h4",ba,[ha,wa,n("a",ya,[ga,p(a)])]),fa,n("h4",_a,[xa,ja,n("a",Na,[Sa,p(a)])]),La,n("h4",qa,[Ta,Ia,n("a",Aa,[Ea,p(a)])]),Oa,n("h4",Ma,[za,Ca,n("a",Da,[Ra,p(a)])]),Ba,n("h4",Va,[Pa,Ua,n("a",Ha,[Ka,p(a)])]),Qa,n("h4",Ga,[Fa,Wa,n("a",Xa,[Ya,p(a)])]),Ja,n("h4",Za,[$a,np,n("a",sp,[ap,p(a)])]),pp,n("h4",tp,[ep,op,n("a",cp,[lp,p(a)])]),ip,n("h4",up,[kp,rp,n("a",dp,[vp,p(a)])]),mp,n("h4",bp,[hp,wp,n("a",yp,[gp,p(a)])]),fp,n("h4",_p,[xp,jp,n("a",Np,[Sp,p(a)])]),Lp,n("h4",qp,[Tp,Ip,n("a",Ap,[Ep,p(a)])]),Op,n("h4",Mp,[zp,Cp,n("a",Dp,[Rp,p(a)])]),Bp,n("h4",Vp,[Pp,Up,n("a",Hp,[Kp,p(a)])]),Qp,n("h4",Gp,[Fp,Wp,n("a",Xp,[Yp,p(a)])]),Jp,n("h4",Zp,[$p,nt,n("a",st,[at,p(a)])]),pt,n("h4",tt,[et,ot,n("a",ct,[lt,p(a)])]),it,n("h4",ut,[kt,rt,n("a",dt,[vt,p(a)])]),mt,n("h4",bt,[ht,wt,n("a",yt,[gt,p(a)])]),ft,n("h4",_t,[xt,jt,n("a",Nt,[St,p(a)])]),Lt,n("h4",qt,[Tt,It,n("a",At,[Et,p(a)])]),Ot,n("h4",Mt,[zt,Ct,n("a",Dt,[Rt,p(a)])]),Bt,n("h4",Vt,[Pt,Ut,n("a",Ht,[Kt,p(a)])]),Qt,n("h4",Gt,[Ft,Wt,n("a",Xt,[Yt,p(a)])]),Jt,n("h4",Zt,[$t,ne,n("a",se,[ae,p(a)])]),pe,n("h4",te,[ee,oe,n("a",ce,[le,p(a)])]),ie,n("h4",ue,[ke,re,n("a",de,[ve,p(a)])]),me,n("h4",be,[he,we,n("a",ye,[ge,p(a)])]),fe,n("h4",_e,[xe,je,n("a",Ne,[Se,p(a)])]),Le,n("h4",qe,[Te,Ie,n("a",Ae,[Ee,p(a)])]),Oe,n("h4",Me,[ze,Ce,n("a",De,[Re,p(a)])]),Be,n("h4",Ve,[Pe,Ue,n("a",He,[Ke,p(a)])]),Qe,n("h4",Ge,[Fe,We,n("a",Xe,[Ye,p(a)])]),Je,n("h4",Ze,[$e,no,n("a",so,[ao,p(a)])]),po,n("h4",to,[eo,oo,n("a",co,[lo,p(a)])]),io,n("h4",uo,[ko,ro,n("a",vo,[mo,p(a)])]),bo,n("blockquote",null,[n("p",null,[n("a",ho,[wo,p(a)])])]),yo,n("h4",go,[fo,_o,n("a",xo,[jo,p(a)])]),No,n("h4",So,[Lo,qo,n("a",To,[Io,p(a)])]),Ao,n("h4",Eo,[Oo,Mo,n("a",zo,[Co,p(a)])]),Do,n("h4",Ro,[Bo,Vo,n("a",Po,[Uo,p(a)])]),Ho,n("h4",Ko,[Qo,Go,n("a",Fo,[Wo,p(a)])]),Xo,n("h4",Yo,[Jo,Zo,n("a",$o,[nc,p(a)])]),sc,n("h4",ac,[pc,tc,n("a",ec,[oc,p(a)])]),cc,n("h4",lc,[ic,uc,n("a",kc,[rc,p(a)])]),dc,n("h4",vc,[mc,bc,n("a",hc,[wc,p(a)])]),yc,n("h4",gc,[fc,_c,n("a",xc,[jc,p(a)])]),Nc,n("h4",Sc,[Lc,qc,n("a",Tc,[Ic,p(a)])]),Ac,n("h4",Ec,[Oc,Mc,n("a",zc,[Cc,p(a)])]),Dc,n("h4",Rc,[Bc,Vc,n("a",Pc,[Uc,p(a)])]),Hc,n("h4",Kc,[Qc,Gc,n("a",Fc,[Wc,p(a)])]),Xc,n("h4",Yc,[Jc,Zc,n("a",$c,[nl,p(a)])]),sl,n("h4",al,[pl,tl,n("a",el,[ol,p(a)])]),cl,n("h4",ll,[il,ul,n("a",kl,[rl,p(a)])]),dl,n("h4",vl,[ml,bl,n("a",hl,[wl,p(a)])]),yl,n("h4",gl,[fl,_l,n("a",xl,[jl,p(a)])]),Nl])}var Al=e(i,[["render",Sl],["__file","algorithm01.html.vue"]]);export{Al as default};
